var O=function(){return O=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++){e=arguments[i];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},O.apply(this,arguments)};function yt(a,t,e,i){function n(r){return r instanceof e?r:new e(function(u){u(r)})}return new(e||(e=Promise))(function(r,u){function o(s){try{h(i.next(s))}catch(f){u(f)}}function l(s){try{h(i.throw(s))}catch(f){u(f)}}function h(s){s.done?r(s.value):n(s.value).then(o,l)}h((i=i.apply(a,t||[])).next())})}function pt(a,t){var e={label:0,sent:function(){if(r[0]&1)throw r[1];return r[1]},trys:[],ops:[]},i,n,r,u;return u={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function o(h){return function(s){return l([h,s])}}function l(h){if(i)throw new TypeError("Generator is already executing.");for(;u&&(u=0,h[0]&&(e=0)),e;)try{if(i=1,n&&(r=h[0]&2?n.return:h[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,h[1])).done)return r;switch(n=0,r&&(h=[h[0]&2,r.value]),h[0]){case 0:case 1:r=h;break;case 4:return e.label++,{value:h[1],done:!1};case 5:e.label++,n=h[1],h=[0];continue;case 7:h=e.ops.pop(),e.trys.pop();continue;default:if(r=e.trys,!(r=r.length>0&&r[r.length-1])&&(h[0]===6||h[0]===2)){e=0;continue}if(h[0]===3&&(!r||h[1]>r[0]&&h[1]<r[3])){e.label=h[1];break}if(h[0]===6&&e.label<r[1]){e.label=r[1],r=h;break}if(r&&e.label<r[2]){e.label=r[2],e.ops.push(h);break}r[2]&&e.ops.pop(),e.trys.pop();continue}h=t.call(a,e)}catch(s){h=[6,s],n=0}finally{i=r=0}if(h[0]&5)throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}}function F(a){var t=typeof Symbol=="function"&&Symbol.iterator,e=t&&a[t],i=0;if(e)return e.call(a);if(a&&typeof a.length=="number")return{next:function(){return a&&i>=a.length&&(a=void 0),{value:a&&a[i++],done:!a}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(a,t){var e=typeof Symbol=="function"&&a[Symbol.iterator];if(!e)return a;var i=e.call(a),n,r=[],u;try{for(;(t===void 0||t-- >0)&&!(n=i.next()).done;)r.push(n.value)}catch(o){u={error:o}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(u)throw u.error}}return r}var mt="ENTRIES",it="KEYS",at="VALUES",I="",K=function(){function a(t,e){var i=t._tree,n=Array.from(i.keys());this.set=t,this._type=e,this._path=n.length>0?[{node:i,keys:n}]:[]}return a.prototype.next=function(){var t=this.dive();return this.backtrack(),t},a.prototype.dive=function(){if(this._path.length===0)return{done:!0,value:void 0};var t=N(this._path),e=t.node,i=t.keys;if(N(i)===I)return{done:!1,value:this.result()};var n=e.get(N(i));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()},a.prototype.backtrack=function(){if(this._path.length!==0){var t=N(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}},a.prototype.key=function(){return this.set._prefix+this._path.map(function(t){var e=t.keys;return N(e)}).filter(function(t){return t!==I}).join("")},a.prototype.value=function(){return N(this._path).node.get(I)},a.prototype.result=function(){switch(this._type){case at:return this.value();case it:return this.key();default:return[this.key(),this.value()]}},a.prototype[Symbol.iterator]=function(){return this},a}(),N=function(a){return a[a.length-1]},gt=function(a,t,e){var i=new Map;if(t===void 0)return i;for(var n=t.length+1,r=n+e,u=new Uint8Array(r*n).fill(e+1),o=0;o<n;++o)u[o]=o;for(var l=1;l<r;++l)u[l*n]=l;return ut(a,t,e,i,u,1,n,""),i},ut=function(a,t,e,i,n,r,u,o){var l,h,s=r*u;try{t:for(var f=F(a.keys()),c=f.next();!c.done;c=f.next()){var v=c.value;if(v===I){var d=n[s-1];d<=e&&i.set(o,[a.get(v),d])}else{for(var p=r,y=0;y<v.length;++y,++p){for(var g=v[y],w=u*p,m=w-u,b=n[w],z=Math.max(0,p-e-1),V=Math.min(u-1,p+e),x=z;x<V;++x){var C=g!==t[x],S=n[m+x]+ +C,E=n[m+x+1]+1,M=n[w+x]+1,A=n[w+x+1]=Math.min(S,E,M);A<b&&(b=A)}if(b>e)continue t}ut(a.get(v),t,e,i,n,p,u,o+v)}}}catch(L){l={error:L}}finally{try{c&&!c.done&&(h=f.return)&&h.call(f)}finally{if(l)throw l.error}}},Y=function(){function a(t,e){t===void 0&&(t=new Map),e===void 0&&(e=""),this._size=void 0,this._tree=t,this._prefix=e}return a.prototype.atPrefix=function(t){var e,i;if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");var n=_(R(this._tree,t.slice(this._prefix.length)),2),r=n[0],u=n[1];if(r===void 0){var o=_(Z(u),2),l=o[0],h=o[1];try{for(var s=F(l.keys()),f=s.next();!f.done;f=s.next()){var c=f.value;if(c!==I&&c.startsWith(h)){var v=new Map;return v.set(c.slice(h.length),l.get(c)),new a(v,t)}}}catch(d){e={error:d}}finally{try{f&&!f.done&&(i=s.return)&&i.call(s)}finally{if(e)throw e.error}}}return new a(r,t)},a.prototype.clear=function(){this._size=void 0,this._tree.clear()},a.prototype.delete=function(t){return this._size=void 0,Ft(this._tree,t)},a.prototype.entries=function(){return new K(this,mt)},a.prototype.forEach=function(t){var e,i;try{for(var n=F(this),r=n.next();!r.done;r=n.next()){var u=_(r.value,2),o=u[0],l=u[1];t(o,l,this)}}catch(h){e={error:h}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},a.prototype.fuzzyGet=function(t,e){return gt(this._tree,t,e)},a.prototype.get=function(t){var e=H(this._tree,t);return e!==void 0?e.get(I):void 0},a.prototype.has=function(t){var e=H(this._tree,t);return e!==void 0&&e.has(I)},a.prototype.keys=function(){return new K(this,it)},a.prototype.set=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t);return i.set(I,e),this},Object.defineProperty(a.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var t=this.entries();!t.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),a.prototype.update=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t);return i.set(I,e(i.get(I))),this},a.prototype.fetch=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t),n=i.get(I);return n===void 0&&i.set(I,n=e()),n},a.prototype.values=function(){return new K(this,at)},a.prototype[Symbol.iterator]=function(){return this.entries()},a.from=function(t){var e,i,n=new a;try{for(var r=F(t),u=r.next();!u.done;u=r.next()){var o=_(u.value,2),l=o[0],h=o[1];n.set(l,h)}}catch(s){e={error:s}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}return n},a.fromObject=function(t){return a.from(Object.entries(t))},a}(),R=function(a,t,e){var i,n;if(e===void 0&&(e=[]),t.length===0||a==null)return[a,e];try{for(var r=F(a.keys()),u=r.next();!u.done;u=r.next()){var o=u.value;if(o!==I&&t.startsWith(o))return e.push([a,o]),R(a.get(o),t.slice(o.length),e)}}catch(l){i={error:l}}finally{try{u&&!u.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return e.push([a,t]),R(void 0,"",e)},H=function(a,t){var e,i;if(t.length===0||a==null)return a;try{for(var n=F(a.keys()),r=n.next();!r.done;r=n.next()){var u=r.value;if(u!==I&&t.startsWith(u))return H(a.get(u),t.slice(u.length))}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},X=function(a,t){var e,i,n=t.length;t:for(var r=0;a&&r<n;){try{for(var u=(e=void 0,F(a.keys())),o=u.next();!o.done;o=u.next()){var l=o.value;if(l!==I&&t[r]===l[0]){for(var h=Math.min(n-r,l.length),s=1;s<h&&t[r+s]===l[s];)++s;var f=a.get(l);if(s===l.length)a=f;else{var c=new Map;c.set(l.slice(s),f),a.set(t.slice(r,r+s),c),a.delete(l),a=c}r+=s;continue t}}}catch(d){e={error:d}}finally{try{o&&!o.done&&(i=u.return)&&i.call(u)}finally{if(e)throw e.error}}var v=new Map;return a.set(t.slice(r),v),v}return a},Ft=function(a,t){var e=_(R(a,t),2),i=e[0],n=e[1];if(i!==void 0){if(i.delete(I),i.size===0)ot(n);else if(i.size===1){var r=_(i.entries().next().value,2),u=r[0],o=r[1];lt(n,u,o)}}},ot=function(a){if(a.length!==0){var t=_(Z(a),2),e=t[0],i=t[1];if(e.delete(i),e.size===0)ot(a.slice(0,-1));else if(e.size===1){var n=_(e.entries().next().value,2),r=n[0],u=n[1];r!==I&&lt(a.slice(0,-1),r,u)}}},lt=function(a,t,e){if(a.length!==0){var i=_(Z(a),2),n=i[0],r=i[1];n.set(r+t,e),n.delete(r)}},Z=function(a){return a[a.length-1]},J,j="or",ht="and",wt="and_not",xt=function(){function a(t){if((t==null?void 0:t.fields)==null)throw new Error('MiniSearch: option "fields" must be provided');var e=t.autoVacuum==null||t.autoVacuum===!0?nt:t.autoVacuum;this._options=O(O(O({},tt),t),{autoVacuum:e,searchOptions:O(O({},st),t.searchOptions||{}),autoSuggestOptions:O(O({},St),t.autoSuggestOptions||{})}),this._index=new Y,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=rt,this.addFields(this._options.fields)}return a.prototype.add=function(t){var e,i,n,r,u,o,l=this._options,h=l.extractField,s=l.tokenize,f=l.processTerm,c=l.fields,v=l.idField,d=h(t,v);if(d==null)throw new Error('MiniSearch: document does not have ID field "'.concat(v,'"'));if(this._idToShortId.has(d))throw new Error("MiniSearch: duplicate ID ".concat(d));var p=this.addDocumentId(d);this.saveStoredFields(p,t);try{for(var y=F(c),g=y.next();!g.done;g=y.next()){var w=g.value,m=h(t,w);if(m!=null){var b=s(m.toString(),w),z=this._fieldIds[w],V=new Set(b).size;this.addFieldLength(p,z,this._documentCount-1,V);try{for(var x=(n=void 0,F(b)),C=x.next();!C.done;C=x.next()){var S=C.value,E=f(S,w);if(Array.isArray(E))try{for(var M=(u=void 0,F(E)),A=M.next();!A.done;A=M.next()){var L=A.value;this.addTerm(z,p,L)}}catch(D){u={error:D}}finally{try{A&&!A.done&&(o=M.return)&&o.call(M)}finally{if(u)throw u.error}}else E&&this.addTerm(z,p,E)}}catch(D){n={error:D}}finally{try{C&&!C.done&&(r=x.return)&&r.call(x)}finally{if(n)throw n.error}}}}}catch(D){e={error:D}}finally{try{g&&!g.done&&(i=y.return)&&i.call(y)}finally{if(e)throw e.error}}},a.prototype.addAll=function(t){var e,i;try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;this.add(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},a.prototype.addAllAsync=function(t,e){var i=this;e===void 0&&(e={});var n=e.chunkSize,r=n===void 0?10:n,u={chunk:[],promise:Promise.resolve()},o=t.reduce(function(s,f,c){var v=s.chunk,d=s.promise;return v.push(f),(c+1)%r===0?{chunk:[],promise:d.then(function(){return new Promise(function(p){return setTimeout(p,0)})}).then(function(){return i.addAll(v)})}:{chunk:v,promise:d}},u),l=o.chunk,h=o.promise;return h.then(function(){return i.addAll(l)})},a.prototype.remove=function(t){var e,i,n,r,u,o,l=this._options,h=l.tokenize,s=l.processTerm,f=l.extractField,c=l.fields,v=l.idField,d=f(t,v);if(d==null)throw new Error('MiniSearch: document does not have ID field "'.concat(v,'"'));var p=this._idToShortId.get(d);if(p==null)throw new Error("MiniSearch: cannot remove document with ID ".concat(d,": it is not in the index"));try{for(var y=F(c),g=y.next();!g.done;g=y.next()){var w=g.value,m=f(t,w);if(m!=null){var b=h(m.toString(),w),z=this._fieldIds[w],V=new Set(b).size;this.removeFieldLength(p,z,this._documentCount,V);try{for(var x=(n=void 0,F(b)),C=x.next();!C.done;C=x.next()){var S=C.value,E=s(S,w);if(Array.isArray(E))try{for(var M=(u=void 0,F(E)),A=M.next();!A.done;A=M.next()){var L=A.value;this.removeTerm(z,p,L)}}catch(D){u={error:D}}finally{try{A&&!A.done&&(o=M.return)&&o.call(M)}finally{if(u)throw u.error}}else E&&this.removeTerm(z,p,E)}}catch(D){n={error:D}}finally{try{C&&!C.done&&(r=x.return)&&r.call(x)}finally{if(n)throw n.error}}}}}catch(D){e={error:D}}finally{try{g&&!g.done&&(i=y.return)&&i.call(y)}finally{if(e)throw e.error}}this._storedFields.delete(p),this._documentIds.delete(p),this._idToShortId.delete(d),this._fieldLength.delete(p),this._documentCount-=1},a.prototype.removeAll=function(t){var e,i;if(t)try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;this.remove(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new Y,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},a.prototype.discard=function(t){var e=this,i=this._idToShortId.get(t);if(i==null)throw new Error("MiniSearch: cannot discard document with ID ".concat(t,": it is not in the index"));this._idToShortId.delete(t),this._documentIds.delete(i),this._storedFields.delete(i),(this._fieldLength.get(i)||[]).forEach(function(n,r){e.removeFieldLength(i,r,e._documentCount,n)}),this._fieldLength.delete(i),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()},a.prototype.maybeAutoVacuum=function(){if(this._options.autoVacuum!==!1){var t=this._options.autoVacuum,e=t.minDirtFactor,i=t.minDirtCount,n=t.batchSize,r=t.batchWait;this.conditionalVacuum({batchSize:n,batchWait:r},{minDirtCount:i,minDirtFactor:e})}},a.prototype.discardAll=function(t){var e,i,n=this._options.autoVacuum;try{this._options.autoVacuum=!1;try{for(var r=F(t),u=r.next();!u.done;u=r.next()){var o=u.value;this.discard(o)}}catch(l){e={error:l}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}}finally{this._options.autoVacuum=n}this.maybeAutoVacuum()},a.prototype.replace=function(t){var e=this._options,i=e.idField,n=e.extractField,r=n(t,i);this.discard(r),this.add(t)},a.prototype.vacuum=function(t){return t===void 0&&(t={}),this.conditionalVacuum(t)},a.prototype.conditionalVacuum=function(t,e){var i=this;return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&e,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(function(){var n=i._enqueuedVacuumConditions;return i._enqueuedVacuumConditions=rt,i.performVacuuming(t,n)}),this._enqueuedVacuum)):this.vacuumConditionsMet(e)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(t),this._currentVacuum)},a.prototype.performVacuuming=function(t,e){return yt(this,void 0,void 0,function(){var i,n,r,u,o,l,h,s,f,c,v,d,p,y,g,w,m,b,z,V,x,C,S,E,M;return pt(this,function(A){switch(A.label){case 0:if(i=this._dirtCount,!this.vacuumConditionsMet(e))return[3,10];n=t.batchSize||et.batchSize,r=t.batchWait||et.batchWait,u=1,A.label=1;case 1:A.trys.push([1,7,8,9]),o=F(this._index),l=o.next(),A.label=2;case 2:if(l.done)return[3,6];h=_(l.value,2),s=h[0],f=h[1];try{for(c=(C=void 0,F(f)),v=c.next();!v.done;v=c.next()){d=_(v.value,2),p=d[0],y=d[1];try{for(g=(E=void 0,F(y)),w=g.next();!w.done;w=g.next())m=_(w.value,1),b=m[0],!this._documentIds.has(b)&&(y.size<=1?f.delete(p):y.delete(b))}catch(L){E={error:L}}finally{try{w&&!w.done&&(M=g.return)&&M.call(g)}finally{if(E)throw E.error}}}}catch(L){C={error:L}}finally{try{v&&!v.done&&(S=c.return)&&S.call(c)}finally{if(C)throw C.error}}return this._index.get(s).size===0&&this._index.delete(s),u%n!==0?[3,4]:[4,new Promise(function(L){return setTimeout(L,r)})];case 3:A.sent(),A.label=4;case 4:u+=1,A.label=5;case 5:return l=o.next(),[3,2];case 6:return[3,9];case 7:return z=A.sent(),V={error:z},[3,9];case 8:try{l&&!l.done&&(x=o.return)&&x.call(o)}finally{if(V)throw V.error}return[7];case 9:this._dirtCount-=i,A.label=10;case 10:return[4,null];case 11:return A.sent(),this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null,[2]}})})},a.prototype.vacuumConditionsMet=function(t){if(t==null)return!0;var e=t.minDirtCount,i=t.minDirtFactor;return e=e||nt.minDirtCount,i=i||nt.minDirtFactor,this.dirtCount>=e&&this.dirtFactor>=i},Object.defineProperty(a.prototype,"isVacuuming",{get:function(){return this._currentVacuum!=null},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"dirtCount",{get:function(){return this._dirtCount},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"dirtFactor",{get:function(){return this._dirtCount/(1+this._documentCount+this._dirtCount)},enumerable:!1,configurable:!0}),a.prototype.has=function(t){return this._idToShortId.has(t)},a.prototype.getStoredFields=function(t){var e=this._idToShortId.get(t);if(e!=null)return this._storedFields.get(e)},a.prototype.search=function(t,e){var i,n;e===void 0&&(e={});var r=this.executeQuery(t,e),u=[];try{for(var o=F(r),l=o.next();!l.done;l=o.next()){var h=_(l.value,2),s=h[0],f=h[1],c=f.score,v=f.terms,d=f.match,p=v.length,y={id:this._documentIds.get(s),score:c*p,terms:Object.keys(d),match:d};Object.assign(y,this._storedFields.get(s)),(e.filter==null||e.filter(y))&&u.push(y)}}catch(g){i={error:g}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u.sort(ct),u},a.prototype.autoSuggest=function(t,e){var i,n,r,u;e===void 0&&(e={}),e=O(O({},this._options.autoSuggestOptions),e);var o=new Map;try{for(var l=F(this.search(t,e)),h=l.next();!h.done;h=l.next()){var s=h.value,f=s.score,c=s.terms,v=c.join(" "),d=o.get(v);d!=null?(d.score+=f,d.count+=1):o.set(v,{score:f,terms:c,count:1})}}catch(z){i={error:z}}finally{try{h&&!h.done&&(n=l.return)&&n.call(l)}finally{if(i)throw i.error}}var p=[];try{for(var y=F(o),g=y.next();!g.done;g=y.next()){var w=_(g.value,2),d=w[0],m=w[1],f=m.score,c=m.terms,b=m.count;p.push({suggestion:d,terms:c,score:f/b})}}catch(z){r={error:z}}finally{try{g&&!g.done&&(u=y.return)&&u.call(y)}finally{if(r)throw r.error}}return p.sort(ct),p},Object.defineProperty(a.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"termCount",{get:function(){return this._index.size},enumerable:!1,configurable:!0}),a.loadJSON=function(t,e){if(e==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(t),e)},a.getDefault=function(t){if(tt.hasOwnProperty(t))return q(tt,t);throw new Error('MiniSearch: unknown option "'.concat(t,'"'))},a.loadJS=function(t,e){var i,n,r,u,o,l,h=t.index,s=t.documentCount,f=t.nextId,c=t.documentIds,v=t.fieldIds,d=t.fieldLength,p=t.averageFieldLength,y=t.storedFields,g=t.dirtCount,w=t.serializationVersion;if(w!==1&&w!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var m=new a(e);m._documentCount=s,m._nextId=f,m._documentIds=$(c),m._idToShortId=new Map,m._fieldIds=v,m._fieldLength=$(d),m._avgFieldLength=p,m._storedFields=$(y),m._dirtCount=g||0,m._index=new Y;try{for(var b=F(m._documentIds),z=b.next();!z.done;z=b.next()){var V=_(z.value,2),x=V[0],C=V[1];m._idToShortId.set(C,x)}}catch(P){i={error:P}}finally{try{z&&!z.done&&(n=b.return)&&n.call(b)}finally{if(i)throw i.error}}try{for(var S=F(h),E=S.next();!E.done;E=S.next()){var M=_(E.value,2),A=M[0],L=M[1],D=new Map;try{for(var k=(o=void 0,F(Object.keys(L))),B=k.next();!B.done;B=k.next()){var T=B.value,W=L[T];w===1&&(W=W.ds),D.set(parseInt(T,10),$(W))}}catch(P){o={error:P}}finally{try{B&&!B.done&&(l=k.return)&&l.call(k)}finally{if(o)throw o.error}}m._index.set(A,D)}}catch(P){r={error:P}}finally{try{E&&!E.done&&(u=S.return)&&u.call(S)}finally{if(r)throw r.error}}return m},a.prototype.executeQuery=function(t,e){var i=this;if(e===void 0&&(e={}),typeof t!="string"){var n=O(O(O({},e),t),{queries:void 0}),r=t.queries.map(function(y){return i.executeQuery(y,n)});return this.combineResults(r,n.combineWith)}var u=this._options,o=u.tokenize,l=u.processTerm,h=u.searchOptions,s=O(O({tokenize:o,processTerm:l},h),e),f=s.tokenize,c=s.processTerm,v=f(t).flatMap(function(y){return c(y)}).filter(function(y){return!!y}),d=v.map(zt(s)),p=d.map(function(y){return i.executeQuerySpec(y,s)});return this.combineResults(p,s.combineWith)},a.prototype.executeQuerySpec=function(t,e){var i,n,r,u,o=O(O({},this._options.searchOptions),e),l=(o.fields||this._options.fields).reduce(function(T,W){var P;return O(O({},T),(P={},P[W]=q(o.boost,W)||1,P))},{}),h=o.boostDocument,s=o.weights,f=o.maxFuzzy,c=o.bm25,v=O(O({},st.weights),s),d=v.fuzzy,p=v.prefix,y=this._index.get(t.term),g=this.termResults(t.term,t.term,1,y,l,h,c),w,m;if(t.prefix&&(w=this._index.atPrefix(t.term)),t.fuzzy){var b=t.fuzzy===!0?.2:t.fuzzy,z=b<1?Math.min(f,Math.round(t.term.length*b)):b;z&&(m=this._index.fuzzyGet(t.term,z))}if(w)try{for(var V=F(w),x=V.next();!x.done;x=V.next()){var C=_(x.value,2),S=C[0],E=C[1],M=S.length-t.term.length;if(M){m==null||m.delete(S);var A=p*S.length/(S.length+.3*M);this.termResults(t.term,S,A,E,l,h,c,g)}}}catch(T){i={error:T}}finally{try{x&&!x.done&&(n=V.return)&&n.call(V)}finally{if(i)throw i.error}}if(m)try{for(var L=F(m.keys()),D=L.next();!D.done;D=L.next()){var S=D.value,k=_(m.get(S),2),B=k[0],M=k[1];if(M){var A=d*S.length/(S.length+M);this.termResults(t.term,S,A,B,l,h,c,g)}}}catch(T){r={error:T}}finally{try{D&&!D.done&&(u=L.return)&&u.call(L)}finally{if(r)throw r.error}}return g},a.prototype.combineResults=function(t,e){if(e===void 0&&(e=j),t.length===0)return new Map;var i=e.toLowerCase();return t.reduce(At[i])||new Map},a.prototype.toJSON=function(){var t,e,i,n,r=[];try{for(var u=F(this._index),o=u.next();!o.done;o=u.next()){var l=_(o.value,2),h=l[0],s=l[1],f={};try{for(var c=(i=void 0,F(s)),v=c.next();!v.done;v=c.next()){var d=_(v.value,2),p=d[0],y=d[1];f[p]=Object.fromEntries(y)}}catch(g){i={error:g}}finally{try{v&&!v.done&&(n=c.return)&&n.call(c)}finally{if(i)throw i.error}}r.push([h,f])}}catch(g){t={error:g}}finally{try{o&&!o.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:r,serializationVersion:2}},a.prototype.termResults=function(t,e,i,n,r,u,o,l){var h,s,f,c,v;if(l===void 0&&(l=new Map),n==null)return l;try{for(var d=F(Object.keys(r)),p=d.next();!p.done;p=d.next()){var y=p.value,g=r[y],w=this._fieldIds[y],m=n.get(w);if(m!=null){var b=m.size,z=this._avgFieldLength[w];try{for(var V=(f=void 0,F(m.keys())),x=V.next();!x.done;x=V.next()){var C=x.value;if(!this._documentIds.has(C)){this.removeTerm(w,C,e),b-=1;continue}var S=u?u(this._documentIds.get(C),e,this._storedFields.get(C)):1;if(S){var E=m.get(C),M=this._fieldLength.get(C)[w],A=bt(E,b,this._documentCount,M,z,o),L=i*g*S*A,D=l.get(C);if(D){D.score+=L,Et(D.terms,t);var k=q(D.match,e);k?k.push(y):D.match[e]=[y]}else l.set(C,{score:L,terms:[t],match:(v={},v[e]=[y],v)})}}}catch(B){f={error:B}}finally{try{x&&!x.done&&(c=V.return)&&c.call(V)}finally{if(f)throw f.error}}}}}catch(B){h={error:B}}finally{try{p&&!p.done&&(s=d.return)&&s.call(d)}finally{if(h)throw h.error}}return l},a.prototype.addTerm=function(t,e,i){var n=this._index.fetch(i,vt),r=n.get(t);if(r==null)r=new Map,r.set(e,1),n.set(t,r);else{var u=r.get(e);r.set(e,(u||0)+1)}},a.prototype.removeTerm=function(t,e,i){if(!this._index.has(i)){this.warnDocumentChanged(e,t,i);return}var n=this._index.fetch(i,vt),r=n.get(t);r==null||r.get(e)==null?this.warnDocumentChanged(e,t,i):r.get(e)<=1?r.size<=1?n.delete(t):r.delete(e):r.set(e,r.get(e)-1),this._index.get(i).size===0&&this._index.delete(i)},a.prototype.warnDocumentChanged=function(t,e,i){var n,r;try{for(var u=F(Object.keys(this._fieldIds)),o=u.next();!o.done;o=u.next()){var l=o.value;if(this._fieldIds[l]===e){this._options.logger("warn","MiniSearch: document with ID ".concat(this._documentIds.get(t),' has changed before removal: term "').concat(i,'" was not present in field "').concat(l,'". Removing a document after it has changed can corrupt the index!'),"version_conflict");return}}}catch(h){n={error:h}}finally{try{o&&!o.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}},a.prototype.addDocumentId=function(t){var e=this._nextId;return this._idToShortId.set(t,e),this._documentIds.set(e,t),this._documentCount+=1,this._nextId+=1,e},a.prototype.addFields=function(t){for(var e=0;e<t.length;e++)this._fieldIds[t[e]]=e},a.prototype.addFieldLength=function(t,e,i,n){var r=this._fieldLength.get(t);r==null&&this._fieldLength.set(t,r=[]),r[e]=n;var u=this._avgFieldLength[e]||0,o=u*i+n;this._avgFieldLength[e]=o/(i+1)},a.prototype.removeFieldLength=function(t,e,i,n){if(i===1){this._avgFieldLength[e]=0;return}var r=this._avgFieldLength[e]*i-n;this._avgFieldLength[e]=r/(i-1)},a.prototype.saveStoredFields=function(t,e){var i,n,r=this._options,u=r.storeFields,o=r.extractField;if(!(u==null||u.length===0)){var l=this._storedFields.get(t);l==null&&this._storedFields.set(t,l={});try{for(var h=F(u),s=h.next();!s.done;s=h.next()){var f=s.value,c=o(e,f);c!==void 0&&(l[f]=c)}}catch(v){i={error:v}}finally{try{s&&!s.done&&(n=h.return)&&n.call(h)}finally{if(i)throw i.error}}}},a}(),q=function(a,t){return Object.prototype.hasOwnProperty.call(a,t)?a[t]:void 0},At=(J={},J[j]=function(a,t){var e,i;try{for(var n=F(t.keys()),r=n.next();!r.done;r=n.next()){var u=r.value,o=a.get(u);if(o==null)a.set(u,t.get(u));else{var l=t.get(u),h=l.score,s=l.terms,f=l.match;o.score=o.score+h,o.match=Object.assign(o.match,f),ft(o.terms,s)}}}catch(c){e={error:c}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}return a},J[ht]=function(a,t){var e,i,n=new Map;try{for(var r=F(t.keys()),u=r.next();!u.done;u=r.next()){var o=u.value,l=a.get(o);if(l!=null){var h=t.get(o),s=h.score,f=h.terms,c=h.match;ft(l.terms,f),n.set(o,{score:l.score+s,terms:l.terms,match:Object.assign(l.match,c)})}}}catch(v){e={error:v}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}return n},J[wt]=function(a,t){var e,i;try{for(var n=F(t.keys()),r=n.next();!r.done;r=n.next()){var u=r.value;a.delete(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}return a},J),Ct={k:1.2,b:.7,d:.5},bt=function(a,t,e,i,n,r){var u=r.k,o=r.b,l=r.d,h=Math.log(1+(e-t+.5)/(t+.5));return h*(l+a*(u+1)/(a+u*(1-o+o*i/n)))},zt=function(a){return function(t,e,i){var n=typeof a.fuzzy=="function"?a.fuzzy(t,e,i):a.fuzzy||!1,r=typeof a.prefix=="function"?a.prefix(t,e,i):a.prefix===!0;return{term:t,fuzzy:n,prefix:r}}},tt={idField:"id",extractField:function(a,t){return a[t]},tokenize:function(a,t){return a.split(Dt)},processTerm:function(a,t){return a.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[],logger:function(a,t,e){return console!=null&&console.warn!=null&&console[a](t)},autoVacuum:!0},st={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:Ct},St={combineWith:ht,prefix:function(a,t,e){return t===e.length-1}},et={batchSize:1e3,batchWait:10},rt={minDirtFactor:.1,minDirtCount:20},nt=O(O({},et),rt),Et=function(a,t){a.includes(t)||a.push(t)},ft=function(a,t){var e,i;try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;a.includes(u)||a.push(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},ct=function(a,t){var e=a.score,i=t.score;return i-e},vt=function(){return new Map},$=function(a){var t,e,i=new Map;try{for(var n=F(Object.keys(a)),r=n.next();!r.done;r=n.next()){var u=r.value;i.set(parseInt(u,10),a[u])}}catch(o){t={error:o}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}return i},Dt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;const dt=Object.entries,Mt=Object.fromEntries,Ot=Object.keys,U=100,Q=20,G=(a,t)=>{const e=a.toLowerCase(),i=t.toLowerCase(),n=[];let r=0,u=0;const o=(h,s=!1)=>{let f="";u===0?f=h.length>Q?`… ${h.slice(-Q)}`:h:s?f=h.length+u>U?`${h.slice(0,U-u)}… `:h:f=h.length>Q?`${h.slice(0,Q)} … ${h.slice(-Q)}`:h,f&&n.push(f),u+=f.length,s||(n.push(["mark",t]),u+=t.length,u>=U&&n.push(" …"))};let l=e.indexOf(i,r);if(l===-1)return null;for(;l>=0;){const h=l+i.length;if(o(a.slice(r,l)),r=h,u>U)break;l=e.indexOf(i,r)}return u<U&&o(a.slice(r),!0),n},Vt=(a,t,e={})=>{const i={};return t.search(a,{fuzzy:.2,prefix:!0,boost:{header:4,text:2,title:1},...e}).forEach(n=>{const{title:r,id:u,terms:o,score:l}=n,h=u.split("#")[0];i[h]||(i[h]={title:r,contents:[]});const{contents:s}=i[h],f=c=>{const v=G(n.title,c);if(v&&s.push({type:"title",id:u,display:v,score:l}),"header"in n){const d=G(n.header,c);d&&s.push({type:"heading",id:u.split("#")[0],display:d,score:l})}if("text"in n)for(const d of n.text){const p=G(d,c);p&&s.push({type:"content",header:"header"in n?n.header:n.title,id:u.split("#")[0],display:p,score:l})}"customFields"in n&&dt(n.customFields).forEach(([d,p])=>{p.forEach(y=>{const g=G(y,c);g&&s.push({type:"custom",id:u,index:d,display:g,score:l})})})};o.forEach(c=>{f(c)})}),Ot(i).sort((n,r)=>i[r].contents.reduce((u,{score:o})=>u+o,0)-i[n].contents.reduce((u,{score:o})=>u+o,0)).map(n=>i[n])},Lt=Mt(dt(JSON.parse("{\"/\":{\"documentCount\":164,\"nextId\":164,\"documentIds\":{\"0\":\"v-1d2cefc0\",\"1\":\"v-5bc3b2da#如何处理内存泄漏问题\",\"2\":\"v-5bc3b2da#为什么会导致内存泄漏\",\"3\":\"v-5bc3b2da#如何处理\",\"4\":\"v-5bc3b2da#闭包\",\"5\":\"v-5bc3b2da#闭包的应用\",\"6\":\"v-5bc3b2da\",\"7\":\"v-29367432#盒模型\",\"8\":\"v-29367432#标准盒模型\",\"9\":\"v-29367432#怪异盒模型\",\"10\":\"v-29367432\",\"11\":\"v-aad12c32#选择器\",\"12\":\"v-aad12c32#优先级\",\"13\":\"v-aad12c32#继承属性\",\"14\":\"v-aad12c32\",\"15\":\"v-75c3ec6e#单位\",\"16\":\"v-75c3ec6e\",\"17\":\"v-6e32d892#区别\",\"18\":\"v-6e32d892\",\"19\":\"v-fd14e8e4#什么是bfc\",\"20\":\"v-fd14e8e4#如何创建bfc\",\"21\":\"v-fd14e8e4#bfc的特性\",\"22\":\"v-fd14e8e4#应用场景\",\"23\":\"v-fd14e8e4\",\"24\":\"v-74368525\",\"25\":\"v-6237d1b1#什么是-css-渲染阻塞\",\"26\":\"v-6237d1b1#为什么会有-css-渲染阻塞\",\"27\":\"v-6237d1b1#如何避免-css-渲染阻塞\",\"28\":\"v-6237d1b1#_1-将-css-放在head标签中\",\"29\":\"v-6237d1b1#_2-使用媒体查询\",\"30\":\"v-6237d1b1#媒体查询\",\"31\":\"v-6237d1b1#媒体查询的使用场景\",\"32\":\"v-6237d1b1#_3-使用内联样式\",\"33\":\"v-6237d1b1#_4-使用preload和prefetch\",\"34\":\"v-6237d1b1\",\"35\":\"v-36e7ec57#基础概念\",\"36\":\"v-36e7ec57#属性\",\"37\":\"v-36e7ec57#容器属性\",\"38\":\"v-36e7ec57#项目属性\",\"39\":\"v-36e7ec57#常见布局\",\"40\":\"v-36e7ec57#三栏布局\",\"41\":\"v-36e7ec57\",\"42\":\"v-379d5da0#let-和-const-和-var\",\"43\":\"v-379d5da0#产生时间\",\"44\":\"v-379d5da0#作用域\",\"45\":\"v-379d5da0#作用域补充\",\"46\":\"v-379d5da0#变量提升-临时死亡区\",\"47\":\"v-379d5da0#重复声明\",\"48\":\"v-379d5da0#可变性\",\"49\":\"v-379d5da0#箭头函数\",\"50\":\"v-379d5da0#模板字符串\",\"51\":\"v-379d5da0#解构赋值\",\"52\":\"v-379d5da0#数组的解构赋值\",\"53\":\"v-379d5da0#对象的解构赋值\",\"54\":\"v-379d5da0#函数的解构赋值\",\"55\":\"v-379d5da0#扩展运算符\",\"56\":\"v-379d5da0#类\",\"57\":\"v-379d5da0#定义类\",\"58\":\"v-379d5da0#es5-的类\",\"59\":\"v-379d5da0#es6-的类\",\"60\":\"v-379d5da0#对类添加方法\",\"61\":\"v-379d5da0#类的继承\",\"62\":\"v-379d5da0#module-模块化\",\"63\":\"v-379d5da0#promise\",\"64\":\"v-379d5da0#promise-的基本使用\",\"65\":\"v-379d5da0#promise-的三种状态\",\"66\":\"v-379d5da0#实例方法\",\"67\":\"v-379d5da0#构造函数方法\",\"68\":\"v-379d5da0\",\"69\":\"v-74376a60\",\"70\":\"v-35f016f2#this的指向类型\",\"71\":\"v-35f016f2#call和apply和bind的区别\",\"72\":\"v-35f016f2\",\"73\":\"v-66e2f8be#基本数据类型\",\"74\":\"v-66e2f8be#number\",\"75\":\"v-66e2f8be#string\",\"76\":\"v-66e2f8be#boolean\",\"77\":\"v-66e2f8be#null\",\"78\":\"v-66e2f8be#undefined\",\"79\":\"v-66e2f8be#symbol\",\"80\":\"v-66e2f8be#引用数据类型\",\"81\":\"v-66e2f8be#object\",\"82\":\"v-66e2f8be#array\",\"83\":\"v-66e2f8be#function\",\"84\":\"v-66e2f8be#date\",\"85\":\"v-66e2f8be#regexp\",\"86\":\"v-66e2f8be#存储位置\",\"87\":\"v-66e2f8be\",\"88\":\"v-30525834#操作方法\",\"89\":\"v-30525834#增加元素\",\"90\":\"v-30525834#删除元素\",\"91\":\"v-30525834#修改元素\",\"92\":\"v-30525834#查找元素\",\"93\":\"v-30525834#排序方法\",\"94\":\"v-30525834#迭代方法\",\"95\":\"v-30525834#转化方法\",\"96\":\"v-30525834\",\"97\":\"v-2b9022fc#操作方法\",\"98\":\"v-2b9022fc#增加元素\",\"99\":\"v-2b9022fc#删除元素\",\"100\":\"v-2b9022fc#修改元素\",\"101\":\"v-2b9022fc#查找元素\",\"102\":\"v-2b9022fc#转换方法\",\"103\":\"v-2b9022fc#模板匹配方法\",\"104\":\"v-2b9022fc\",\"105\":\"v-a0326798#显示类型转化\",\"106\":\"v-a0326798#隐式类型转化\",\"107\":\"v-a0326798\",\"108\":\"v-3cb808b6#等于\",\"109\":\"v-3cb808b6#完全等于\",\"110\":\"v-3cb808b6#总结\",\"111\":\"v-3cb808b6\",\"112\":\"v-5f5c21dd#浅拷贝\",\"113\":\"v-5f5c21dd#常见的浅拷贝方法\",\"114\":\"v-5f5c21dd#深拷贝\",\"115\":\"v-5f5c21dd#常见的深拷贝方法\",\"116\":\"v-5f5c21dd#参考文章\",\"117\":\"v-5f5c21dd\",\"118\":\"v-568d3b89\",\"119\":\"v-1ccf7368#作用域链分类\",\"120\":\"v-1ccf7368#作用域链\",\"121\":\"v-1ccf7368#词法作用域\",\"122\":\"v-1ccf7368#作用域链的场景\",\"123\":\"v-1ccf7368#闭包\",\"124\":\"v-1ccf7368#事件委托\",\"125\":\"v-1ccf7368#引申-事件模型\",\"126\":\"v-1ccf7368#事件和事件流\",\"127\":\"v-1ccf7368#事件模型\",\"128\":\"v-1ccf7368#原始事件模型\",\"129\":\"v-1ccf7368#标准事件模型\",\"130\":\"v-1ccf7368\",\"131\":\"v-d4d1ccf8#es5-的继承\",\"132\":\"v-d4d1ccf8#es6-的继承\",\"133\":\"v-d4d1ccf8\",\"134\":\"v-6cfad872\",\"135\":\"v-28cd39da\",\"136\":\"v-bce0ae32#应用层\",\"137\":\"v-bce0ae32#传输层\",\"138\":\"v-bce0ae32#tcp段的由来\",\"139\":\"v-bce0ae32#网络层\",\"140\":\"v-bce0ae32#链路层\",\"141\":\"v-bce0ae32#物理层\",\"142\":\"v-bce0ae32\",\"143\":\"v-54eae7a0#浏览器解析\",\"144\":\"v-54eae7a0#dns解析\",\"145\":\"v-54eae7a0#tcp连接\",\"146\":\"v-54eae7a0#ip协议\",\"147\":\"v-54eae7a0#mac地址\",\"148\":\"v-54eae7a0#网卡\",\"149\":\"v-54eae7a0#交换机\",\"150\":\"v-54eae7a0#路由器\",\"151\":\"v-54eae7a0\",\"152\":\"v-5b4756e9\",\"153\":\"v-3448eb71\",\"154\":\"v-2376843a#什么是泛型\",\"155\":\"v-2376843a#泛型使用方式\",\"156\":\"v-2376843a#泛型函数\",\"157\":\"v-2376843a#泛型接口\",\"158\":\"v-2376843a#泛型类\",\"159\":\"v-2376843a#泛型约束\",\"160\":\"v-2376843a#泛型别名\",\"161\":\"v-2376843a#索引类型\",\"162\":\"v-2376843a\",\"163\":\"v-743faa02\"},\"fieldIds\":{\"id\":0,\"title\":1,\"header\":2,\"text\":3,\"customFields\":4},\"fieldLength\":{\"0\":[2,1,null,null,3],\"1\":[3,1,1,1],\"2\":[3,1,1,11],\"3\":[3,1,1,17],\"4\":[3,1,1,41],\"5\":[3,1,1,88],\"6\":[2,1,null,null,3],\"7\":[3,1,1,22],\"8\":[3,1,1,13],\"9\":[3,1,1,13],\"10\":[2,1,null,null,3],\"11\":[3,1,1,36],\"12\":[3,1,1,41],\"13\":[3,1,1,61],\"14\":[2,1,null,null,3],\"15\":[3,1,1,25],\"16\":[2,1,null,null,3],\"17\":[3,1,1,24],\"18\":[2,1,null,23,3],\"19\":[3,1,1,10],\"20\":[3,1,1,8],\"21\":[3,1,1,4],\"22\":[3,1,1,3],\"23\":[2,1,null,null,3],\"24\":[2,1,null,null,3],\"25\":[5,1,3,9],\"26\":[5,1,3,14],\"27\":[5,1,3,1],\"28\":[6,1,6,4],\"29\":[4,1,2,22],\"30\":[3,1,1,39],\"31\":[3,1,1,12],\"32\":[4,1,2,1],\"33\":[4,1,5,20],\"34\":[2,1,null,null,3],\"35\":[3,1,1,9],\"36\":[3,1,1,1],\"37\":[3,1,1,18],\"38\":[3,1,1,54],\"39\":[3,1,1,1],\"40\":[3,1,1,23],\"41\":[2,1,null,null,3],\"42\":[6,1,4,1],\"43\":[3,1,1,6],\"44\":[3,1,1,1],\"45\":[3,1,1,40],\"46\":[4,1,3,32],\"47\":[3,1,1,18],\"48\":[3,1,1,16],\"49\":[3,1,1,51],\"50\":[3,1,1,25],\"51\":[3,1,1,4],\"52\":[3,1,1,40],\"53\":[3,1,1,26],\"54\":[3,1,1,23],\"55\":[3,1,1,72],\"56\":[3,1,1,1],\"57\":[3,1,1,1],\"58\":[4,1,2,31],\"59\":[4,1,2,42],\"60\":[3,1,1,36],\"61\":[3,1,1,2],\"62\":[4,1,2,1],\"63\":[3,1,1,1],\"64\":[4,1,2,47],\"65\":[4,1,2,7],\"66\":[3,1,1,12],\"67\":[3,1,1,59],\"68\":[2,1,null,null,3],\"69\":[2,1,null,null,3],\"70\":[3,1,2,35],\"71\":[3,1,5,73],\"72\":[2,1,null,6,3],\"73\":[3,1,1,1],\"74\":[3,1,1,25],\"75\":[3,1,1,1],\"76\":[3,1,1,14],\"77\":[3,1,1,2],\"78\":[3,1,1,20],\"79\":[3,1,1,1],\"80\":[3,1,1,1],\"81\":[3,1,1,1],\"82\":[3,1,1,1],\"83\":[3,1,1,1],\"84\":[3,1,1,1],\"85\":[3,1,1,1],\"86\":[3,1,1,8],\"87\":[2,1,null,null,3],\"88\":[3,1,1,3],\"89\":[3,1,1,17],\"90\":[3,1,1,20],\"91\":[3,1,1,4],\"92\":[3,1,1,13],\"93\":[3,1,1,11],\"94\":[3,1,1,30],\"95\":[3,1,1,7],\"96\":[2,1,null,null,3],\"97\":[3,1,1,7],\"98\":[3,1,1,11],\"99\":[3,1,1,9],\"100\":[3,1,1,18],\"101\":[3,1,1,12],\"102\":[3,1,1,6],\"103\":[3,1,1,7],\"104\":[2,1,null,null,3],\"105\":[3,1,1,11],\"106\":[3,1,1,40],\"107\":[2,1,null,null,3],\"108\":[3,1,1,32],\"109\":[3,1,1,19],\"110\":[3,1,1,14],\"111\":[2,1,null,null,3],\"112\":[3,1,1,10],\"113\":[3,1,1,8],\"114\":[3,1,1,51],\"115\":[3,1,1,9],\"116\":[3,1,1,1],\"117\":[2,1,null,null,3],\"118\":[2,1,null,null,3],\"119\":[3,1,1,3],\"120\":[3,1,1,9],\"121\":[3,1,1,44],\"122\":[3,1,1,1],\"123\":[3,1,1,20],\"124\":[3,1,1,60],\"125\":[4,1,2,1],\"126\":[3,1,1,15],\"127\":[3,1,1,3],\"128\":[3,1,1,33],\"129\":[3,1,1,43],\"130\":[2,1,null,null,3],\"131\":[4,1,2,54],\"132\":[4,1,2,53],\"133\":[2,1,null,null,3],\"134\":[2,1,null,null,3],\"135\":[2,1,null,4,3],\"136\":[3,2,1,13],\"137\":[3,2,1,23],\"138\":[3,2,1,6],\"139\":[3,2,1,37],\"140\":[3,2,1,4],\"141\":[3,2,1,6],\"142\":[2,2,null,null,3],\"143\":[3,3,1,23],\"144\":[3,3,1,15],\"145\":[3,3,1,10],\"146\":[3,3,1,6],\"147\":[3,3,1,17],\"148\":[3,3,1,5],\"149\":[3,3,1,7],\"150\":[3,3,1,5],\"151\":[2,3,null,null,3],\"152\":[2,1,null,null,3],\"153\":[2,1,null,null,3],\"154\":[3,1,1,12],\"155\":[3,1,1,4],\"156\":[3,1,1,10],\"157\":[3,1,1,9],\"158\":[3,1,1,9],\"159\":[3,1,1,16],\"160\":[3,1,1,28],\"161\":[3,1,1,18],\"162\":[2,1,null,null,3],\"163\":[2,1,null,null,3]},\"averageFieldLength\":[2.963414634146341,1.1524390243902438,1.245534732719583,18.220254804092512,3],\"storedFields\":{\"0\":{\"title\":\"浏览器篇\",\"customFields\":{\"0\":[\"浏览器篇\"]}},\"1\":{\"title\":\"内存泄漏\",\"header\":\"如何处理内存泄漏问题\",\"text\":[]},\"2\":{\"title\":\"内存泄漏\",\"header\":\"为什么会导致内存泄漏\",\"text\":[\"正常浏览器会存在垃圾回收机制，会将不会被使用的对象进行清除，但是如果存在引用，那么就不会被清除，就会导致内存泄漏。\",\"使用全局变量\",\"闭包\",\"循环引用：对象之前出现相互引用的情况，导致垃圾回收机制无法回收\",\"未清理的定时器或者回调函数\"]},\"3\":{\"title\":\"内存泄漏\",\"header\":\"如何处理\",\"text\":[\"使用 let 和 const 声明变量，避免使用 var\",\"使用闭包时，注意闭包中的变量是否会被使用，如果不会被使用，那么就会导致内存泄漏\",\"使用定时器时，注意清除定时器\",\"WeakMap 之类弱引用的数据结构\",\"引申：闭包\"]},\"4\":{\"title\":\"内存泄漏\",\"header\":\"闭包\",\"text\":[\"闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量。\",\"function fn1() { var a = 2; function fn2() { console.log(a); } return fn2; } var fn3 = fn1(); fn3(); // 2 \",\"从上述代码我们可以知道，fn3 作为 fn1 的返回值，fn3 可以访问到 fn1 中的变量 a，这就是闭包的一个特性：函数可以访问其声明外部的函数的作用域。\",\"闭包的另一个特性是：即使创建它的上下文已经销毁，它仍然存在。因为闭包会携带包含它的函数的作用域，所以会比其他函数占用更多的内存。\",\"function fn1() { var a = 2; function fn2() { console.log(a); } return fn2; } var fn3 = fn1(); fn3(); fn3 = null; \",\"根据上述代码进行分析：\",\"fn3 被赋值为 null，意味着对 fn3 的引用已经被释放,fn3 已经被销毁\",\"fn3 = fn1(),将fn1的返回值给了fn3,此时fn3指向了fn2，虽然fn3被销毁了，但是fn2依然会访问到外部作用域的变量，是一个闭包，无法销毁。fn2 无法被销毁\",\"因此fn1也不会被销毁，他的变量还在内存中被fn2引用着，fn1 无法被销毁\"]},\"5\":{\"title\":\"内存泄漏\",\"header\":\"闭包的应用\",\"text\":[\"闭包可以用来模拟块级作用域\",\"for (var i = 0; i < 5; i++) { (function (j) { setTimeout(function () { console.log(j); // 0,1,2,3,4 }, j * 1000); })(i); } \",\"分析一下上述代码：\",\"(function (j) {...})(i)这段代码其实是一个闭包，i作为参数传递给了闭包，i的值会被保存在闭包中，当setTimeout执行时，会访问到闭包中的i。\",\"因为setTimeout是一个异步函数，所以会在循环结束后才会执行，此时i的值已经变成了5。\",\"但是因为使用了闭包，所以i的值会被保存在闭包中，所以会输出0,1,2,3,4。\",\"不使用闭包情况下：\",\"for (var i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 5,5,5,5,5 }, i * 1000); } \",\"假如使用变量let\",\"for (let i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 0,1,2,3,4 }, i * 1000); } \",\"那么为什么会产生不同呢？\",\"var定义的变量会具有变量提升的特性，所以var定义的变量会被提升到全局作用域中，所以setTimeout中访问到的i是全局作用域中的i，而全局作用域中的i在循环结束后，值为5。\",\"代码会变为：\",\"var i; for (i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 5,5,5,5,5 }, i * 1000); } \",\"let定义的变量不会具有变量提升的特性，所以setTimeout中访问到的i是for循环中的i，在每次循环时，都会重新定义，所以每次循环时，i的值都不一样。\",\"闭包可以用来封装私有变量\",\"function Person(name) { var _age; // 私有变量 function setAge(n) { _age = n; } function getAge() { return _age; } return { name: name, getAge: getAge, setAge: setAge, }; } var p1 = Person(\\\"张三\\\"); p1.setAge(25); console.log(p1.getAge()); \",\"闭包进行延迟执行\",\"闭包可以用来延迟函数的执行，当需要在某个时间点上执行函数，但是又不想立即执行该函数时，可以使用闭包来延迟函数的执行。\",\"function delay(func, delayTime) { return function () { var args = arguments; var _this = this; setTimeout(function () { func.apply(_this, args); // 通过apply将参数传递给func }, delayTime); } } function fn(a, b) { console.log(a + b); } var fn1 = delay(fn, 1000); fn1(1, 2); // 3 \",\"一般会在场景题里面出现\",\"为什么要使用闭包来延迟函数的执行呢？为什么不是直接使用setTimeout来延迟函数的执行呢？\",\"function fn(a, b) { console.log(a + b); } setTimeout(fn, 1000, 1, 2); // 3 \",\"原因：在函数中使用setTimeout，会创建一个新的上下文，并将其放在任务队列里面。等到执行栈中的代码执行完毕后，才会执行任务队列中的代码。这时候就会无法获取到父函数中的变量。\"]},\"6\":{\"title\":\"内存泄漏\",\"customFields\":{\"0\":[\"浏览器\"],\"1\":[\"内存泄漏\"]}},\"7\":{\"title\":\"CSS的盒模型\",\"header\":\"盒模型\",\"text\":[\"盒模型是一个矩形的盒子，它包含了元素的内容、内边距、边框和外边距。\",\"css 中盒模型分为两种：标准盒模型和 IE 盒模型。\",\"标准盒模型：width = content\",\"IE 盒模型：width = content + padding + border\",\"在CSS中通过box-sizing来进行设置\",\" box-sizing: content-box; /* 标准盒模型 */ box-sizing: border-box; /* IE盒模型 */ \"]},\"8\":{\"title\":\"CSS的盒模型\",\"header\":\"标准盒模型\",\"text\":[\"标准盒模型其实就是width就是内容的宽度，不包含padding和border。\",\"width = content\",\"height = content\",\"盒子实际宽高：\",\"盒子的总宽度是width + padding + border+margin。\",\"盒子的总高度是height + padding + border+margin。\"]},\"9\":{\"title\":\"CSS的盒模型\",\"header\":\"怪异盒模型\",\"text\":[\"你设置多大的width和height，盒子就是多大，不管你有没有设置padding和border。\",\"width = content + padding + border\",\"height = content + padding + border\",\"盒子的总宽度是width+margin。 盒子的总高度是height+margin。\",\"盒模型图例\"]},\"10\":{\"title\":\"CSS的盒模型\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"盒模型\"]}},\"11\":{\"title\":\"CSS选择器\",\"header\":\"选择器\",\"text\":[\"css 中选择器主要分为以下几种：\",\"元素选择器 \",\"普通元素选择器，类似div，p\",\"伪元素选择器，类似::before，::after，可以在里面插入内容\",\"类选择器 \",\"类选择器，类似.class\",\"伪类选择器,类似:hover，:active，可以在里面插入样式\",\"id 选择器，类似#id\",\"属性选择器，类似[type=\\\"text\\\"]\",\"通配符选择器，类似*\",\"后代选择器，类似div p\",\"子代选择器，类似div > p\",\"兄弟选择器，类似div + p\",\"群组选择器，类似div, p\",\"注意区分后代选择器和兄弟选择器的区别：\",\"后代选择器：div p,他会选择所有的div下的p元素，包括嵌套的p元素。\",\"兄弟选择器：div + p,他会选择所有的div下的紧邻的p元素，不包括嵌套的p元素。\"]},\"12\":{\"title\":\"CSS选择器\",\"header\":\"优先级\",\"text\":[\"css 中的优先级是根据选择器的权重来决定的，权重越高，优先级越高。 主要原则就是：ABCD法则\",\"A: 代表内联样式，权重为1000\",\"B: 代表 id 选择器，权重为100\",\"C: 代表类选择器，属性选择器，伪类选择器，权重为10\",\"D: 代表元素选择器，伪元素选择器，权重为1\",\"例子：\",\"#nav-global > ul > li > a.nav-link; \",\"使用ABCD法则计算权重：\",\"A(内联样式): 0\",\"B(ID 选择器): 1\",\"C(Class 选择器+属性选择器): 1\",\"D(元素选择器): 3\",\"所以权重为0113\"]},\"13\":{\"title\":\"CSS选择器\",\"header\":\"继承属性\",\"text\":[\"css 中有一些属性是可以继承的\",\"字体类\",\"font-family\",\"font-size\",\"font-weight\",\"font-style\",\"font-variant\",\"font\",\"文本类\",\"color: 文本颜色\",\"text-align: 文本对齐方式\",\"text-indent: 首行缩进\",\"元素可见性\",\"visibility: 元素是否可见\",\"表格类\",\"caption-side: 表格标题的位置\",\"empty-cells: 是否显示表格中的空单元格\",\"table-layout: 表格的布局方式\",\"border-collapse: 表格边框是否合并\",\"列表类\",\"list-style-type: 列表项标记的类型\",\"list-style-position: 列表项标记的位置\",\"list-style-image: 列表项标记的图像\",\"其实只要记录一些比较特殊的不可继承属性就可以了，其他的都是可以继承的。\",\"display\",\"文本类\",\"vertical-align：垂直对齐方式\",\"text-decoration: 文本装饰,添加下划线，删除线等\",\"盒子类\",\"width，height:宽高度\",\"margin，padding: 外边距，内边距\",\"border，border-width，border-style，border-color: 边框\",\"背景类\",\"float和position类\"]},\"14\":{\"title\":\"CSS选择器\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"选择器\",\"容易遗忘\"]}},\"15\":{\"title\":\"CSS中的单位\",\"header\":\"单位\",\"text\":[\"CSS中的常见单位有以下几种：\",\"px:像素点，是一个相对单位，相对于显示器的分辨率，一般情况下，1px = 1/96英寸\",\"%：百分比\",\"vh,vm：视窗高度和视窗宽度\",\"em：根据当前盒子的父元素的font-size来计算\",\"rem：根据根元素html的font-size来计算，一般情况下，1rtem = 16px\",\"%和vh,vm的区别：\",\"%是相对于父元素的宽度来计算的\",\"vh,vm是相对于视窗的高度和宽度来计算的\"]},\"16\":{\"title\":\"CSS中的单位\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"单位\"]}},\"17\":{\"title\":\"CSS实现隐藏元素的方法\",\"header\":\"区别\",\"text\":[\"其实日常开发中，我们一般使用display: none;来隐藏元素，但是这种方法会导致元素不占据空间，所以在一些特殊的场景下，我们需要使用其他的方法来隐藏元素。\",\"方法\",\"元素占据空间\",\"元素可点击\",\"元素可见\",\"visibility: hidden;\",\"是\",\"是\",\"否\",\"opcitiy: 0;\",\"是\",\"是\",\"否\",\"z-index: -1;\",\"是\",\"是\",\"否\",\"position: absolute;\",\"是\",\"是\",\"否\",\"height: 0;\",\"否\",\"否\",\"否\",\"display: none;\",\"否\",\"否\",\"否\"]},\"18\":{\"title\":\"CSS实现隐藏元素的方法\",\"text\":[\"常见的隐藏元素的方法有以下几种：\",\"visibility: hidden;,设置可见性为隐藏，但是元素还是占据空间\",\"opcitiy: 0;，设置透明度为 0，但是元素还是占据空间\",\"z-index: -1;，设置z-index为负数，但是元素还是占据空间\",\"position: absolute;，设置绝对定位，然后将元素移除屏幕，但是元素还是占据空间\",\"height: 0;，设置元素高度为 0，元素不占据空间\",\"display: none;，设置元素不显示，元素不占据空间\"],\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"隐藏元素\"]}},\"19\":{\"title\":\"BFC布局\",\"header\":\"什么是BFC\",\"text\":[\"BFC（Block Formatting Context）即块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。\"]},\"20\":{\"title\":\"BFC布局\",\"header\":\"如何创建BFC\",\"text\":[\"根元素或包含根元素的元素<html>\",\"浮动元素\",\"position: absolute或fixed\",\"display:不为none\",\"overflow:不为visible\"]},\"21\":{\"title\":\"BFC布局\",\"header\":\"BFC的特性\",\"text\":[\"不会存在外边距合并(margin塌陷问题)\",\"float,浮动元素会参与高度计算\"]},\"22\":{\"title\":\"BFC布局\",\"header\":\"应用场景\",\"text\":[\"防止margin塌陷\",\"清除浮动\",\"自适应两栏布局\"]},\"23\":{\"title\":\"BFC布局\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"BFC\"]}},\"24\":{\"title\":\"CSS篇\",\"customFields\":{\"0\":[\"CSS篇\"]}},\"25\":{\"title\":\"css渲染阻塞\",\"header\":\"什么是 css 渲染阻塞\",\"text\":[\"css渲染阻塞是指浏览器在解析html时，如果遇到了css，会暂停html的解析，等css加载完毕后，再继续解析html。所以说，css 渲染阻塞会阻塞DOM树的构建。\"]},\"26\":{\"title\":\"css渲染阻塞\",\"header\":\"为什么会有 css 渲染阻塞\",\"text\":[\"当浏览器开始解析HTML文件时，就会生成DOM树，但是在生成DOM树的时候，如果遇到了css，就会停止DOM树的生成，等css加载完毕后，再继续生成DOM树。\",\"这样是为了确保css能够正确的渲染DOM树，因为css可以修改DOM树的样式，css下载，解析完毕后，再去渲染DOM树，就可以确保css能够正确的渲染DOM树。\"]},\"27\":{\"title\":\"css渲染阻塞\",\"header\":\"如何避免 css 渲染阻塞\",\"text\":[]},\"28\":{\"title\":\"css渲染阻塞\",\"header\":\"1. 将 css 放在 head 标签中\",\"text\":[\"将css放在head标签中，可以确保css在DOM树生成之前就加载完毕，这样就不会阻塞DOM树的生成。\"]},\"29\":{\"title\":\"css渲染阻塞\",\"header\":\"2. 使用媒体查询\",\"text\":[\"我们可以使用媒体查询来指定css的加载时机，这样就可以避免css阻塞DOM树的生成。\",\"<!-- 网页首次加载时，只在打印内容时适用 --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" media=\\\"print\\\" /> <!-- 当符合某种条件的时候才会阻塞渲染 --> <!-- 宽度至少是40em --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" media=\\\"(min-width: 40em)\\\" /> <!-- 一直会阻塞渲染 --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" /> \",\"引申：媒体查询\"]},\"30\":{\"title\":\"css渲染阻塞\",\"header\":\"媒体查询\",\"text\":[\"简单来说，媒体查询就是一种检测浏览器或设备特性的方法，可以根据不同的特性来加载不同的css\",\"媒体查询的语法如下：\",\"@media not|only mediatype and (expressions) { CSS-Code; } \",\"not：表示不匹配媒体类型的情况\",\"only：表示只匹配媒体类型的情况\",\"meidatype：指定媒体类型，如screen、print等\",\"expressions：媒体查询表达式，用来检测媒体类型的特性，如width、height等 \",\"max-width：最大宽度(至多多少)\",\"min-width：最小宽度(至少多少)\",\"语法改进：\",\"@media (min-width: 40em) { /* 宽度至少是40em */ } /* 现在可以改写成 */ @media (width >= 40em) { /* 宽度至少是40em */ } \",\"@media (min-width: 40em) and (max-width: 60em) { /* 宽度至少是40em，至多是60em */ } /* 现在可以改写成 */ @media (width >= 40em) and (width <= 60em) { /* 宽度至少是40em，至多是60em */ } \"]},\"31\":{\"title\":\"css渲染阻塞\",\"header\":\"媒体查询的使用场景\",\"text\":[\"响应式布局\",\"设置打印样式(@media print { ... })\",\"动态样式(根据不同的设备特性，加载不同的样式)\",\"图片优化(根据不同的设备，不同分辨率，加载不同的图片)\"]},\"32\":{\"title\":\"css渲染阻塞\",\"header\":\"3. 使用内联样式\",\"text\":[]},\"33\":{\"title\":\"css渲染阻塞\",\"header\":\"4. 使用 preload 和 prefetch\",\"text\":[\"preload和prefetch是html5中的新特性，可以用来指定资源的加载时机。\",\"preload用来指定当前页面必须要用到的资源，而prefetch用来指定当前页面可能会用到的资源。\",\"<!-- preload --> <link rel=\\\"preload\\\" href=\\\"style.css\\\" as=\\\"style\\\" /> <!-- prefetch --> <link rel=\\\"prefetch\\\" href=\\\"style.css\\\" as=\\\"style\\\" /> \",\"作用就是：预加载，提前加载，提前缓存，一般都是将他直接缓存在浏览器的缓存目录下。\"]},\"34\":{\"title\":\"css渲染阻塞\",\"customFields\":{\"0\":[\"CSS\"],\"1\":[\"CSS\",\"渲染\"]}},\"35\":{\"title\":\"flex布局\",\"header\":\"基础概念\",\"text\":[\"flex 布局是一种一维布局模型，可以实现更加灵活的布局方式，flex 布局的主要思想是让容器有能力让其子元素改变自身的宽度、高度、顺序，以及对齐方式等，以最适合当前的显示环境。\"]},\"36\":{\"title\":\"flex布局\",\"header\":\"属性\",\"text\":[]},\"37\":{\"title\":\"flex布局\",\"header\":\"容器属性\",\"text\":[\"就是对于父元素的属性\",\"flex-direction：决定主轴的方向\",\"flex-wrap: 决定元素是否换行\",\"align-items: 在副轴上如何对齐\",\"justify-content: 在主轴上如何对齐\",\"align-content: 多根轴线的对齐方式\",\"flex-flow: flex-direction和flex-wrap的简写,默认值为row nowrap\"]},\"38\":{\"title\":\"flex布局\",\"header\":\"项目属性\",\"text\":[\"order: 定义项目的排列顺序，数值越小，排列越靠前，默认为 0\",\"align-self: 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性\",\"flex-grow: 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大\",\"flex-shrink: 定义项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小\",\"flex-basis: 定义在分配多余空间之前，项目占据的主轴空间（main size）\",\"flex: flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto，后两个属性可选\",\"这边flex比较复杂，且很重要，所以单独拿出来说一下\",\"flex,一般会简写：\",\"flex: 1：相当于flex: 1 1 0,表明，在空间不足的情况下，不缩小，在空间有剩余的情况下，放大\",\"flex: auto：相当于flex: 1 1 auto,表明，在空间不足的情况下，缩小，在空间有剩余的情况下，放大\",\"flex:none: 相当于flex: 0 0 auto,表明，不放大，不缩小\",\"flex: 2 1 100px: 表明，放大比例为 2，缩小比例为 1，基准值为 100px\",\"场景：\",\"如果希望弹性项目可以占据多余空间，且会根据剩余空间的大小进行放大，可以使用flex: 1\",\"如果希望弹箱项目会根据位置和大小进行缩小，可以使用flex: auto\"]},\"39\":{\"title\":\"flex布局\",\"header\":\"常见布局\",\"text\":[]},\"40\":{\"title\":\"flex布局\",\"header\":\"三栏布局\",\"text\":[\"三栏布局：左右两边固定宽度，中间自适应\",\".content { display: flex; width: 400px; height: 600px; background-color: aquamarine; } .medium { flex: 1; background-color: yellow; } .left { width: 200px; height: 100%; background-color: blue; } .right { width: 200px; height: 100%; background-color: red; } \"]},\"41\":{\"title\":\"flex布局\",\"customFields\":{\"0\":[\"CSS\"],\"1\":[\"flex\",\"布局\",\"基础概念\"]}},\"42\":{\"title\":\"ES6新特新\",\"header\":\"let 和 const 和 var\",\"text\":[]},\"43\":{\"title\":\"ES6新特新\",\"header\":\"产生时间\",\"text\":[\"var是 ES5 的产物，let和const是 ES6 的产物。\"]},\"44\":{\"title\":\"ES6新特新\",\"header\":\"作用域\",\"text\":[]},\"45\":{\"title\":\"ES6新特新\",\"header\":\"作用域补充\",\"text\":[\"什么是作用域？\",\"作用域就是变量和函数的可访问范围，也就是说在什么范围内可以访问到变量和函数。\",\"作用域分类\",\"全局作用域：在代码的任何地方都可以访问到的变量和函数(只要不在函数内部或者在大括号内的都是全局作用域)。\",\"块级作用域：在大括号内可以访问到的变量和函数。\",\"函数作用域：在函数内部可以访问到的变量和函数。\",\"// 全局作用域 var a = 1; let b = 2; const c = 3; // 块级作用域 { var a = 4; let b = 5; const c = 6; console.log(a); // 4 console.log(b); // 5 console.log(c); // 6 } console.log(a); // 4 console.log(b); // 2 console.log(c); // 3 // 函数作用域 function fn() { var a = 7; let b = 8; const c = 9; console.log(a); // 7 console.log(b); // 8 console.log(c); // 9 } fn(); console.log(a); // 4 console.log(b); // 2 console.log(c); // 3 \",\"上述代码表明：\",\"var声明的变量在全局作用域和块级作用域中都可以访问到，并且是可以被改变的，但是在函数作用域中不能访问到。\",\"let和const声明的变量在全局作用域中可以访问到，但是在块级作用域和函数作用域中都不能访问到。(仅在当前这个作用域生效，可被改变)\"]},\"46\":{\"title\":\"ES6新特新\",\"header\":\"变量提升(临时死亡区)\",\"text\":[\"什么是变量提升？\",\"变量提升就是在代码执行之前，会把变量的声明提升到代码的最前面，但是，赋值还是在后面。\",\"什么是临时死亡区？\",\"临时死亡区就是代码块的起始位置到变量声明的位置，这段区域内不能访问到变量。如果访问，那么会报错(ReferenceError)\",\"console.log(a); // undefined var a = 1; console.log(a); // 1 \",\"上面这段代码表明，var声明的变量会被提升到代码的最前面，但是变量的赋值不会被提升。\",\"console.log(b); // 报错 let b = 2; console.log(b); // 2 \",\"上面这段代码表明，let声明的变量不会被提升到代码的最前面，所以在声明之前访问变量会报错。\",\"console.log(c); // 报错 const c = 3; console.log(c); // 3 \",\"上面这段代码表明，const声明的变量不会被提升到代码的最前面，所以在声明之前访问变量会报错。\"]},\"47\":{\"title\":\"ES6新特新\",\"header\":\"重复声明\",\"text\":[\"var声明的变量可以被重复声明，而let和const声明的变量不能被重复声明。\",\"var a = 1; var a = 2; console.log(a); // 2 \",\"上面这段代码表明，var声明的变量可以被重复声明，而且后面的声明会覆盖前面的声明。\",\"let b = 1; let b = 2; console.log(b); // 报错 const c = 1; const c = 2; console.log(c); // 报错 \",\"上面这段代码表明，let和const声明的变量不能被重复声明。\"]},\"48\":{\"title\":\"ES6新特新\",\"header\":\"可变性\",\"text\":[\"var和let声明的变量是可变的，而const声明的变量是不可变的。\",\"var a = 1; a = 2; console.log(a); // 2 let b = 1; b = 2; console.log(b); // 2 \",\"上面的代码表明，var和let声明的变量是可变的。\",\"const c = 1; c = 2; console.log(c); // 报错 \"]},\"49\":{\"title\":\"ES6新特新\",\"header\":\"箭头函数\",\"text\":[\"形式：() => {}\",\"特点：\",\"箭头函数没有this，this指向的是函数定义时所在的对象，而不是使用时所在的对象；但是普通函数有this,指向的是函数使用时所在的对象。\",\"const obj = { name: \\\"Summer\\\", fn: function () { console.log(this); // obj setTimeout(function () { console.log(this); // window，setTimeout是window的方法 }, 1000); }, fn2: function () { console.log(this); // obj setTimeout(() => { console.log(this); // obj，因为箭头函数没有this，所以this指向的是函数定义时所在的对象 }, 1000); }, }; obj.fn(); // obj，window obj.fn2(); // obj，obj \",\"再举一个例子\",\"function Timer() { console.log(this); // window, Timer是window的方法，是window调用的 this.name = \\\"Summer\\\"; setTimeout(function () { console.log(this.name); // undefined，因为普通函数有this，所以this指向的是使用时所在的对象，而使用时是window调用的，所以this指向的是window }, 1000); setTimeout(() => { console.log(this.name); // Summer，因为箭头函数没有this，所以this指向的是函数定义时所在的对象 }, 1000); } let timer = new Timer(); \",\"引申：this的指向问题\",\"具体参考，this 指向问题\",\"箭头函数没有arguments\",\"arguments是一个类数组对象，包含了函数的所有参数。简单理解为参数列表\",\"function fn() { console.log(arguments); } fn(1, 2, 3); // [1, 2, 3] \",\"const fn = () => { console.log(arguments); }; fn(1, 2, 3); // 报错 \"]},\"50\":{\"title\":\"ES6新特新\",\"header\":\"模板字符串\",\"text\":[\"模板字符串是增强版的字符串，用反引号(`)标识，它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\",\"const name = \\\"Summer\\\"; const age = 18; const str = `My name is ${name}, I'm ${age} years old.`; console.log(str); // My name is Summer, I'm 18 years old. \"]},\"51\":{\"title\":\"ES6新特新\",\"header\":\"解构赋值\",\"text\":[\"解构赋值是对赋值运算符的扩展，它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。\"]},\"52\":{\"title\":\"ES6新特新\",\"header\":\"数组的解构赋值\",\"text\":[\"类型：\",\"一一对应\",\"可以跳过某些元素\",\"使用省略号（剩余运算符），返回的是一个数组\",\"设置默认值\",\"解构不成功，变量的值就等于 undefined\",\"const arr = [1, 2, 3]; const [a, b, c] = arr; console.log(a, b, c); // 1, 2, 3 const [, , e] = arr; // 可以跳过某些元素 console.log(e); // 3 const [f, ...g] = arr; // 可以使用剩余运算符，但是需要注意的是，剩余运算符只能放在最后一位 console.log(f, g); // 1, [2, 3] const [h, i, j, k] = arr; // 如果解构不成功，变量的值就等于undefined const [l, m, n, o = 4] = arr; // 可以给变量设置默认值 \"]},\"53\":{\"title\":\"ES6新特新\",\"header\":\"对象的解构赋值\",\"text\":[\"类型：\",\"一一对应\",\"设置别名\",\"设置默认值\",\"使用省略号（剩余运算符），返回的是一个对象\",\"const obj = { name: \\\"Summer\\\", age: 18, }; const { name, age } = obj; console.log(name, age); // Summer, 18 const { name: myName, age: myAge } = obj; // 可以给变量设置别名 console.log(myName, myAge); // Summer, 18 const { name, age = 10 } = obj; // 可以给变量设置默认值 const { name, ...rest } = obj; // 可以使用剩余运算符，但是需要注意的是，剩余运算符只能放在最后一位 console.log(name, rest); // Summer, {age: 18} \"]},\"54\":{\"title\":\"ES6新特新\",\"header\":\"函数的解构赋值\",\"text\":[\"函数的解构赋值其实是针对于函数的参数而言的\",\"function fn([a, b, c]) { console.log(a, b, c); } fn([1, 2, 3]); // 1, 2, 3 function fn2({ name, age }) { console.log(name, age); } fn2({ name: \\\"Summer\\\", age: 18 }); // Summer, 18 function fn3({ name, age = 18 }) { // 设置默认值 console.log(name, age); } fn3({ name: \\\"Summer\\\" }); // Summer, 18 function fn4({ name, ...rest }) { // 使用剩余运算符 console.log(name, rest); } fn4({ name: \\\"Summer\\\", age: 18 }); // Summer, {age: 18} \"]},\"55\":{\"title\":\"ES6新特新\",\"header\":\"扩展运算符\",\"text\":[\"扩展运算符是三个点（...），它好比是 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。\",\"console.log(...[1, 2, 3]); // 1, 2, 3 \",\"应用场景：\",\"数组合并\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; const arr3 = [...arr1, ...arr2]; console.log(arr3); // [1, 2, 3, 4, 5, 6] \",\"与解构赋值结合，获取数组的部分元素\",\"const arr = [1, 2, 3, 4, 5]; const [a, ...b] = arr; console.log(a, b); // 1, [2, 3, 4, 5] \",\"字符串转数组\",\"const str = \\\"Summer\\\"; const arr = [...str]; console.log(arr); // [\\\"S\\\", \\\"u\\\", \\\"m\\\", \\\"m\\\", \\\"e\\\", \\\"r\\\"] \",\"将伪数组转为真正的数组\",\"const divs = document.querySelectorAll(\\\"div\\\"); const arr = [...divs]; \",\"进行深拷贝\",\"const obj = { name: \\\"Summer\\\", age: 18 }; const obj2 = { ...obj }; \",\"在 react 中，可以使用扩展运算符来传递 props\",\"const obj = { name: \\\"Summer\\\", age: 18 }; const App = () => { return <Child {...obj} />; }; \",\"关于扩展运算符和解构赋值，都需要对象具有可迭代性（iterable）\",\"引申：在 JS 中哪些数据结构具有可迭代性？\",\"数组\",\"字符串\",\"Map(ES6 新增)\",\"Set(ES6 新增)\",\"arguments（参数列表）\",\"具有可迭代性的对象，可以使用解构赋值，扩展运算符以及for...of循环\"]},\"56\":{\"title\":\"ES6新特新\",\"header\":\"类\",\"text\":[]},\"57\":{\"title\":\"ES6新特新\",\"header\":\"定义类\",\"text\":[]},\"58\":{\"title\":\"ES6新特新\",\"header\":\"ES5 的类\",\"text\":[\"javascript中没有类的概念，它是基于原型的继承，但是我们可以使用构造函数来模拟类的概念\",\"// 定义构造函数 function Person(name, age) { this.name = name; this.age = age; } // 定义方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. \"]},\"59\":{\"title\":\"ES6新特新\",\"header\":\"ES6 的类\",\"text\":[\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. \",\"结合上面两个代码，我们可以看出:\",\"ES6 的类，本质上还是 ES5 的构造函数,可以认为，class就是构造函数的语法糖\",\"constructor 方法，就是构造函数,用来接收参数。如果不写，默认会有一个空的constructor方法\",\"ES6中定义的方法，是类的方法，不要加上关键词function\"]},\"60\":{\"title\":\"ES6新特新\",\"header\":\"对类添加方法\",\"text\":[\"在原型链上添加方法\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 添加方法 Person.prototype.eat = function () { console.log(\\\"I'm eating.\\\"); }; // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. p1.eat(); // I'm eating. \",\"使用 Object.assign()方法\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 添加方法 Object.assign(Person.prototype, { eat() { console.log(\\\"I'm eating.\\\"); }, }); // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. p1.eat(); // I'm eating. \"]},\"61\":{\"title\":\"ES6新特新\",\"header\":\"类的继承\",\"text\":[\"具体参考：继承\"]},\"62\":{\"title\":\"ES6新特新\",\"header\":\"module 模块化\",\"text\":[\"主要就是export和import两个关键字\"]},\"63\":{\"title\":\"ES6新特新\",\"header\":\"Promise\",\"text\":[]},\"64\":{\"title\":\"ES6新特新\",\"header\":\"Promise 的基本使用\",\"text\":[\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 then 方法 p1.then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"从上面的代码可以看出：\",\"Promise对象是一个构造函数，通过new关键字创建一个Promise对象\",\"在还未执行到resolve或reject时，Promise对象的状态为pending，执行到resolve时，状态变为resolved，执行到reject时，状态变为rejected\",\"然后就会去调用then方法，then方法接收两个参数，第一个参数是resolve的回调函数，第二个参数是reject的回调函数\"]},\"65\":{\"title\":\"ES6新特新\",\"header\":\"Promise 的三种状态\",\"text\":[\"pending：等待状态，既不是成功也不是失败\",\"resolved：成功状态\",\"rejected: 失败状态\"]},\"66\":{\"title\":\"ES6新特新\",\"header\":\"实例方法\",\"text\":[\"then()：接收两个参数，第一个参数是resolve的回调函数，第二个参数是reject的回调函数\",\"catch()：接收一个参数，是reject的回调函数,兜底的作用\",\"finally()：接收一个参数，是resolve或reject的回调函数，不管Promise对象的状态是resolved还是rejected，都会执行\"]},\"67\":{\"title\":\"ES6新特新\",\"header\":\"构造函数方法\",\"text\":[\"all(): 接收一个数组，数组中的每一项都是一个Promise对象，当数组中的每一个Promise对象都变为resolved状态时，all()方法返回的Promise对象才会变为resolved状态，如果数组中的某一个Promise对象变为rejected状态，all()方法返回的Promise对象就会变为rejected状态\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); const p2 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); const p3 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.7) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 all 方法 Promise.all([p1, p2, p3]).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"race(): 接收一个数组，数组中的每一项都是一个Promise对象，只要数组的某一个Promise对象变为resolved状态，race()方法返回的Promise对象就会变为resolved状态，如果数组中的某一个Promise对象变为rejected状态，race()方法返回的Promise对象就会变为rejected状态\",\"简单来说，就是，谁先来的就跟着谁变化\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); const p2 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); const p3 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.7) { resolve(num); } else { reject(num); } }, 1000); }); // 调用race Promise.race([p1, p2, p3]).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"resolve(): 接收一个参数，可以是一个值，也可以是一个Promise对象，如果是一个值，返回的Promise对象就会变为resolved状态，如果是一个Promise对象，返回的Promise对象的状态就会跟随参数的Promise对象的状态\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 resolve 方法 Promise.resolve(p1).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"reject(): 接收一个参数，返回的Promise对象就会变为rejected状态\"]},\"68\":{\"title\":\"ES6新特新\",\"customFields\":{\"0\":[\"ES6篇\"],\"1\":[\"ES6\",\"新特性\"]}},\"69\":{\"title\":\"ES6篇\",\"customFields\":{\"0\":[\"ES6篇\"]}},\"70\":{\"title\":\"this指向问题\",\"header\":\"this 的指向类型\",\"text\":[\"默认绑定\",\"function fn() { console.log(this); // window } fn(); // 这个其实就是相当于window.fn() \",\"上面的代码表明，this指向的是 window。\",\"隐式绑定\",\"const obj = { name: \\\"Summer\\\", fn: function () { console.log(this); // obj }, }; obj.fn(); // \",\"上面的代码表明，this指向的是 obj。\",\"显示绑定\",\"采用一些方法，来直接改变 this 的指向\",\"const obj = { name: \\\"Summer\\\", }; function fn() { console.log(this); // obj } fn(); // window fn.call(obj); // obj \",\"我们也可以看一个稍微复杂一点的例子\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; sayName.call(obj1); // Summer sayName.call(obj2); // Winter sayName.bind(obj1)(); // Summer sayName.bind(obj2)(); // Winter sayName.bind(obj1).call(obj2); // Summer, bind改变了this的指向，所以this指向的是obj1，而call又改变了this的指向，所以this指向的是obj2 sayName.apply(obj1); // Summer \",\"这边我们引申出一个问题，call和apply和bind的区别?\"]},\"71\":{\"title\":\"this指向问题\",\"header\":\"call 和 apply 和 bind 的区别\",\"text\":[\"call和apply都是改变this的指向，而bind是返回一个新的函数，新的函数的this指向的是bind的第一个参数，而且bind的第一个参数是不能被改变的。\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; const fn1 = sayName.bind(obj1); const fn2 = sayName.bind(obj2); fn1(); // Summer fn2(); // Winter fn1.call(obj2); // Summer fn2.call(obj1); // Winter \",\"call和apply的区别在于，call的参数是一个一个传递的，而apply的参数是一个数组。\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; sayName.call(obj1); // Summer sayName.apply(obj2); // Winter sayName.call(obj1, 1, 2, 3); // Summer sayName.apply(obj2, [1, 2, 3]); // Winter \",\"apply的使用场景\",\"求数组的最大值和最小值\",\"// 不使用apply时，我们会使用遍历或者sort方法 const arr = [1, 2, 3, 4, 5]; console.log(arr.sort((a, b) => b - a)); // 5 \",\"但是这种方法并不是很便捷，所以会使用Math.max()和Math.min()方法。 但是Math.max()和Math.min()方法，他们的参数，是一个一个的传递的。\",\"console.log(Math.max(1, 2, 3, 4, 5)); // 5 console.log(Math.min(1, 2, 3, 4, 5)); // 1 \",\"所以我们就需要使用apply方法。\",\"const arr = [1, 2, 3, 4, 5]; console.log(Math.max.apply(null, arr)); // 5 console.log(Math.min.apply(null, arr)); // 1 \",\"实现数组的拼接\",\"这个不使用apply其实也可以做到，可以使用...运算符。\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; console.log([...arr1, ...arr2]); // [1, 2, 3, 4, 5, 6] \",\"但是使用apply,不需要额外的变量，也不需要额外的运算符。\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; console.log(arr1.push.apply(arr1, arr2)); // [1, 2, 3, 4, 5, 6] \",\"我的理解是，虽然apply接受的参数是一个数组，但是它会把数组中的每一个元素，都当做一个参数，传递出去。\",\"new绑定 当使用new操作符构造函数时，this 的值会绑定到新创建的对象上\",\"function Person(name) { this.name = name; } const person = new Person(\\\"Summer\\\"); console.log(person.name); // Summer \"]},\"72\":{\"title\":\"this指向问题\",\"text\":[\"总的来说，this会指向调用它的对象，但是有一些特殊情况(call,bind)。\"],\"customFields\":{\"0\":[\"ES6篇\",\"this\"],\"1\":[\"ES6\",\"this\"]}},\"73\":{\"title\":\"Javascript数据类型\",\"header\":\"基本数据类型\",\"text\":[]},\"74\":{\"title\":\"Javascript数据类型\",\"header\":\"Number\",\"text\":[\"转化为数字的方法parseInt()和Number() 有什么区别？\",\"Number()只可以转化纯数字字符串或者空字符串，长度为 1/0 的数组，布尔值，null\",\"ParseInt()只能将字符串转化为数字，遇到不可以转化的就截断，返回已经转化的数字，如果第一个字符就不可以转化，返回NaN\",\"value\",\"Number()\",\"parseInt()\",\"'123'\",\"123\",\"123\",\"'123a'\",\"NaN\",\"123\",\"'a123'\",\"NaN\",\"NaN\",\"true/false\",\"1/0\",\"NaN\",\"null\",\"0\",\"NaN\",\"[] / [1]\",\"0/1\",\"NaN\",\"\\\"\\\"\",\"0\",\"NaN\"]},\"75\":{\"title\":\"Javascript数据类型\",\"header\":\"String\",\"text\":[]},\"76\":{\"title\":\"Javascript数据类型\",\"header\":\"Boolean\",\"text\":[\"转化为布尔值的方法：Boolean()和!!\",\"Boolean()\",\"!!:双重非运算符\",\"布尔值转化为false的情况：\",\"0(数字 0)\",\"null\",\"undefined\",\"NaN\",\"''(空字符串)其他情况都是转化为true，比如[],{}等\"]},\"77\":{\"title\":\"Javascript数据类型\",\"header\":\"Null\",\"text\":[\"typeof null会返回object\"]},\"78\":{\"title\":\"Javascript数据类型\",\"header\":\"Undefined\",\"text\":[\"undefined是一个全局变量，它的值就是undefined，一般typeof undefined会返回undefined,它其实就是变量声明，但是没有赋值的情况下的默认值\",\"undefined和null的区别：\",\"undefined是一个变量，而null是一个关键字\",\"undefined是变量声明，但是没有赋值的情况下的默认值，而null是一个空对象指针(Object)\",\"undefined的类型是undefined，而null的类型是object\",\"undefined转化为数字是NaN，而null转化为数字是0\",\"null == undefined // true\"]},\"79\":{\"title\":\"Javascript数据类型\",\"header\":\"Symbol\",\"text\":[]},\"80\":{\"title\":\"Javascript数据类型\",\"header\":\"引用数据类型\",\"text\":[]},\"81\":{\"title\":\"Javascript数据类型\",\"header\":\"Object\",\"text\":[]},\"82\":{\"title\":\"Javascript数据类型\",\"header\":\"Array\",\"text\":[]},\"83\":{\"title\":\"Javascript数据类型\",\"header\":\"Function\",\"text\":[]},\"84\":{\"title\":\"Javascript数据类型\",\"header\":\"Date\",\"text\":[]},\"85\":{\"title\":\"Javascript数据类型\",\"header\":\"RegExp\",\"text\":[]},\"86\":{\"title\":\"Javascript数据类型\",\"header\":\"存储位置\",\"text\":[\"基本数据类型的值是存储在栈内存中的，每个变量都有自己的内存空间，互不影响\",\"引用数据类型的值是存储在堆内存中的，每个变量存储的是一个指针，指向存储在堆内存中的对象，这个对象包含了实际的值\",\"数据类型的存储位置\"]},\"87\":{\"title\":\"Javascript数据类型\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"88\":{\"title\":\"数组常用方法\",\"header\":\"操作方法\",\"text\":[\"操作方法我们可以从CRUD(增删改查)四个方面来进行分类\"]},\"89\":{\"title\":\"数组常用方法\",\"header\":\"增加元素\",\"text\":[\"不会改变数组本身 \",\"concat():连接两个或多个数组，返回新数组\",\"会改变数组本身 \",\"push():在数组末尾添加元素，返回数组长度\",\"shift():在数组开头添加元素，返回数组长度\",\"splice(start,deleteCount,item1,item2...):在数组中间添加元素，返回删除的元素组成的数组\"]},\"90\":{\"title\":\"数组常用方法\",\"header\":\"删除元素\",\"text\":[\"不会改变数组本身 \",\"slice(start,end):返回一个新数组，包含从start到end(不包括end)的元素\",\"会改变数组本身 \",\"pop():删除数组末尾的元素，返回删除的元素\",\"unshift():删除数组开头的元素，返回删除的元素\",\"splice(start,deleteCount,item1,item2...):从start位置开始删除deleteCount个，返回删除的元素组成的数组\"]},\"91\":{\"title\":\"数组常用方法\",\"header\":\"修改元素\",\"text\":[\"修改数组，一般使用slice()和splice()方法\"]},\"92\":{\"title\":\"数组常用方法\",\"header\":\"查找元素\",\"text\":[\"ES6之前 \",\"indexOf()/lastIndexOf():返回元素在数组中的位置，如果不存在，返回-1\",\"ES6之后 \",\"find():返回第一个符合条件的元素\",\"includes():返回布尔值，表示是否找到了元素\"]},\"93\":{\"title\":\"数组常用方法\",\"header\":\"排序方法\",\"text\":[\"sort()，可以传入一个比较函数，比较函数返回值为-1，0，1，分别表示小于，等于，大于，会改变数组本身\",\"reverse(),将数组进行反转，会改变数组本身\"]},\"94\":{\"title\":\"数组常用方法\",\"header\":\"迭代方法\",\"text\":[\"所有的迭代方法都不会改变数组本身\",\"forEach((item,index,array)=>{}):遍历数组，对每个元素进行操作，没有返回值\",\"map((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个新数组\",\"filter((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个新数组，新数组中的元素是通过测试的元素\",\"some((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个布尔值，只要有一个元素通过测试，就返回true\",\"every((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个布尔值，只有所有元素都通过测试，才返回true\",\"reduce((prev,cur,index,array)=>{},initValue):遍历数组，对每个元素进行操作，返回一个值，该值会作为下一次迭代的prev，initValue为初始值，如果没有初始值，那么第一次迭代的prev为数组的第一个元素，cur为数组的第二个元素\"]},\"95\":{\"title\":\"数组常用方法\",\"header\":\"转化方法\",\"text\":[\"数组转化为字符串\",\"toString():将数组转化为字符串，每个元素用,隔开\",\"join():将数组转化为字符串，每个元素用指定的字符串隔开\"]},\"96\":{\"title\":\"数组常用方法\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"97\":{\"title\":\"字符串常用方法\",\"header\":\"操作方法\",\"text\":[\"操作方法我们也是从CRUD(增删改查)的角度来看待的 其实可以将字符串看作是一种string[],只是这种数组，不可以修改，只读\"]},\"98\":{\"title\":\"字符串常用方法\",\"header\":\"增加元素\",\"text\":[\"concat():连接字符串\",\"模板字符串:ES6新增的字符串拼接方法，使用反引号(``)来标识，变量使用${}来标识\",\"+(加号)：字符串拼接\"]},\"99\":{\"title\":\"字符串常用方法\",\"header\":\"删除元素\",\"text\":[\"slice(start,end):截取字符串,[start,end)\",\"substr(start,length):截取字符串,[start,start+length)\",\"substring(start,end):截取字符串,[start,end)\",\"返回的都是一个新的string\"]},\"100\":{\"title\":\"字符串常用方法\",\"header\":\"修改元素\",\"text\":[\"trim()/trimLeft()/trimRight():去除字符串两端的空格\",\"repeat(count):重复字符串，返回一个新的字符串\",\"toLowerCase()/toUpperCase():将字符串转化为小写/大写\",\"padStart(targetLength,padString)/padEnd(targetLength,padString):用padString填充字符串，使其长度为targetLength\"]},\"101\":{\"title\":\"字符串常用方法\",\"header\":\"查找元素\",\"text\":[\"indexOf():查找字符串中是否包含searchValue,如果包含，返回第一次出现的位置，否则返回-1\",\"includes():查找字符串中是否包含searchValue,如果包含，返回true，否则返回false\",\"charAt(index):返回指定位置的字符\"]},\"102\":{\"title\":\"字符串常用方法\",\"header\":\"转换方法\",\"text\":[\"将字符串转化为数组的方法：\",\"split(separator,limit):将字符串按照separator分割成数组，limit表示最大分割次数\"]},\"103\":{\"title\":\"字符串常用方法\",\"header\":\"模板匹配方法\",\"text\":[\"其实就是进行正则匹配的方法\",\"match():返回匹配到的字符串数组\",\"search():返回匹配到的第一个字符串的位置\",\"replace():返回替换后的字符串\"]},\"104\":{\"title\":\"字符串常用方法\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"105\":{\"title\":\"类型转化机制\",\"header\":\"显示类型转化\",\"text\":[\"转化为Number的方法: parseInt()和Number()\",\"转化为String的方法: toString()和String()\",\"转化为Boolean的方法: Boolean()和!!\",\"具体可以参考JavaScript 数据类型\"]},\"106\":{\"title\":\"类型转化机制\",\"header\":\"隐式类型转化\",\"text\":[\"隐式类型转化发生的场景：\",\"比较运算符(==,!=,===,!==,>,<,>=,<=),if,while 这种需要转化为boolean的场景，会将其他类型转化为boolean，然后再进行比较\",\"算术运算符(+,-,*,/,%)\",\"自动转化为字符串一般遇到+,并且有字符串，那么就会转化为字符串\",\"\\\"5\\\" + 1; // '51' \\\"5\\\" + true; // \\\"5true\\\" \\\"5\\\" + false; // \\\"5false\\\" \\\"5\\\" + {}; // \\\"5[object Object]\\\" \\\"5\\\" + []; // \\\"5\\\" \\\"5\\\" + function () {}; // \\\"5function (){}\\\" \\\"5\\\" + undefined; // \\\"5undefined\\\" \\\"5\\\" + null; // \\\"5null\\\" \",\"自动转化为数字除了+会转化为字符串，其他都是转为数字\\n转化应该调用的是Number()方法，将undefined转化为NaN，将null转化为0\"]},\"107\":{\"title\":\"类型转化机制\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"108\":{\"title\":\"等于vs完全等于\",\"header\":\"等于\",\"text\":[\"等于==属于比较运算符，会进行隐式类型转换，转换规则如下： 笼统的说，就是如果两个值类型不同，那么就会进行类型转换，转换成相同的类型，再进行比较。\",\"如果一方是布尔值或者是字符串，那么会将布尔值/字符串转换为数字，再进行比较\",\"null == undefined //true\",\"NaN和任何值都不相等，包括自己：NaN == NaN //false\",\"如果一方是Object(对象)，一方是String、Number或者Symbol，那么会将对象转换为原始类型的值(obj.valueOf())，再进行比较\",\"如果两方都是Object(对象)，那么比较的是两个对象的引用是否相等 意思就是：比较这两个对象是不是同一个对象(栈内存里面的地址必须相同)\"]},\"109\":{\"title\":\"等于vs完全等于\",\"header\":\"完全等于\",\"text\":[\"完全等于===属于比较运算符，不会进行隐式类型转换，如果类型不同，直接返回false，如果类型相同，再进行值的比较。\",\"下面给出一些例子：\",\"compare\",\"==\",\"===\",\"\\\"55\\\"和 55\",\"true\",\"false\",\"null 和 undefined\",\"true\",\"false\",\"NaN 和 NaN\",\"false\",\"false\",\"null 和 null\",\"true\",\"true\",\"undefined 和 undefined\",\"true\",\"true\",\"{a:1}和{a:1}\",\"false\",\"false\"]},\"110\":{\"title\":\"等于vs完全等于\",\"header\":\"总结\",\"text\":[\"==会进行隐式类型转换，转换成相同的类型，再进行比较\",\"===不会进行隐式类型转换，如果类型不同，直接返回false，如果类型相同，再进行值的比较\",\"null == undefined //true\",\"null === undefined //false\"]},\"111\":{\"title\":\"等于vs完全等于\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"112\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"浅拷贝\",\"text\":[\"浅拷贝只是复制了一层对象的属性，如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。笼统来说，就是它只管一层\",\"代码实现\"]},\"113\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"常见的浅拷贝方法\",\"text\":[\"Object.assign()\",\"Array.prototype.concat()\",\"拓展运算符([...obj])\"]},\"114\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"深拷贝\",\"text\":[\"深拷贝就是能够实现真正意义上的对象拷贝。深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。\",\"代码实现\",\"但是这个深拷贝没有考虑到数组的情况,只考虑了普通Object情况，所以还需要对数组进行判断\",\"但是这个深拷贝还有一个问题，就是循环引用的问题，比如：\",\"let obj = { a: 1, b: { c: 2, }, }; obj.b.d = obj.b; \",\"这样的话，就会造成死循环，所以我们需要一个容器来存储已经拷贝过的对象，如果已经拷贝过了，就直接返回，不需要再次拷贝。\",\"接着我们可以参考，js 的垃圾回收机制，把map换为WeakMap，这样的话，当obj被回收的时候，WeakMap也会被回收，这样就不会造成内存泄漏了。\",\"补充WeakMap\",\"WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名\",\"WeakMap属于弱引用，当WeakMap的键名所指向的对象被回收，那么WeakMap的键名和键值也会被回收\",\"但是即使这样，这个深拷贝还是有问题的，就是对于Date、RegExp、Error、Function等特殊对象，还是没有考虑到，所以我们需要对这些特殊对象进行判断,这边就不写了，有兴趣的可以自己写一下。\"]},\"115\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"常见的深拷贝方法\",\"text\":[\"JSON.parse(JSON.stringify(obj)):将对象转换为字符串，再将字符串转换为对象\",\"lodash.cloneDeep(obj)\"]},\"116\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"参考文章\",\"text\":[\"如何写出一个惊艳面试官的深拷贝\"]},\"117\":{\"title\":\"深拷贝vs浅拷贝\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"手写题\"]}},\"118\":{\"title\":\"JavaScript篇\",\"customFields\":{\"0\":[\"JavaScript篇\"]}},\"119\":{\"title\":\"作用域链\",\"header\":\"作用域链分类\",\"text\":[\"块级作用域\",\"函数作用域\",\"全局作用域\"]},\"120\":{\"title\":\"作用域链\",\"header\":\"作用域链\",\"text\":[\"当访问一个变量时，会先从当前作用域查找，如果没有找到，就会从父级作用域查找，直到找到该变量或者到全局作用域，如果全局作用域也没有找到，就会报错(TypeError)。\"]},\"121\":{\"title\":\"作用域链\",\"header\":\"词法作用域\",\"text\":[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，因为它的作用域在函数定义的时候就决定了。并不是在调用的地方，只有箭头函数，确认 this 才是，在那里调用，this 指向谁\",\"var value = 1; function foo() { console.log(value); } function bar() { var value = 2; foo(); // 调用的地方，不是作用域的地方 } bar(); // 1 \",\"分析词法作用域：\",\"函数foo的作用域是全局作用域，所以foo的作用域链是foo -> 全局作用域\",\"函数bar的作用域是全局作用域，所以bar的作用域链是bar -> 全局作用域\",\"Q：为什么结果输出为 1？\",\"A：因为foo的作用域链是foo -> 全局作用域，所以在foo中查找value时，会先从foo的作用域中查找，如果没有找到，就会从父级作用域中查找，直到找到该变量或者到全局作用域，如果全局作用域也没有找到，就会报错(TypeError)。\",\"可以这么说，闭包就是在作用域链中查找变量的一种机制。\"]},\"122\":{\"title\":\"作用域链\",\"header\":\"作用域链的场景\",\"text\":[]},\"123\":{\"title\":\"作用域链\",\"header\":\"闭包\",\"text\":[\"function foo() { var value = 1; let fn1 = function () { console.log(value); }; return fn1; } foo()(); // 1 \",\"我们可以分析出：\",\"函数foo的作用域是全局作用域，所以foo的作用域链是foo -> 全局作用域\",\"函数fn1的作用域是foo的作用域，所以fn1的作用域链是fn1 -> foo -> 全局作用域\",\"这也就是我们说的，闭包中内部函数可以访问外部变量的原因\"]},\"124\":{\"title\":\"作用域链\",\"header\":\"事件委托\",\"text\":[\"补充：\",\"什么是事件委托？\",\"事件委托就是利用事件冒泡(由内到外)，只指定一个事件处理程序，就可以管理某一类型的所有事件。\",\"事件委托适用于那些场景？\",\"一个大量数据的列表，需要对列表的每一项都能进行一些相同的事件。假如我们为每一个列表项都增加点击事件，那么工作量很大。这样我们就可以直接在ul上增加点击事件，等待事件冒泡，执行操作。\",\"还有一种常见场景，列表不是很大，但是需要动态的增加item,并且增加的item还会绑定事件,这时候哦我们可以使用事件委托。\",\"一般情况下，适合事件委托的事件有：\",\"click，点击事件这类\",\"mousedown,对于鼠标操作这类\",\"keydown，keypress,keyup,对于键盘操作这类\",\"举例：\",\"<ul id=\\\"ul\\\"> <li>1</li> <li>2</li> <li>3</li> </ul> \",\"let ul = document.getElementById(\\\"ul\\\"); ul.addEventListener(\\\"click\\\", function (e) { console.log(e.target.innerHTML); }); \",\"当用户点击ul的子元素时，事件处理程序就会创建一个执行上下文，并将这个上下文添加到执行环境中。在这个执行环境中，可以通过作用域链来访问属性和方法和e事件对象。\",\"既然提到事件委托，那么我们就来谈谈 Javascript 的事件模型\"]},\"125\":{\"title\":\"作用域链\",\"header\":\"引申：事件模型\",\"text\":[]},\"126\":{\"title\":\"作用域链\",\"header\":\"事件和事件流\",\"text\":[\"产生原因： 因为DOM是一个树形结构，所以当父子元素都绑定了事件的时候，就会出现，事件的执行的先后顺序问题。\",\"事件流阶段：\",\"捕获阶段(从根元素开始往下寻找，一直找到目标元素，然后执行)\",\"目标阶段\",\"冒泡阶段(从当前元素开始往外查找，一直找到根元素为止)\"]},\"127\":{\"title\":\"作用域链\",\"header\":\"事件模型\",\"text\":[\"事件模型分为两种：\",\"原始事件模型\",\"标准事件模型\"]},\"128\":{\"title\":\"作用域链\",\"header\":\"原始事件模型\",\"text\":[\"原始事件模型就是指在IE8及其以下版本中使用的事件模型，这种事件模型只支持冒泡阶段，不支持捕获阶段。使用的是onCLick这种方式绑定事件。\",\"<div id=\\\"div1\\\"> <div id=\\\"div2\\\"> <div id=\\\"div3\\\"></div> </div> <div id=\\\"div4\\\"></div> </div> \",\"let div1 = document.getElementById(\\\"div1\\\"); let div2 = document.getElementById(\\\"div2\\\"); let div3 = document.getElementById(\\\"div3\\\"); let div4 = document.getElementById(\\\"div4\\\"); div1.onclick = function () { console.log(\\\"div1\\\"); }; div2.onclick = function () { console.log(\\\"div2\\\"); }; div3.onclick = function () { console.log(\\\"div3\\\"); }; div4.onclick = function () { console.log(\\\"div4\\\"); }; \",\"当我们点击div3时，会依次输出div3,div2,div1。\",\"这是因为，原始事件模型，只支持冒泡阶段，所以当我们点击div3时，会从div3开始，一直往外查找，直到根元素div1，然后执行事件处理程序。\"]},\"129\":{\"title\":\"作用域链\",\"header\":\"标准事件模型\",\"text\":[\"标准事件模型就是指在IE9及其以上版本中使用的事件模型，这种事件模型同时支持冒泡阶段和捕获阶段。使用的是addEventListener这种方式绑定事件。\",\"<div id=\\\"div1\\\"> <div id=\\\"div2\\\"> <div id=\\\"div3\\\"></div> </div> <div id=\\\"div4\\\"></div> </div> \",\"let div1 = document.getElementById(\\\"div1\\\"); let div2 = document.getElementById(\\\"div2\\\"); let div3 = document.getElementById(\\\"div3\\\"); let div4 = document.getElementById(\\\"div4\\\"); div1.addEventListener(\\\"click\\\", function () { console.log(\\\"div1\\\"); }); div2.addEventListener(\\\"click\\\", function () { console.log(\\\"div2\\\"); }); div3.addEventListener(\\\"click\\\", function () { console.log(\\\"div3\\\"); }); div4.addEventListener(\\\"click\\\", function () { console.log(\\\"div4\\\"); }); \",\"addEventListener接收三个参数：\",\"第一个参数：事件类型\",\"第二个参数: 事件处理程序\",\"第三个参数：是否在捕获阶段执行事件处理程序，默认为false，即在冒泡阶段执行事件处理程序。\",\"这是因为，现代浏览器的事件模型，同时支持冒泡阶段和捕获阶段，所以当我们点击div3时，会从div1开始，一直往下查找，直到div3，然后执行事件处理程序。\",\"现在我们可以分析上述代码：点击div3时，会依次输出div3,div2,div1。\"]},\"130\":{\"title\":\"作用域链\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"作用域链\"]}},\"131\":{\"title\":\"类的继承\",\"header\":\"ES5 的继承\",\"text\":[\"基于原型链的继承\",\"// 定义父类 function Person{ this.name = name; this.age = age; } // 定义父类的方法 Person.prototype.say = function(){ console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } // 定义子类 function Student(grade){ this.grade = grade; } // 继承父类 Student.prototype = new Person(\\\"summer\\\",12); // 实例化 const s1 = new Student(1); s1.say(); // My name is summer, I'm 12 years old. \",\"基于构造函数继承\",\"在子类中，使用call()调用父类的构造函数，这样就可以实现继承，将父类的属性添加到子类的实例上，将属性变为实例属性\",\"// 构造函数 function Person(name, age) { this.name = name; this.age = age; } // 定义方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 定义子类 function Student(name, age, grade) { Person.call(this, name, age); // 相当于将父类的实例复制了一份给了子类 this.grade = grade; } // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // 报错 \",\"但是如果是基于构造函数的继承，子类无法获取到父类原型上的方法\",\"组合继承(构造函数继承+原型链继承)\",\"// 构造函数 function Person(name, age) { this.name = name; this.age = age; } // 实现方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 定义子类 function Student(name, age, grade) { Person.call(this, name, age); // 构造函数继承获取到父类的属性 this.grade = grade; } // 原型链继承 Student.prototype = new Person(); // 原型链继承获取到父类的方法 // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // My name is summer, I'm 12 years old. \"]},\"132\":{\"title\":\"类的继承\",\"header\":\"ES6 的继承\",\"text\":[\"// 定义父类 class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 定义子类 class Student extends Person { constructor(name, age, grade) { super(name, age); // 调用父类的构造函数 this.grade = grade; } } // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // My name is summer, I'm 12 years old. \",\"super关键字的作用：\",\"通过调用super可以让子类访问到父类的方法和属性\",\"可以使用super调用父类的构造函数，super()相当于Person.call(this, name, age)\",\"super可以调用原型方法和静态方法\",\"class Person{ constructor(name,age){ this.name = name; this.age = age } // 添加原型方法 say(){ console.log(\\\"hello,\\\"+this.name) } // 添加静态方法 static sayHi(){ console.log(\\\"hi,\\\"+this.name) } } // 子类 class Student{ // 继承属性 constructor(name,age,grade){ // 调用父类的构造函数 super(name,age) this.grade = grade } // 继承方法，对方法进行重写 say(){ console.log(\\\"hello,\\\"+this.name+\\\",I'm \\\"+this.age+\\\" years old.\\\") } } \"]},\"133\":{\"title\":\"类的继承\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"继承\",\"类\"]}},\"134\":{\"title\":\"HTTP基本概念\",\"customFields\":{\"0\":[\"Network 篇\",\"HTTP\"],\"1\":[\"Network\",\"HTTP\",\"basic\"]}},\"135\":{\"title\":\"Network篇\",\"text\":[\"参考文档：\",\"小林X图解计算机基础\",\"面试官-HTTP\"],\"customFields\":{\"0\":[\"Network篇\"]}},\"136\":{\"title\":\"TCP/IP网络模型\",\"header\":\"应用层\",\"text\":[\"应用层是网络应用程序及它们的应用层协议存留的地方，例如HTTP、FTP、SMTP、DNS等。\",\"我们手机上的APP，电脑上的软件，都是应用层的东西。\",\"应用层不关心数据传输的细节，传输层会帮我们处理数据传输的细节。\",\"应用层是工作在操作系统的用户态，传输层及以下是工作在操作系统的内核态。\"]},\"137\":{\"title\":\"TCP/IP网络模型\",\"header\":\"传输层\",\"text\":[\"传输层为两台主机上的应用程序提供端到端的通信，例如TCP、UDP等。\",\"传输层有两个协议：TCP和UDP。\",\"TCP提供面向连接的、可靠的数据传输服务，它能够保证数据从一端传到另一端，而且不会丢失，不会乱序，不会重复，而且还能够保证数据的顺序。\",\"UDP提供无连接的、尽最大努力的数据传输服务，它不保证数据传输的可靠性，也就是说，当数据传到另一端时，我们并不能确定数据是否传输成功，也不能确定数据是否乱序，是否重复，是否丢失，也不能确定数据的顺序。\"]},\"138\":{\"title\":\"TCP/IP网络模型\",\"header\":\"TCP段的由来\",\"text\":[\"当应用层需要传递的数据非常大,超过了输出层的数据包大小的时候，这时候就会把数据分成多个小的数据包，每个小的数据包都会被封装成一个TCP段，然后再传输到传输层。\"]},\"139\":{\"title\":\"TCP/IP网络模型\",\"header\":\"网络层\",\"text\":[\"应用层将数据交给传输层，传输层只是为应用层提供了端到端的通信，但是传输层并不知道数据是如何从一端传到另一端的，这就需要网络层来帮助传输层完成这个工作。\",\"网络层使用协议：IP协议。\",\"IP协议定义了一种寻址方式，可以借助子网掩码就可以计算出网络号和主机号。 在寻址过程中，一般都是先匹配网络号，再匹配主机号。 \",\"IPV4：32位寻址方式\",\"IPV6：128位寻址方式\",\"IP协议还定义了一种路由选择协议，可以根据IP地址的不同，选择不同的路由，从而实现数据从一端传到另一端。 在实际生活，两个主机并不是直接通过一条链路相连的，而是通过一些路由器相连的，所以，当数据从一端传到另一端的时候，数据会经过很多的路由器，这就需要路由器来帮助我们选择路由，从而实现数据从一端传到另一端。\",\"路由器寻址工作中，就是要找到目标地址的子网，找到后进而把数据包转发给对应的网络内。IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘。\"]},\"140\":{\"title\":\"TCP/IP网络模型\",\"header\":\"链路层\",\"text\":[\"链路层是网络层的下一层，它的作用是将网络层传下来的IP数据报封装成帧，然后再通过物理层进行传输。\"]},\"141\":{\"title\":\"TCP/IP网络模型\",\"header\":\"物理层\",\"text\":[\"物理层是整个网络模型的最底层，它的作用是将数据从一台主机传输到另一台主机，它传输的单位是比特，也就是0和1。\",\"每一层的封装格式：\"]},\"142\":{\"title\":\"TCP/IP网络模型\",\"customFields\":{\"0\":[\"Network篇\"],\"1\":[\"Network\",\"basic\"]}},\"143\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"浏览器解析\",\"text\":[\"浏览器会判断输入的网址是搜索内容还是网址，如果是搜索内容，浏览器会将其转换为https://www.baidu.com/s?wd=搜索内容的形式，然后再发送请求。 这边我们考虑的都是键入网址内容\",\"浏览器会先检查本地缓存中是否有该网址对应的资源，如果有，就直接从缓存中获取资源，如果没有，就发送请求到服务器。\",\"浏览器会解析网址，获取协议、域名、端口号、路径、查询字符串、锚点等信息。\"]},\"144\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"DNS解析\",\"text\":[\"浏览器会先检查本地缓存中是否有该网址对应的IP地址，如果有，就直接从缓存中获取，如果没有，就发送请求到DNS服务器。\",\"向DNS发送请求采用的是迭代查询，即先向根域名服务器发送请求，根域名服务器会返回一个IP地址，然后再向该IP地址对应的服务器发送请求，该服务器会返回一个IP地址，然后再向该IP地址对应的服务器发送请求，直到最后返回一个IP地址。\",\"在DNS解析完成以后，就可以获取到目的网络的IP地址，这时候应用层就会生成相应的Http报文，然后从上往下传输到传输层\"]},\"145\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"TCP连接\",\"text\":[\"TCP在传输数据之前，要先进行三次握手，建立连接。\",\"双方建立好连接以后，就可以进行数据传输了。如果HTTP请求的消息体较大，TCP会将消息体分成多个数据包，然后在接收端再将其组装起来。\",\"将封装好的数据包传输到网络层。\"]},\"146\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"IP协议\",\"text\":[\"IP协议需要将数据封装为数据包，然后发送到数据链路层。\",\"IP协议需要知道源地址IP和目的地址IP，这两个地址都是IP地址，而不是域名。\"]},\"147\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"MAC地址\",\"text\":[\"IP头部生成后，还需要在数据链路层生成MAC头部，MAC头部包含源MAC地址和目的MAC地址。\",\"发送方的MAC在网卡生产的时候就已经固定了，而接收方的MAC地址是通过ARP协议获取的。\",\"ARP获取MAC地址的方式，是一种广播的方式，即发送方会向网络中的所有主机发送请求，询问目的主机的MAC地址，然后目的主机会向发送方回复MAC地址。ARP为了提高效率，会有一个缓存\",\"在数据链路层，数据包会被封装为帧吗，帧里面包含了MAC头部和IP头部，然后再发送到物理层。\"]},\"148\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"网卡\",\"text\":[\"网卡会将数据包转换为电信号，然后通过网线发送出去，发送到路由器上。也就是说，这才是真正的数据发送过程\"]},\"149\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"交换机\",\"text\":[\"交换机的端口因为无法获取到MAC地址，所以会将数据包转发到所有的端口，但是交换机会记录下数据包的源MAC地址和端口号，然后将其存储到MAC地址表中。\",\"所以交换机会根据MAC地址表，将数据包转发到目的主机。\"]},\"150\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"路由器\",\"text\":[\"网络包经过交换机转发到路由器上，路由器会根据IP头部的目的IP地址，查找路由表，然后将数据包转发到下一个路由器。\"]},\"151\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"customFields\":{\"0\":[\"Network 篇\"],\"1\":[\"Network\",\"basic\"]}},\"152\":{\"title\":\"React篇\",\"customFields\":{\"0\":[\"React篇\"]}},\"153\":{\"title\":\"TypeScript篇\",\"customFields\":{\"0\":[\"TypeScript篇\"]}},\"154\":{\"title\":\"泛型理解\",\"header\":\"什么是泛型\",\"text\":[\"泛型就是在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。\",\"我们可以这么理解，TS的泛型使得TS,更加像一个面向对象的语言，因为我们可以在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型。\",\"而且泛型帮助我们在代码编译的时候就知道我们传入的参数类型，从而提前发现错误。\"]},\"155\":{\"title\":\"泛型理解\",\"header\":\"泛型使用方式\",\"text\":[\"泛型分类为：泛型函数、泛型接口、泛型类\"]},\"156\":{\"title\":\"泛型理解\",\"header\":\"泛型函数\",\"text\":[\"应用场景： 有时候我们定义的函数，需要传入的参数和返回的参数是一致的，这时候我们就可以使用泛型来解决这个问题。\",\"function fn<T>(arg: T): T { return arg; } \"]},\"157\":{\"title\":\"泛型理解\",\"header\":\"泛型接口\",\"text\":[\"interface IBase<T, U> { name: T; age: T; sex: U; } \"]},\"158\":{\"title\":\"泛型理解\",\"header\":\"泛型类\",\"text\":[\"class Base<T> { name: T; age: T; constructor(name: T, age: T) { this.name = name; this.age = age; } } \"]},\"159\":{\"title\":\"泛型理解\",\"header\":\"泛型约束\",\"text\":[\"泛型约束就是指定泛型的类型，这样我们就可以在函数内部使用泛型的属性和方法了。\",\"interface IBase { length: number; } function fn<T extends IBase>(arg: T): T { console.log(arg.length); return arg; } \"]},\"160\":{\"title\":\"泛型理解\",\"header\":\"泛型别名\",\"text\":[\"泛型别名就是给泛型起一个别名，这样我们就可以在别的地方使用这个别名了。\",\"type IBase<T> = { name: T; age: T; }; function fn<T>(arg: IBase<T>): IBase<T> { return arg; } \",\"泛型约束和泛型别名的区别：\",\"泛型约束：\",\"约束泛型的类型，这样我们就可以在函数内部使用泛型的属性和方法了\",\"语法：<T extends IBase>，一般需要使用extends\",\"泛型别名：\",\"给泛型起一个别名，这样我们就可以在别的地方使用这个别名了。\",\"语法：arg: IBase<T>，一般不需要使用extends\",\"泛型约束是为了更加安全的访问属性或者方法(保证了这个对象必须存在某个属性或者方法)，但是泛型别名，是为了更好的复用\"]},\"161\":{\"title\":\"泛型理解\",\"header\":\"索引类型\",\"text\":[\"索引类型是指我们可以通过索引的方式访问对象的属性，Keyof T将传入的对象的属性名联合成一个联合类型。\",\"interface IBase { name: string; age: number; } function fn<T extends keyof IBase>(arg: T): T { return arg; } \"]},\"162\":{\"title\":\"泛型理解\",\"customFields\":{\"0\":[\"TypeScript\"],\"1\":[\"泛型\"]}},\"163\":{\"title\":\"Vue篇\",\"customFields\":{\"0\":[\"Vue篇\"]}}},\"dirtCount\":0,\"index\":[[\"索引类型是指我们可以通过索引的方式访问对象的属性\",{\"3\":{\"161\":1}}],[\"索引类型\",{\"0\":{\"161\":1},\"2\":{\"161\":1}}],[\"保证了这个对象必须存在某个属性或者方法\",{\"3\":{\"160\":1}}],[\"给泛型起一个别名\",{\"3\":{\"160\":1}}],[\"语法\",{\"3\":{\"160\":2}}],[\"语法改进\",{\"3\":{\"30\":1}}],[\"约束泛型的类型\",{\"3\":{\"160\":1}}],[\"需要传入的参数和返回的参数是一致的\",{\"3\":{\"156\":1}}],[\"需要对列表的每一项都能进行一些相同的事件\",{\"3\":{\"124\":1}}],[\"更加像一个面向对象的语言\",{\"3\":{\"154\":1}}],[\"泛型别名就是给泛型起一个别名\",{\"3\":{\"160\":1}}],[\"泛型别名\",{\"0\":{\"160\":1},\"2\":{\"160\":1},\"3\":{\"160\":1}}],[\"泛型约束是为了更加安全的访问属性或者方法\",{\"3\":{\"160\":1}}],[\"泛型约束和泛型别名的区别\",{\"3\":{\"160\":1}}],[\"泛型约束就是指定泛型的类型\",{\"3\":{\"159\":1}}],[\"泛型约束\",{\"0\":{\"159\":1},\"2\":{\"159\":1},\"3\":{\"160\":1}}],[\"泛型类\",{\"0\":{\"158\":1},\"2\":{\"158\":1},\"3\":{\"155\":1}}],[\"泛型接口\",{\"0\":{\"157\":1},\"2\":{\"157\":1},\"3\":{\"155\":1}}],[\"泛型函数\",{\"0\":{\"156\":1},\"2\":{\"156\":1},\"3\":{\"155\":1}}],[\"泛型分类为\",{\"3\":{\"155\":1}}],[\"泛型使用方式\",{\"0\":{\"155\":1},\"2\":{\"155\":1}}],[\"泛型就是在定义函数\",{\"3\":{\"154\":1}}],[\"泛型理解\",{\"1\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1}}],[\"交换机的端口因为无法获取到mac地址\",{\"3\":{\"149\":1}}],[\"交换机\",{\"0\":{\"149\":1},\"2\":{\"149\":1}}],[\"帧里面包含了mac头部和ip头部\",{\"3\":{\"147\":1}}],[\"询问目的主机的mac地址\",{\"3\":{\"147\":1}}],[\"发送到路由器上\",{\"3\":{\"148\":1}}],[\"发送方的mac在网卡生产的时候就已经固定了\",{\"3\":{\"147\":1}}],[\"发生了什么\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"双方建立好连接以后\",{\"3\":{\"145\":1}}],[\"双重非运算符\",{\"3\":{\"76\":1}}],[\"建立连接\",{\"3\":{\"145\":1}}],[\"要先进行三次握手\",{\"3\":{\"145\":1}}],[\"向dns发送请求采用的是迭代查询\",{\"3\":{\"144\":1}}],[\"锚点等信息\",{\"3\":{\"143\":1}}],[\"查询字符串\",{\"3\":{\"143\":1}}],[\"查找路由表\",{\"3\":{\"150\":1}}],[\"查找字符串中是否包含searchvalue\",{\"3\":{\"101\":2}}],[\"查找元素\",{\"0\":{\"92\":1,\"101\":1},\"2\":{\"92\":1,\"101\":1}}],[\"路径\",{\"3\":{\"143\":1}}],[\"路由器会根据ip头部的目的ip地址\",{\"3\":{\"150\":1}}],[\"路由器\",{\"0\":{\"150\":1},\"2\":{\"150\":1}}],[\"路由器寻址工作中\",{\"3\":{\"139\":1}}],[\"路由更像在操作方向盘\",{\"3\":{\"139\":1}}],[\"路由则是根据\",{\"3\":{\"139\":1}}],[\"端口号\",{\"3\":{\"143\":1}}],[\"域名\",{\"3\":{\"143\":1}}],[\"获取协议\",{\"3\":{\"143\":1}}],[\"获取数组的部分元素\",{\"3\":{\"55\":1}}],[\"键入网址到页面显示\",{\"1\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"浏览器会先检查本地缓存中是否有该网址对应的ip地址\",{\"3\":{\"144\":1}}],[\"浏览器会先检查本地缓存中是否有该网址对应的资源\",{\"3\":{\"143\":1}}],[\"浏览器会解析网址\",{\"3\":{\"143\":1}}],[\"浏览器会将其转换为https\",{\"3\":{\"143\":1}}],[\"浏览器会判断输入的网址是搜索内容还是网址\",{\"3\":{\"143\":1}}],[\"浏览器解析\",{\"0\":{\"143\":1},\"2\":{\"143\":1}}],[\"浏览器篇\",{\"1\":{\"0\":1}}],[\"每一层的封装格式\",{\"3\":{\"141\":1}}],[\"每个小的数据包都会被封装成一个tcp段\",{\"3\":{\"138\":1}}],[\"每个元素用指定的字符串隔开\",{\"3\":{\"95\":1}}],[\"每个元素用\",{\"3\":{\"95\":1}}],[\"每个变量存储的是一个指针\",{\"3\":{\"86\":1}}],[\"每个变量都有自己的内存空间\",{\"3\":{\"86\":1}}],[\"物理层是整个网络模型的最底层\",{\"3\":{\"141\":1}}],[\"物理层\",{\"0\":{\"141\":1},\"2\":{\"141\":1}}],[\"链路层是网络层的下一层\",{\"3\":{\"140\":1}}],[\"链路层\",{\"0\":{\"140\":1},\"2\":{\"140\":1}}],[\"寻址更像在导航\",{\"3\":{\"139\":1}}],[\"下一个目的地\",{\"3\":{\"139\":1}}],[\"下面给出一些例子\",{\"3\":{\"109\":1}}],[\"协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走\",{\"3\":{\"139\":1}}],[\"找到后进而把数据包转发给对应的网络内\",{\"3\":{\"139\":1}}],[\"两个主机并不是直接通过一条链路相连的\",{\"3\":{\"139\":1}}],[\"选择路径\",{\"3\":{\"139\":1}}],[\"选择不同的路由\",{\"3\":{\"139\":1}}],[\"选择器+属性选择器\",{\"3\":{\"12\":1}}],[\"选择器\",{\"0\":{\"11\":1},\"2\":{\"11\":1},\"3\":{\"11\":1,\"12\":2}}],[\"网络包经过交换机转发到路由器上\",{\"3\":{\"150\":1}}],[\"网络层使用协议\",{\"3\":{\"139\":1}}],[\"网络层\",{\"0\":{\"139\":1},\"2\":{\"139\":1}}],[\"网卡会将数据包转换为电信号\",{\"3\":{\"148\":1}}],[\"网卡\",{\"0\":{\"148\":1},\"2\":{\"148\":1}}],[\"网页首次加载时\",{\"3\":{\"29\":1}}],[\"超过了输出层的数据包大小的时候\",{\"3\":{\"138\":1}}],[\"尽最大努力的数据传输服务\",{\"3\":{\"137\":1}}],[\"传输层只是为应用层提供了端到端的通信\",{\"3\":{\"139\":1}}],[\"传输层有两个协议\",{\"3\":{\"137\":1}}],[\"传输层为两台主机上的应用程序提供端到端的通信\",{\"3\":{\"137\":1}}],[\"传输层\",{\"0\":{\"137\":1},\"2\":{\"137\":1}}],[\"传输层及以下是工作在操作系统的内核态\",{\"3\":{\"136\":1}}],[\"传输层会帮我们处理数据传输的细节\",{\"3\":{\"136\":1}}],[\"传递出去\",{\"3\":{\"71\":1}}],[\"电脑上的软件\",{\"3\":{\"136\":1}}],[\"例如tcp\",{\"3\":{\"137\":1}}],[\"例如http\",{\"3\":{\"136\":1}}],[\"例子\",{\"3\":{\"12\":1}}],[\"应用层将数据交给传输层\",{\"3\":{\"139\":1}}],[\"应用层是工作在操作系统的用户态\",{\"3\":{\"136\":1}}],[\"应用层是网络应用程序及它们的应用层协议存留的地方\",{\"3\":{\"136\":1}}],[\"应用层不关心数据传输的细节\",{\"3\":{\"136\":1}}],[\"应用层\",{\"0\":{\"136\":1},\"2\":{\"136\":1}}],[\"应用场景\",{\"0\":{\"22\":1},\"2\":{\"22\":1},\"3\":{\"55\":1,\"156\":1}}],[\"面试官\",{\"3\":{\"135\":1}}],[\"小林x图解计算机基础\",{\"3\":{\"135\":1}}],[\"组合继承\",{\"3\":{\"131\":1}}],[\"子类\",{\"3\":{\"132\":1}}],[\"子类无法获取到父类原型上的方法\",{\"3\":{\"131\":1}}],[\"子代选择器\",{\"3\":{\"11\":1}}],[\"构造函数继承获取到父类的属性\",{\"3\":{\"131\":1}}],[\"构造函数继承+原型链继承\",{\"3\":{\"131\":1}}],[\"构造函数\",{\"3\":{\"131\":2}}],[\"构造函数方法\",{\"0\":{\"67\":1},\"2\":{\"67\":1}}],[\"点击div3时\",{\"3\":{\"129\":1}}],[\"点击事件这类\",{\"3\":{\"124\":1}}],[\"同时支持冒泡阶段和捕获阶段\",{\"3\":{\"129\":1}}],[\"现在我们可以分析上述代码\",{\"3\":{\"129\":1}}],[\"现在可以改写成\",{\"3\":{\"30\":2}}],[\"现代浏览器的事件模型\",{\"3\":{\"129\":1}}],[\"原型链继承获取到父类的方法\",{\"3\":{\"131\":1}}],[\"原型链继承\",{\"3\":{\"131\":1}}],[\"原始事件模型就是指在ie8及其以下版本中使用的事件模型\",{\"3\":{\"128\":1}}],[\"原始事件模型\",{\"0\":{\"128\":1},\"2\":{\"128\":1},\"3\":{\"127\":1,\"128\":1}}],[\"原因\",{\"3\":{\"5\":1}}],[\"冒泡阶段\",{\"3\":{\"126\":1}}],[\"目标阶段\",{\"3\":{\"126\":1}}],[\"捕获阶段\",{\"3\":{\"126\":1}}],[\"产生原因\",{\"3\":{\"126\":1}}],[\"产生时间\",{\"0\":{\"43\":1},\"2\":{\"43\":1}}],[\"既然提到事件委托\",{\"3\":{\"124\":1}}],[\"既不是成功也不是失败\",{\"3\":{\"65\":1}}],[\"事件处理程序\",{\"3\":{\"129\":1}}],[\"事件处理程序就会创建一个执行上下文\",{\"3\":{\"124\":1}}],[\"事件类型\",{\"3\":{\"129\":1}}],[\"事件流阶段\",{\"3\":{\"126\":1}}],[\"事件的执行的先后顺序问题\",{\"3\":{\"126\":1}}],[\"事件和事件流\",{\"0\":{\"126\":1},\"2\":{\"126\":1}}],[\"事件模型分为两种\",{\"3\":{\"127\":1}}],[\"事件模型\",{\"0\":{\"125\":1,\"127\":1},\"2\":{\"125\":1,\"127\":1}}],[\"事件委托适用于那些场景\",{\"3\":{\"124\":1}}],[\"事件委托就是利用事件冒泡\",{\"3\":{\"124\":1}}],[\"事件委托\",{\"0\":{\"124\":1},\"2\":{\"124\":1}}],[\"举例\",{\"3\":{\"124\":1}}],[\"适合事件委托的事件有\",{\"3\":{\"124\":1}}],[\"还需要在数据链路层生成mac头部\",{\"3\":{\"147\":1}}],[\"还有一种常见场景\",{\"3\":{\"124\":1}}],[\"还是没有考虑到\",{\"3\":{\"114\":1}}],[\"执行操作\",{\"3\":{\"124\":1}}],[\"执行到reject时\",{\"3\":{\"64\":1}}],[\"执行到resolve时\",{\"3\":{\"64\":1}}],[\"假如我们为每一个列表项都增加点击事件\",{\"3\":{\"124\":1}}],[\"假如使用变量let\",{\"3\":{\"5\":1}}],[\"由内到外\",{\"3\":{\"124\":1}}],[\"补充\",{\"3\":{\"124\":1}}],[\"补充weakmap\",{\"3\":{\"114\":1}}],[\"q\",{\"3\":{\"121\":1}}],[\"queryselectorall\",{\"3\":{\"55\":1}}],[\"确认\",{\"3\":{\"121\":1}}],[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的\",{\"3\":{\"121\":1}}],[\"词法作用域\",{\"0\":{\"121\":1},\"2\":{\"121\":1}}],[\"直到最后返回一个ip地址\",{\"3\":{\"144\":1}}],[\"直到div3\",{\"3\":{\"129\":1}}],[\"直到根元素div1\",{\"3\":{\"128\":1}}],[\"直到找到该变量或者到全局作用域\",{\"3\":{\"120\":1,\"121\":1}}],[\"直接返回false\",{\"3\":{\"109\":1,\"110\":1}}],[\"参考文档\",{\"3\":{\"135\":1}}],[\"参考文章\",{\"0\":{\"116\":1},\"2\":{\"116\":1}}],[\"参数列表\",{\"3\":{\"55\":1}}],[\"参数的逆运算\",{\"3\":{\"55\":1}}],[\"有时候我们定义的函数\",{\"3\":{\"156\":1}}],[\"有兴趣的可以自己写一下\",{\"3\":{\"114\":1}}],[\"有什么区别\",{\"3\":{\"74\":1}}],[\"把map换为weakmap\",{\"3\":{\"114\":1}}],[\"接口或类的时候\",{\"3\":{\"154\":2}}],[\"接着我们可以参考\",{\"3\":{\"114\":1}}],[\"接收一个数组\",{\"3\":{\"67\":2}}],[\"接收一个参数\",{\"3\":{\"66\":2,\"67\":2}}],[\"接收两个参数\",{\"3\":{\"66\":1}}],[\"深拷贝会拷贝所有的属性\",{\"3\":{\"114\":1}}],[\"深拷贝就是能够实现真正意义上的对象拷贝\",{\"3\":{\"114\":1}}],[\"深拷贝\",{\"0\":{\"114\":1},\"2\":{\"114\":1}}],[\"深拷贝vs浅拷贝\",{\"1\":{\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1}}],[\"拓展运算符\",{\"3\":{\"113\":1}}],[\"笼统来说\",{\"3\":{\"112\":1}}],[\"笼统的说\",{\"3\":{\"108\":1}}],[\"拷贝的就是内存地址\",{\"3\":{\"112\":1}}],[\"拷贝的就是基本类型的值\",{\"3\":{\"112\":1}}],[\"浅拷贝只是复制了一层对象的属性\",{\"3\":{\"112\":1}}],[\"浅拷贝\",{\"0\":{\"112\":1},\"2\":{\"112\":1}}],[\"总结\",{\"0\":{\"110\":1},\"2\":{\"110\":1}}],[\"总的来说\",{\"3\":{\"72\":1}}],[\"完全等于===属于比较运算符\",{\"3\":{\"109\":1}}],[\"完全等于\",{\"0\":{\"109\":1},\"2\":{\"109\":1}}],[\"栈内存里面的地址必须相同\",{\"3\":{\"108\":1}}],[\"意思就是\",{\"3\":{\"108\":1}}],[\"意味着对\",{\"3\":{\"4\":1}}],[\"自动转化为数字除了+会转化为字符串\",{\"3\":{\"106\":1}}],[\"自动转化为字符串一般遇到+\",{\"3\":{\"106\":1}}],[\"自适应两栏布局\",{\"3\":{\"22\":1}}],[\"算术运算符\",{\"3\":{\"106\":1}}],[\"隐式类型转化发生的场景\",{\"3\":{\"106\":1}}],[\"隐式类型转化\",{\"0\":{\"106\":1},\"2\":{\"106\":1}}],[\"隐式绑定\",{\"3\":{\"70\":1}}],[\"显示类型转化\",{\"0\":{\"105\":1},\"2\":{\"105\":1}}],[\"显示绑定\",{\"3\":{\"70\":1}}],[\"转换成相同的类型\",{\"3\":{\"108\":1,\"110\":1}}],[\"转换规则如下\",{\"3\":{\"108\":1}}],[\"转换方法\",{\"0\":{\"102\":1},\"2\":{\"102\":1}}],[\"转化应该调用的是number\",{\"3\":{\"106\":1}}],[\"转化方法\",{\"0\":{\"95\":1},\"2\":{\"95\":1}}],[\"转化为boolean的方法\",{\"3\":{\"105\":1}}],[\"转化为string的方法\",{\"3\":{\"105\":1}}],[\"转化为number的方法\",{\"3\":{\"105\":1}}],[\"转化为布尔值的方法\",{\"3\":{\"76\":1}}],[\"转化为数字的方法parseint\",{\"3\":{\"74\":1}}],[\"大写\",{\"3\":{\"100\":1}}],[\"大于\",{\"3\":{\"93\":1}}],[\"重复字符串\",{\"3\":{\"100\":1}}],[\"重复声明\",{\"0\":{\"47\":1},\"2\":{\"47\":1}}],[\"去除字符串两端的空格\",{\"3\":{\"100\":1}}],[\"截取字符串\",{\"3\":{\"99\":3}}],[\"加号\",{\"3\":{\"98\":1}}],[\"加载不同的图片\",{\"3\":{\"31\":1}}],[\"加载不同的样式\",{\"3\":{\"31\":1}}],[\"连接字符串\",{\"3\":{\"98\":1}}],[\"连接两个或多个数组\",{\"3\":{\"89\":1}}],[\"隔开\",{\"3\":{\"95\":1}}],[\"该服务器会返回一个ip地址\",{\"3\":{\"144\":1}}],[\"该值会作为下一次迭代的prev\",{\"3\":{\"94\":1}}],[\"该项目将缩小\",{\"3\":{\"38\":1}}],[\"才是\",{\"3\":{\"121\":1}}],[\"才返回true\",{\"3\":{\"94\":1}}],[\"才会执行任务队列中的代码\",{\"3\":{\"5\":1}}],[\"没有返回值\",{\"3\":{\"94\":1}}],[\"遍历数组\",{\"3\":{\"94\":6}}],[\"所有的迭代方法都不会改变数组本身\",{\"3\":{\"94\":1}}],[\"所以交换机会根据mac地址表\",{\"3\":{\"149\":1}}],[\"所以\",{\"3\":{\"139\":1}}],[\"所以当我们点击div3时\",{\"3\":{\"128\":1,\"129\":1}}],[\"所以当父子元素都绑定了事件的时候\",{\"3\":{\"126\":1}}],[\"所以fn1的作用域链是fn1\",{\"3\":{\"123\":1}}],[\"所以foo的作用域链是foo\",{\"3\":{\"121\":1,\"123\":1}}],[\"所以bar的作用域链是bar\",{\"3\":{\"121\":1}}],[\"所以词法作用域是静态的作用域\",{\"3\":{\"121\":1}}],[\"所以我们需要对这些特殊对象进行判断\",{\"3\":{\"114\":1}}],[\"所以我们需要一个容器来存储已经拷贝过的对象\",{\"3\":{\"114\":1}}],[\"所以我们就需要使用apply方法\",{\"3\":{\"71\":1}}],[\"所以还需要对数组进行判断\",{\"3\":{\"114\":1}}],[\"所以如果其中一个对象改变了这个地址\",{\"3\":{\"112\":1}}],[\"所以this指向的是obj2\",{\"3\":{\"70\":1}}],[\"所以this指向的是obj1\",{\"3\":{\"70\":1}}],[\"所以this指向的是window\",{\"3\":{\"49\":1}}],[\"所以this指向的是使用时所在的对象\",{\"3\":{\"49\":1}}],[\"所以this指向的是函数定义时所在的对象\",{\"3\":{\"49\":2}}],[\"所以在foo中查找value时\",{\"3\":{\"121\":1}}],[\"所以在声明之前访问变量会报错\",{\"3\":{\"46\":2}}],[\"所以在一些特殊的场景下\",{\"3\":{\"17\":1}}],[\"所以单独拿出来说一下\",{\"3\":{\"38\":1}}],[\"所以说\",{\"3\":{\"25\":1}}],[\"所以权重为0113\",{\"3\":{\"12\":1}}],[\"所以每次循环时\",{\"3\":{\"5\":1}}],[\"所以settimeout中访问到的i是for循环中的i\",{\"3\":{\"5\":1}}],[\"所以settimeout中访问到的i是全局作用域中的i\",{\"3\":{\"5\":1}}],[\"所以var定义的变量会被提升到全局作用域中\",{\"3\":{\"5\":1}}],[\"所以i的值会被保存在闭包中\",{\"3\":{\"5\":1}}],[\"所以会将数据包转发到所有的端口\",{\"3\":{\"149\":1}}],[\"所以会使用math\",{\"3\":{\"71\":1}}],[\"所以会输出0\",{\"3\":{\"5\":1}}],[\"所以会在循环结束后才会执行\",{\"3\":{\"5\":1}}],[\"所以会比其他函数占用更多的内存\",{\"3\":{\"4\":1}}],[\"迭代方法\",{\"0\":{\"94\":1},\"2\":{\"94\":1}}],[\"分析词法作用域\",{\"3\":{\"121\":1}}],[\"分析一下上述代码\",{\"3\":{\"5\":1}}],[\"分别表示小于\",{\"3\":{\"93\":1}}],[\"比较这两个对象是不是同一个对象\",{\"3\":{\"108\":1}}],[\"比较运算符\",{\"3\":{\"106\":1}}],[\"比较函数返回值为\",{\"3\":{\"93\":1}}],[\"比如\",{\"3\":{\"76\":1,\"114\":1}}],[\"排序方法\",{\"0\":{\"93\":1},\"2\":{\"93\":1}}],[\"排列越靠前\",{\"3\":{\"38\":1}}],[\"修改数组\",{\"3\":{\"91\":1}}],[\"修改元素\",{\"0\":{\"91\":1,\"100\":1},\"2\":{\"91\":1,\"100\":1}}],[\"从而提前发现错误\",{\"3\":{\"154\":1}}],[\"从而实现数据从一端传到另一端\",{\"3\":{\"139\":2}}],[\"从当前元素开始往外查找\",{\"3\":{\"126\":1}}],[\"从根元素开始往下寻找\",{\"3\":{\"126\":1}}],[\"从start位置开始删除deletecount个\",{\"3\":{\"90\":1}}],[\"从上面的代码可以看出\",{\"3\":{\"64\":1}}],[\"从上述代码我们可以知道\",{\"3\":{\"4\":1}}],[\"删除数组开头的元素\",{\"3\":{\"90\":1}}],[\"删除数组末尾的元素\",{\"3\":{\"90\":1}}],[\"删除元素\",{\"0\":{\"90\":1,\"99\":1},\"2\":{\"90\":1,\"99\":1}}],[\"删除线等\",{\"3\":{\"13\":1}}],[\"增加元素\",{\"0\":{\"89\":1,\"98\":1},\"2\":{\"89\":1,\"98\":1}}],[\"增删改查\",{\"3\":{\"88\":1,\"97\":1}}],[\"四个方面来进行分类\",{\"3\":{\"88\":1}}],[\"操作方法我们也是从crud\",{\"3\":{\"97\":1}}],[\"操作方法我们可以从crud\",{\"3\":{\"88\":1}}],[\"操作方法\",{\"0\":{\"88\":1,\"97\":1},\"2\":{\"88\":1,\"97\":1}}],[\"互不影响\",{\"3\":{\"86\":1}}],[\"存储位置\",{\"0\":{\"86\":1},\"2\":{\"86\":1}}],[\"引用数据类型的值是存储在堆内存中的\",{\"3\":{\"86\":1}}],[\"引用数据类型\",{\"0\":{\"80\":1},\"2\":{\"80\":1}}],[\"引申\",{\"0\":{\"125\":1},\"2\":{\"125\":1},\"3\":{\"3\":1,\"29\":1,\"49\":1,\"55\":1}}],[\"空字符串\",{\"3\":{\"76\":1}}],[\"返回替换后的字符串\",{\"3\":{\"103\":1}}],[\"返回匹配到的第一个字符串的位置\",{\"3\":{\"103\":1}}],[\"返回匹配到的字符串数组\",{\"3\":{\"103\":1}}],[\"返回指定位置的字符\",{\"3\":{\"101\":1}}],[\"返回true\",{\"3\":{\"101\":1}}],[\"返回第一次出现的位置\",{\"3\":{\"101\":1}}],[\"返回第一个符合条件的元素\",{\"3\":{\"92\":1}}],[\"返回一个新的字符串\",{\"3\":{\"100\":1}}],[\"返回一个新数组\",{\"3\":{\"90\":1,\"94\":2}}],[\"返回一个值\",{\"3\":{\"94\":1}}],[\"返回一个布尔值\",{\"3\":{\"94\":2}}],[\"返回布尔值\",{\"3\":{\"92\":1}}],[\"返回\",{\"3\":{\"92\":1}}],[\"返回元素在数组中的位置\",{\"3\":{\"92\":1}}],[\"返回删除的元素\",{\"3\":{\"90\":2}}],[\"返回删除的元素组成的数组\",{\"3\":{\"89\":1,\"90\":1}}],[\"返回数组长度\",{\"3\":{\"89\":2}}],[\"返回新数组\",{\"3\":{\"89\":1}}],[\"返回nan\",{\"3\":{\"74\":1}}],[\"返回已经转化的数字\",{\"3\":{\"74\":1}}],[\"返回的都是一个新的string\",{\"3\":{\"99\":1}}],[\"返回的promise对象就会变为rejected状态\",{\"3\":{\"67\":1}}],[\"返回的promise对象就会变为resolved状态\",{\"3\":{\"67\":1}}],[\"返回的promise对象的状态就会跟随参数的promise对象的状态\",{\"3\":{\"67\":1}}],[\"返回的是一个对象\",{\"3\":{\"53\":1}}],[\"返回的是一个数组\",{\"3\":{\"52\":1}}],[\"遇到不可以转化的就截断\",{\"3\":{\"74\":1}}],[\"布尔值转化为false的情况\",{\"3\":{\"76\":1}}],[\"布尔值\",{\"3\":{\"74\":1}}],[\"布局的主要思想是让容器有能力让其子元素改变自身的宽度\",{\"3\":{\"35\":1}}],[\"布局是一种一维布局模型\",{\"3\":{\"35\":1}}],[\"长度为\",{\"3\":{\"74\":1}}],[\"虽然apply接受的参数是一个数组\",{\"3\":{\"71\":1}}],[\"虽然fn3被销毁了\",{\"3\":{\"4\":1}}],[\"我的理解是\",{\"3\":{\"71\":1}}],[\"我们并不能确定数据是否传输成功\",{\"3\":{\"137\":1}}],[\"我们手机上的app\",{\"3\":{\"136\":1}}],[\"我们会使用遍历或者sort方法\",{\"3\":{\"71\":1}}],[\"我们也可以看一个稍微复杂一点的例子\",{\"3\":{\"70\":1}}],[\"我们可以这么理解\",{\"3\":{\"154\":1}}],[\"我们可以分析出\",{\"3\":{\"123\":1}}],[\"我们可以看出\",{\"3\":{\"59\":1}}],[\"我们可以使用媒体查询来指定css的加载时机\",{\"3\":{\"29\":1}}],[\"我们需要使用其他的方法来隐藏元素\",{\"3\":{\"17\":1}}],[\"我们一般使用display\",{\"3\":{\"17\":1}}],[\"运算符\",{\"3\":{\"71\":1}}],[\"实现方法\",{\"3\":{\"131\":1}}],[\"实现数组的拼接\",{\"3\":{\"71\":1}}],[\"实例方法\",{\"0\":{\"66\":1},\"2\":{\"66\":1}}],[\"实例化\",{\"3\":{\"58\":1,\"59\":1,\"60\":2,\"131\":3,\"132\":1}}],[\"求数组的最大值和最小值\",{\"3\":{\"71\":1}}],[\"新数组中的元素是通过测试的元素\",{\"3\":{\"94\":1}}],[\"新的函数的this指向的是bind的第一个参数\",{\"3\":{\"71\":1}}],[\"新增\",{\"3\":{\"55\":2}}],[\"来标识\",{\"3\":{\"98\":2}}],[\"来直接改变\",{\"3\":{\"70\":1}}],[\"来隐藏元素\",{\"3\":{\"17\":1}}],[\"采用一些方法\",{\"3\":{\"70\":1}}],[\"谁先来的就跟着谁变化\",{\"3\":{\"67\":1}}],[\"兜底的作用\",{\"3\":{\"66\":1}}],[\"第三个参数\",{\"3\":{\"129\":1}}],[\"第二个参数\",{\"3\":{\"129\":1}}],[\"第二个参数是reject的回调函数\",{\"3\":{\"64\":1,\"66\":1}}],[\"第一个参数\",{\"3\":{\"129\":1}}],[\"第一个参数是resolve的回调函数\",{\"3\":{\"64\":1,\"66\":1}}],[\"状态变为rejected\",{\"3\":{\"64\":1}}],[\"状态变为resolved\",{\"3\":{\"64\":1}}],[\"失败状态\",{\"3\":{\"65\":1}}],[\"失败\",{\"3\":{\"64\":1,\"67\":3}}],[\"失败的回调函数\",{\"3\":{\"64\":1,\"67\":7}}],[\"成功状态\",{\"3\":{\"65\":1}}],[\"成功\",{\"3\":{\"64\":1,\"67\":3}}],[\"成功的回调函数\",{\"3\":{\"64\":1,\"67\":7}}],[\"调用父类的构造函数\",{\"3\":{\"131\":1,\"132\":2}}],[\"调用的地方\",{\"3\":{\"121\":1}}],[\"调用race\",{\"3\":{\"67\":1}}],[\"调用\",{\"3\":{\"64\":1,\"67\":2}}],[\"异步操作\",{\"3\":{\"64\":1,\"67\":7}}],[\"主要就是export和import两个关键字\",{\"3\":{\"62\":1}}],[\"主要原则就是\",{\"3\":{\"12\":1}}],[\"模板匹配方法\",{\"0\":{\"103\":1},\"2\":{\"103\":1}}],[\"模板字符串是增强版的字符串\",{\"3\":{\"50\":1}}],[\"模板字符串\",{\"0\":{\"50\":1},\"2\":{\"50\":1},\"3\":{\"98\":1}}],[\"模块化\",{\"0\":{\"62\":1},\"2\":{\"62\":1}}],[\"继承方法\",{\"3\":{\"132\":1}}],[\"继承父类\",{\"3\":{\"131\":1}}],[\"继承\",{\"3\":{\"61\":1}}],[\"继承属性\",{\"0\":{\"13\":1},\"2\":{\"13\":1},\"3\":{\"132\":1}}],[\"添加静态方法\",{\"3\":{\"132\":1}}],[\"添加原型方法\",{\"3\":{\"132\":1}}],[\"添加方法\",{\"3\":{\"60\":2}}],[\"添加下划线\",{\"3\":{\"13\":1}}],[\"对方法进行重写\",{\"3\":{\"132\":1}}],[\"对于键盘操作这类\",{\"3\":{\"124\":1}}],[\"对于鼠标操作这类\",{\"3\":{\"124\":1}}],[\"对每个元素进行操作\",{\"3\":{\"94\":6}}],[\"对类添加方法\",{\"0\":{\"60\":1},\"2\":{\"60\":1}}],[\"对象的\",{\"3\":{\"64\":1,\"67\":2}}],[\"对象的解构赋值\",{\"0\":{\"53\":1},\"2\":{\"53\":1}}],[\"对象\",{\"3\":{\"64\":1,\"67\":3,\"108\":2}}],[\"对象之前出现相互引用的情况\",{\"3\":{\"2\":1}}],[\"本质上还是\",{\"3\":{\"59\":1}}],[\"结合上面两个代码\",{\"3\":{\"59\":1}}],[\"具体可以参考javascript\",{\"3\":{\"105\":1}}],[\"具体参考\",{\"3\":{\"49\":1,\"61\":1}}],[\"具有可迭代性的对象\",{\"3\":{\"55\":1}}],[\"都是应用层的东西\",{\"3\":{\"136\":1}}],[\"都当做一个参数\",{\"3\":{\"71\":1}}],[\"都会执行\",{\"3\":{\"66\":1}}],[\"都会重新定义\",{\"3\":{\"5\":1}}],[\"都需要对象具有可迭代性\",{\"3\":{\"55\":1}}],[\"关于扩展运算符和解构赋值\",{\"3\":{\"55\":1}}],[\"进行深拷贝\",{\"3\":{\"55\":1}}],[\"字符串转换为数字\",{\"3\":{\"108\":1}}],[\"字符串转数组\",{\"3\":{\"55\":1}}],[\"字符串拼接\",{\"3\":{\"98\":1}}],[\"字符串常用方法\",{\"1\":{\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"字符串\",{\"3\":{\"55\":1}}],[\"字体类\",{\"3\":{\"13\":1}}],[\"与解构赋值结合\",{\"3\":{\"55\":1}}],[\"扩展运算符以及for\",{\"3\":{\"55\":1}}],[\"扩展运算符是三个点\",{\"3\":{\"55\":1}}],[\"扩展运算符\",{\"0\":{\"55\":1},\"2\":{\"55\":1}}],[\"keyof\",{\"3\":{\"161\":2}}],[\"keyup\",{\"3\":{\"124\":1}}],[\"keypress\",{\"3\":{\"124\":1}}],[\"keydown\",{\"3\":{\"124\":1}}],[\"k\",{\"3\":{\"52\":1}}],[\"变量使用$\",{\"3\":{\"98\":1}}],[\"变量的值就等于undefined\",{\"3\":{\"52\":1}}],[\"变量的值就等于\",{\"3\":{\"52\":1}}],[\"变量提升就是在代码执行之前\",{\"3\":{\"46\":1}}],[\"变量提升\",{\"0\":{\"46\":1},\"2\":{\"46\":1}}],[\"剩余运算符只能放在最后一位\",{\"3\":{\"52\":1,\"53\":1}}],[\"剩余运算符\",{\"3\":{\"52\":1,\"53\":1}}],[\"数据包会被封装为帧吗\",{\"3\":{\"147\":1}}],[\"数据会经过很多的路由器\",{\"3\":{\"139\":1}}],[\"数据类型\",{\"3\":{\"105\":1}}],[\"数据类型的存储位置\",{\"3\":{\"86\":1}}],[\"数字\",{\"3\":{\"76\":1}}],[\"数组转化为字符串\",{\"3\":{\"95\":1}}],[\"数组常用方法\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1}}],[\"数组中的每一项都是一个promise对象\",{\"3\":{\"67\":2}}],[\"数组\",{\"3\":{\"55\":1}}],[\"数组合并\",{\"3\":{\"55\":1}}],[\"数组的解构赋值\",{\"0\":{\"52\":1},\"2\":{\"52\":1}}],[\"数值越小\",{\"3\":{\"38\":1}}],[\"然后将数据包转发到下一个路由器\",{\"3\":{\"150\":1}}],[\"然后将其存储到mac地址表中\",{\"3\":{\"149\":1}}],[\"然后将元素移除屏幕\",{\"3\":{\"18\":1}}],[\"然后通过网线发送出去\",{\"3\":{\"148\":1}}],[\"然后目的主机会向发送方回复mac地址\",{\"3\":{\"147\":1}}],[\"然后发送到数据链路层\",{\"3\":{\"146\":1}}],[\"然后在接收端再将其组装起来\",{\"3\":{\"145\":1}}],[\"然后从上往下传输到传输层\",{\"3\":{\"144\":1}}],[\"然后再发送到物理层\",{\"3\":{\"147\":1}}],[\"然后再发送请求\",{\"3\":{\"143\":1}}],[\"然后再向该ip地址对应的服务器发送请求\",{\"3\":{\"144\":2}}],[\"然后再通过物理层进行传输\",{\"3\":{\"140\":1}}],[\"然后再传输到传输层\",{\"3\":{\"138\":1}}],[\"然后再进行比较\",{\"3\":{\"106\":1}}],[\"然后执行事件处理程序\",{\"3\":{\"128\":1,\"129\":1}}],[\"然后执行\",{\"3\":{\"126\":1}}],[\"然后就会去调用then方法\",{\"3\":{\"64\":1}}],[\"然后对其中的变量进行赋值\",{\"3\":{\"51\":1}}],[\"解构不成功\",{\"3\":{\"52\":1}}],[\"解构赋值是对赋值运算符的扩展\",{\"3\":{\"51\":1}}],[\"解构赋值\",{\"0\":{\"51\":1},\"2\":{\"51\":1}}],[\"解析完毕后\",{\"3\":{\"26\":1}}],[\"years\",{\"3\":{\"50\":2,\"58\":2,\"59\":2,\"60\":4,\"131\":5,\"132\":3}}],[\"yellow\",{\"3\":{\"40\":1}}],[\"$\",{\"3\":{\"50\":2,\"58\":2,\"59\":2,\"60\":4,\"131\":6,\"132\":2}}],[\"或者在字符串中嵌入变量\",{\"3\":{\"50\":1}}],[\"``\",{\"3\":{\"98\":1}}],[\"`my\",{\"3\":{\"50\":1,\"58\":1,\"59\":1,\"60\":2,\"131\":3,\"132\":1}}],[\"`\",{\"3\":{\"50\":2,\"58\":1,\"59\":1,\"60\":2,\"131\":3,\"132\":1}}],[\"用padstring填充字符串\",{\"3\":{\"100\":1}}],[\"用来接收参数\",{\"3\":{\"59\":1}}],[\"用来检测媒体类型的特性\",{\"3\":{\"30\":1}}],[\"用反引号\",{\"3\":{\"50\":1}}],[\"简单理解为参数列表\",{\"3\":{\"49\":1}}],[\"简单来说\",{\"3\":{\"30\":1,\"67\":1}}],[\"包括自己\",{\"3\":{\"108\":1}}],[\"包括嵌套的p元素\",{\"3\":{\"11\":1}}],[\"包含从start到end\",{\"3\":{\"90\":1}}],[\"包含了函数的所有参数\",{\"3\":{\"49\":1}}],[\"指向谁\",{\"3\":{\"121\":1}}],[\"指向存储在堆内存中的对象\",{\"3\":{\"86\":1}}],[\"指向问题\",{\"3\":{\"49\":1}}],[\"指向的是函数使用时所在的对象\",{\"3\":{\"49\":1}}],[\"指定媒体类型\",{\"3\":{\"30\":1}}],[\"特点\",{\"3\":{\"49\":1}}],[\"形式\",{\"3\":{\"49\":1}}],[\"箭头函数没有arguments\",{\"3\":{\"49\":1}}],[\"箭头函数没有this\",{\"3\":{\"49\":1}}],[\"箭头函数\",{\"0\":{\"49\":1},\"2\":{\"49\":1}}],[\"报错\",{\"3\":{\"46\":2,\"47\":2,\"48\":1,\"49\":1,\"131\":1}}],[\"上面的代码表明\",{\"3\":{\"48\":1,\"70\":2}}],[\"上面这段代码表明\",{\"3\":{\"46\":3,\"47\":2}}],[\"上述代码表明\",{\"3\":{\"45\":1}}],[\"u>\",{\"3\":{\"157\":1}}],[\"udp提供无连接的\",{\"3\":{\"137\":1}}],[\"udp等\",{\"3\":{\"137\":1}}],[\"unshift\",{\"3\":{\"90\":1}}],[\"undefined转化为数字是nan\",{\"3\":{\"78\":1}}],[\"undefined的类型是undefined\",{\"3\":{\"78\":1}}],[\"undefined是变量声明\",{\"3\":{\"78\":1}}],[\"undefined是一个变量\",{\"3\":{\"78\":1}}],[\"undefined是一个全局变量\",{\"3\":{\"78\":1}}],[\"undefined和null的区别\",{\"3\":{\"78\":1}}],[\"undefined会返回undefined\",{\"3\":{\"78\":1}}],[\"undefined\",{\"0\":{\"78\":1},\"2\":{\"78\":1},\"3\":{\"46\":1,\"49\":1,\"52\":1,\"76\":1,\"78\":1,\"106\":1,\"108\":1,\"109\":3,\"110\":2}}],[\"u\",{\"3\":{\"55\":1,\"157\":1}}],[\"ul>\",{\"3\":{\"124\":1}}],[\"ul\",{\"3\":{\"12\":1,\"124\":4}}],[\"赋值还是在后面\",{\"3\":{\"46\":1}}],[\"临时死亡区就是代码块的起始位置到变量声明的位置\",{\"3\":{\"46\":1}}],[\"临时死亡区\",{\"0\":{\"46\":1},\"2\":{\"46\":1}}],[\"仅在当前这个作用域生效\",{\"3\":{\"45\":1}}],[\"并将这个上下文添加到执行环境中\",{\"3\":{\"124\":1}}],[\"并将其放在任务队列里面\",{\"3\":{\"5\":1}}],[\"并不是在调用的地方\",{\"3\":{\"121\":1}}],[\"并拷贝属性指向的动态分配的内存\",{\"3\":{\"114\":1}}],[\"并且增加的item还会绑定事件\",{\"3\":{\"124\":1}}],[\"并且有字符串\",{\"3\":{\"106\":1}}],[\"并且是可以被改变的\",{\"3\":{\"45\":1}}],[\"9\",{\"3\":{\"45\":2}}],[\"96英寸\",{\"3\":{\"15\":1}}],[\"8\",{\"3\":{\"45\":2}}],[\"函数fn1的作用域是foo的作用域\",{\"3\":{\"123\":1}}],[\"函数foo的作用域是全局作用域\",{\"3\":{\"121\":1,\"123\":1}}],[\"函数bar的作用域是全局作用域\",{\"3\":{\"121\":1}}],[\"函数的解构赋值其实是针对于函数的参数而言的\",{\"3\":{\"54\":1}}],[\"函数的解构赋值\",{\"0\":{\"54\":1},\"2\":{\"54\":1}}],[\"函数作用域\",{\"3\":{\"45\":2,\"119\":1}}],[\"函数可以访问其声明外部的函数的作用域\",{\"3\":{\"4\":1}}],[\"块级作用域\",{\"3\":{\"45\":2,\"119\":1}}],[\"只支持冒泡阶段\",{\"3\":{\"128\":1}}],[\"只指定一个事件处理程序\",{\"3\":{\"124\":1}}],[\"只有箭头函数\",{\"3\":{\"121\":1}}],[\"只有所有元素都通过测试\",{\"3\":{\"94\":1}}],[\"只考虑了普通object情况\",{\"3\":{\"114\":1}}],[\"只读\",{\"3\":{\"97\":1}}],[\"只是这种数组\",{\"3\":{\"97\":1}}],[\"只能将字符串转化为数字\",{\"3\":{\"74\":1}}],[\"只可以转化纯数字字符串或者空字符串\",{\"3\":{\"74\":1}}],[\"只要有一个元素通过测试\",{\"3\":{\"94\":1}}],[\"只要数组的某一个promise对象变为resolved状态\",{\"3\":{\"67\":1}}],[\"只要不在函数内部或者在大括号内的都是全局作用域\",{\"3\":{\"45\":1}}],[\"只在打印内容时适用\",{\"3\":{\"29\":1}}],[\"全局作用域\",{\"3\":{\"45\":2,\"119\":1,\"121\":3,\"123\":2}}],[\"也就是0和1\",{\"3\":{\"141\":1}}],[\"也就是说\",{\"3\":{\"137\":1,\"148\":1}}],[\"也就是说在什么范围内可以访问到变量和函数\",{\"3\":{\"45\":1}}],[\"也不能确定数据的顺序\",{\"3\":{\"137\":1}}],[\"也不能确定数据是否乱序\",{\"3\":{\"137\":1}}],[\"也不需要额外的运算符\",{\"3\":{\"71\":1}}],[\"也不放大\",{\"3\":{\"38\":1}}],[\"也可以是一个promise对象\",{\"3\":{\"67\":1}}],[\"也可以用来定义多行字符串\",{\"3\":{\"50\":1}}],[\"race\",{\"3\":{\"67\":4}}],[\"random\",{\"3\":{\"64\":1,\"67\":7}}],[\"r\",{\"3\":{\"55\":1}}],[\"right\",{\"3\":{\"40\":1}}],[\"replace\",{\"3\":{\"103\":1}}],[\"repeat\",{\"3\":{\"100\":1}}],[\"reverse\",{\"3\":{\"93\":1}}],[\"regexp\",{\"0\":{\"85\":1},\"2\":{\"85\":1},\"3\":{\"114\":1}}],[\"rejected\",{\"3\":{\"65\":1}}],[\"reject\",{\"3\":{\"64\":3,\"67\":22}}],[\"resolved\",{\"3\":{\"65\":1}}],[\"resolve\",{\"3\":{\"64\":3,\"67\":24}}],[\"rest\",{\"3\":{\"53\":2,\"54\":2,\"55\":1}}],[\"react篇\",{\"1\":{\"152\":1}}],[\"react\",{\"3\":{\"55\":1}}],[\"referenceerror\",{\"3\":{\"46\":1}}],[\"reduce\",{\"3\":{\"94\":1}}],[\"red\",{\"3\":{\"40\":1}}],[\"rel=\",{\"3\":{\"29\":3,\"33\":2}}],[\"rem\",{\"3\":{\"15\":1}}],[\"return\",{\"3\":{\"4\":2,\"5\":3,\"55\":1,\"123\":1,\"156\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"左右两边固定宽度\",{\"3\":{\"40\":1}}],[\"三栏布局\",{\"0\":{\"40\":1},\"2\":{\"40\":1},\"3\":{\"40\":1}}],[\"常见的深拷贝方法\",{\"0\":{\"115\":1},\"2\":{\"115\":1}}],[\"常见的浅拷贝方法\",{\"0\":{\"113\":1},\"2\":{\"113\":1}}],[\"常见的隐藏元素的方法有以下几种\",{\"3\":{\"18\":1}}],[\"常见布局\",{\"0\":{\"39\":1},\"2\":{\"39\":1}}],[\"且会根据剩余空间的大小进行放大\",{\"3\":{\"38\":1}}],[\"且很重要\",{\"3\":{\"38\":1}}],[\"场景\",{\"3\":{\"38\":1}}],[\"基于构造函数继承\",{\"3\":{\"131\":1}}],[\"基于原型链的继承\",{\"3\":{\"131\":1}}],[\"基本数据类型的值是存储在栈内存中的\",{\"3\":{\"86\":1}}],[\"基本数据类型\",{\"0\":{\"73\":1},\"2\":{\"73\":1}}],[\"基准值为\",{\"3\":{\"38\":1}}],[\"基础概念\",{\"0\":{\"35\":1},\"2\":{\"35\":1}}],[\"缩小比例为\",{\"3\":{\"38\":1}}],[\"缩小\",{\"3\":{\"38\":1}}],[\"放大比例为\",{\"3\":{\"38\":1}}],[\"放大\",{\"3\":{\"38\":2}}],[\"放在\",{\"2\":{\"28\":1}}],[\"放在head标签中\",{\"0\":{\"28\":1}}],[\"相当于person\",{\"3\":{\"132\":1}}],[\"相当于将父类的实例复制了一份给了子类\",{\"3\":{\"131\":1}}],[\"相当于flex\",{\"3\":{\"38\":3}}],[\"相对于显示器的分辨率\",{\"3\":{\"15\":1}}],[\"后两个属性可选\",{\"3\":{\"38\":1}}],[\"后代选择器\",{\"3\":{\"11\":2}}],[\"项目占据的主轴空间\",{\"3\":{\"38\":1}}],[\"项目属性\",{\"0\":{\"38\":1},\"2\":{\"38\":1}}],[\"定义子类\",{\"3\":{\"131\":3,\"132\":1}}],[\"定义父类的方法\",{\"3\":{\"131\":1}}],[\"定义父类\",{\"3\":{\"131\":1,\"132\":1}}],[\"定义一个\",{\"3\":{\"64\":1,\"67\":3}}],[\"定义方法\",{\"3\":{\"58\":1,\"131\":1}}],[\"定义构造函数\",{\"3\":{\"58\":1}}],[\"定义类\",{\"0\":{\"57\":1},\"2\":{\"57\":1}}],[\"定义在分配多余空间之前\",{\"3\":{\"38\":1}}],[\"定义项目的缩小比例\",{\"3\":{\"38\":1}}],[\"定义项目的放大比例\",{\"3\":{\"38\":1}}],[\"定义项目的排列顺序\",{\"3\":{\"38\":1}}],[\"可靠的数据传输服务\",{\"3\":{\"137\":1}}],[\"可变性\",{\"0\":{\"48\":1},\"2\":{\"48\":1}}],[\"可被改变\",{\"3\":{\"45\":1}}],[\"可覆盖align\",{\"3\":{\"38\":1}}],[\"可以根据ip地址的不同\",{\"3\":{\"139\":1}}],[\"可以根据不同的特性来加载不同的css\",{\"3\":{\"30\":1}}],[\"可以借助子网掩码就可以计算出网络号和主机号\",{\"3\":{\"139\":1}}],[\"可以通过作用域链来访问属性和方法和e事件对象\",{\"3\":{\"124\":1}}],[\"可以这么说\",{\"3\":{\"121\":1}}],[\"可以传入一个比较函数\",{\"3\":{\"93\":1}}],[\"可以是一个值\",{\"3\":{\"67\":1}}],[\"可以认为\",{\"3\":{\"59\":1}}],[\"可以给变量设置别名\",{\"3\":{\"53\":1}}],[\"可以给变量设置默认值\",{\"3\":{\"52\":1,\"53\":1}}],[\"可以跳过某些元素\",{\"3\":{\"52\":2}}],[\"可以使用super调用父类的构造函数\",{\"3\":{\"132\":1}}],[\"可以使用\",{\"3\":{\"71\":1}}],[\"可以使用解构赋值\",{\"3\":{\"55\":1}}],[\"可以使用扩展运算符来传递\",{\"3\":{\"55\":1}}],[\"可以使用剩余运算符\",{\"3\":{\"52\":1,\"53\":1}}],[\"可以使用flex\",{\"3\":{\"38\":2}}],[\"可以使用闭包来延迟函数的执行\",{\"3\":{\"5\":1}}],[\"可以实现更加灵活的布局方式\",{\"3\":{\"35\":1}}],[\"可以用来指定资源的加载时机\",{\"3\":{\"33\":1}}],[\"可以确保css在dom树生成之前就加载完毕\",{\"3\":{\"28\":1}}],[\"可以在里面插入样式\",{\"3\":{\"11\":1}}],[\"可以在里面插入内容\",{\"3\":{\"11\":1}}],[\"可以访问到\",{\"3\":{\"4\":1}}],[\"允许单个项目有与其他项目不一样的对齐方式\",{\"3\":{\"38\":1}}],[\"默认绑定\",{\"3\":{\"70\":1}}],[\"默认会有一个空的constructor方法\",{\"3\":{\"59\":1}}],[\"默认值为0\",{\"3\":{\"38\":1}}],[\"默认值为row\",{\"3\":{\"37\":1}}],[\"默认为false\",{\"3\":{\"129\":1}}],[\"默认为\",{\"3\":{\"38\":3}}],[\"多根轴线的对齐方式\",{\"3\":{\"37\":1}}],[\"决定元素是否换行\",{\"3\":{\"37\":1}}],[\"决定主轴的方向\",{\"3\":{\"37\":1}}],[\"容器属性\",{\"0\":{\"37\":1},\"2\":{\"37\":1}}],[\"属性\",{\"0\":{\"36\":1},\"2\":{\"36\":1}}],[\"属性选择器\",{\"3\":{\"11\":1,\"12\":1}}],[\"以最适合当前的显示环境\",{\"3\":{\"35\":1}}],[\"以及对齐方式等\",{\"3\":{\"35\":1}}],[\"顺序\",{\"3\":{\"35\":1}}],[\"高度\",{\"3\":{\"35\":1}}],[\"提前缓存\",{\"3\":{\"33\":1}}],[\"提前加载\",{\"3\":{\"33\":1}}],[\"预加载\",{\"3\":{\"33\":1}}],[\"作用域链的场景\",{\"0\":{\"122\":1},\"2\":{\"122\":1}}],[\"作用域链\",{\"0\":{\"120\":1},\"1\":{\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1},\"2\":{\"120\":1}}],[\"作用域链分类\",{\"0\":{\"119\":1},\"2\":{\"119\":1}}],[\"作用域分类\",{\"3\":{\"45\":1}}],[\"作用域就是变量和函数的可访问范围\",{\"3\":{\"45\":1}}],[\"作用域补充\",{\"0\":{\"45\":1},\"2\":{\"45\":1}}],[\"作用域\",{\"0\":{\"44\":1},\"2\":{\"44\":1}}],[\"作用就是\",{\"3\":{\"33\":1}}],[\"作为\",{\"3\":{\"4\":1}}],[\"而在使用的时候再指定类型\",{\"3\":{\"154\":1}}],[\"而在使用的时候再指定类型的一种特性\",{\"3\":{\"154\":1}}],[\"而接收方的mac地址是通过arp协议获取的\",{\"3\":{\"147\":1}}],[\"而不是域名\",{\"3\":{\"146\":1}}],[\"而不是使用时所在的对象\",{\"3\":{\"49\":1}}],[\"而是通过一些路由器相连的\",{\"3\":{\"139\":1}}],[\"而null转化为数字是0\",{\"3\":{\"78\":1}}],[\"而null的类型是object\",{\"3\":{\"78\":1}}],[\"而null是一个空对象指针\",{\"3\":{\"78\":1}}],[\"而null是一个关键字\",{\"3\":{\"78\":1}}],[\"而apply的参数是一个数组\",{\"3\":{\"71\":1}}],[\"而且泛型帮助我们在代码编译的时候就知道我们传入的参数类型\",{\"3\":{\"154\":1}}],[\"而且还能够保证数据的顺序\",{\"3\":{\"137\":1}}],[\"而且不会丢失\",{\"3\":{\"137\":1}}],[\"而且bind的第一个参数是不能被改变的\",{\"3\":{\"71\":1}}],[\"而且后面的声明会覆盖前面的声明\",{\"3\":{\"47\":1}}],[\"而bind是返回一个新的函数\",{\"3\":{\"71\":1}}],[\"而call又改变了this的指向\",{\"3\":{\"70\":1}}],[\"而const声明的变量是不可变的\",{\"3\":{\"48\":1}}],[\"而使用时是window调用的\",{\"3\":{\"49\":1}}],[\"而let和const声明的变量不能被重复声明\",{\"3\":{\"47\":1}}],[\"而prefetch用来指定当前页面可能会用到的资源\",{\"3\":{\"33\":1}}],[\"而全局作用域中的i在循环结束后\",{\"3\":{\"5\":1}}],[\"图片优化\",{\"3\":{\"31\":1}}],[\"动态样式\",{\"3\":{\"31\":1}}],[\"响应式布局\",{\"3\":{\"31\":1}}],[\"至多是60em\",{\"3\":{\"30\":2}}],[\"至多多少\",{\"3\":{\"30\":1}}],[\"至少多少\",{\"3\":{\"30\":1}}],[\"最小宽度\",{\"3\":{\"30\":1}}],[\"最大宽度\",{\"3\":{\"30\":1}}],[\"表明\",{\"3\":{\"38\":4}}],[\"表示是否找到了元素\",{\"3\":{\"92\":1}}],[\"表示只匹配媒体类型的情况\",{\"3\":{\"30\":1}}],[\"表示不匹配媒体类型的情况\",{\"3\":{\"30\":1}}],[\"表格边框是否合并\",{\"3\":{\"13\":1}}],[\"表格的布局方式\",{\"3\":{\"13\":1}}],[\"表格标题的位置\",{\"3\":{\"13\":1}}],[\"表格类\",{\"3\":{\"13\":1}}],[\"extends\",{\"3\":{\"132\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"expressions\",{\"3\":{\"30\":2}}],[\"every\",{\"3\":{\"94\":1}}],[\"end\",{\"3\":{\"90\":1,\"99\":4}}],[\"error\",{\"3\":{\"114\":1}}],[\"err\",{\"3\":{\"64\":2,\"67\":6}}],[\"else\",{\"3\":{\"64\":1,\"67\":7}}],[\"eating\",{\"3\":{\"60\":4}}],[\"eat\",{\"3\":{\"60\":4}}],[\"e\",{\"3\":{\"52\":2,\"55\":1,\"124\":2}}],[\"es6新增的字符串拼接方法\",{\"3\":{\"98\":1}}],[\"es6新特新\",{\"1\":{\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"es6之后\",{\"3\":{\"92\":1}}],[\"es6之前\",{\"3\":{\"92\":1}}],[\"es6篇\",{\"1\":{\"69\":1}}],[\"es6中定义的方法\",{\"3\":{\"59\":1}}],[\"es6\",{\"0\":{\"59\":1,\"132\":1},\"2\":{\"59\":1,\"132\":1},\"3\":{\"43\":1,\"55\":2,\"59\":1}}],[\"es5\",{\"0\":{\"58\":1,\"131\":1},\"2\":{\"58\":1,\"131\":1},\"3\":{\"43\":1,\"59\":1}}],[\"em\",{\"3\":{\"15\":1}}],[\"empty\",{\"3\":{\"13\":1}}],[\"媒体查询的使用场景\",{\"0\":{\"31\":1},\"2\":{\"31\":1}}],[\"媒体查询的语法如下\",{\"3\":{\"30\":1}}],[\"媒体查询表达式\",{\"3\":{\"30\":1}}],[\"媒体查询就是一种检测浏览器或设备特性的方法\",{\"3\":{\"30\":1}}],[\"媒体查询\",{\"0\":{\"30\":1},\"2\":{\"30\":1},\"3\":{\"29\":1}}],[\"一直往下查找\",{\"3\":{\"129\":1}}],[\"一直往外查找\",{\"3\":{\"128\":1}}],[\"一直找到根元素为止\",{\"3\":{\"126\":1}}],[\"一直找到目标元素\",{\"3\":{\"126\":1}}],[\"一直会阻塞渲染\",{\"3\":{\"29\":1}}],[\"一个大量数据的列表\",{\"3\":{\"124\":1}}],[\"一方是string\",{\"3\":{\"108\":1}}],[\"一一对应\",{\"3\":{\"52\":1,\"53\":1}}],[\"一般不需要使用extends\",{\"3\":{\"160\":1}}],[\"一般需要使用extends\",{\"3\":{\"160\":1}}],[\"一般都是先匹配网络号\",{\"3\":{\"139\":1}}],[\"一般都是将他直接缓存在浏览器的缓存目录下\",{\"3\":{\"33\":1}}],[\"一般使用slice\",{\"3\":{\"91\":1}}],[\"一般typeof\",{\"3\":{\"78\":1}}],[\"一般会简写\",{\"3\":{\"38\":1}}],[\"一般会在场景题里面出现\",{\"3\":{\"5\":1}}],[\"一般情况下\",{\"3\":{\"15\":2,\"124\":1}}],[\"宽度至少是40em\",{\"3\":{\"29\":1,\"30\":4}}],[\"宽高度\",{\"3\":{\"13\":1}}],[\"mousedown\",{\"3\":{\"124\":1}}],[\"module\",{\"0\":{\"62\":1},\"2\":{\"62\":1}}],[\"myage\",{\"3\":{\"53\":2}}],[\"myname\",{\"3\":{\"53\":2}}],[\"my\",{\"3\":{\"50\":1,\"58\":1,\"59\":1,\"60\":2,\"131\":2,\"132\":1}}],[\"m\",{\"3\":{\"50\":2,\"52\":1,\"55\":2,\"58\":2,\"59\":2,\"60\":8,\"131\":5,\"132\":3}}],[\"mac头部包含源mac地址和目的mac地址\",{\"3\":{\"147\":1}}],[\"mac地址\",{\"0\":{\"147\":1},\"2\":{\"147\":1}}],[\"match\",{\"3\":{\"103\":1}}],[\"math\",{\"3\":{\"64\":1,\"67\":7,\"71\":4}}],[\"map\",{\"3\":{\"55\":1,\"94\":1}}],[\"main\",{\"3\":{\"38\":1}}],[\"max\",{\"3\":{\"30\":2,\"71\":4}}],[\"margin塌陷问题\",{\"3\":{\"21\":1}}],[\"margin\",{\"3\":{\"13\":1}}],[\"medium\",{\"3\":{\"40\":1}}],[\"mediatype\",{\"3\":{\"30\":1}}],[\"media\",{\"3\":{\"30\":5,\"31\":1}}],[\"media=\",{\"3\":{\"29\":2}}],[\"meidatype\",{\"3\":{\"30\":1}}],[\"min\",{\"3\":{\"29\":1,\"30\":3,\"71\":4}}],[\"标准事件模型就是指在ie9及其以上版本中使用的事件模型\",{\"3\":{\"129\":1}}],[\"标准事件模型\",{\"0\":{\"129\":1},\"2\":{\"129\":1},\"3\":{\"127\":1}}],[\"标准盒模型其实就是width就是内容的宽度\",{\"3\":{\"8\":1}}],[\"标准盒模型\",{\"0\":{\"8\":1},\"2\":{\"8\":1},\"3\":{\"7\":2}}],[\"标准盒模型和\",{\"3\":{\"7\":1}}],[\"标识\",{\"3\":{\"50\":1}}],[\"标签中\",{\"2\":{\"28\":1}}],[\"将数据包转发到目的主机\",{\"3\":{\"149\":1}}],[\"将数组转化为字符串\",{\"3\":{\"95\":2}}],[\"将数组进行反转\",{\"3\":{\"93\":1}}],[\"将封装好的数据包传输到网络层\",{\"3\":{\"145\":1}}],[\"将属性变为实例属性\",{\"3\":{\"131\":1}}],[\"将父类的属性添加到子类的实例上\",{\"3\":{\"131\":1}}],[\"将对象转换为字符串\",{\"3\":{\"115\":1}}],[\"将null转化为0\",{\"3\":{\"106\":1}}],[\"将undefined转化为nan\",{\"3\":{\"106\":1}}],[\"将字符串按照separator分割成数组\",{\"3\":{\"102\":1}}],[\"将字符串转化为数组的方法\",{\"3\":{\"102\":1}}],[\"将字符串转化为小写\",{\"3\":{\"100\":1}}],[\"将伪数组转为真正的数组\",{\"3\":{\"55\":1}}],[\"将一个数组转为用逗号分隔的参数序列\",{\"3\":{\"55\":1}}],[\"将css放在head标签中\",{\"3\":{\"28\":1}}],[\"将\",{\"0\":{\"28\":1},\"2\":{\"28\":1}}],[\"将fn1的返回值给了fn3\",{\"3\":{\"4\":1}}],[\"就发送请求到dns服务器\",{\"3\":{\"144\":1}}],[\"就发送请求到服务器\",{\"3\":{\"143\":1}}],[\"就直接从缓存中获取\",{\"3\":{\"144\":1}}],[\"就直接从缓存中获取资源\",{\"3\":{\"143\":1}}],[\"就直接返回\",{\"3\":{\"114\":1}}],[\"就可以进行数据传输了\",{\"3\":{\"145\":1}}],[\"就可以获取到目的网络的ip地址\",{\"3\":{\"144\":1}}],[\"就可以管理某一类型的所有事件\",{\"3\":{\"124\":1}}],[\"就可以确保css能够正确的渲染dom树\",{\"3\":{\"26\":1}}],[\"就返回true\",{\"3\":{\"94\":1}}],[\"就是要找到目标地址的子网\",{\"3\":{\"139\":1}}],[\"就是对于date\",{\"3\":{\"114\":1}}],[\"就是对于父元素的属性\",{\"3\":{\"37\":1}}],[\"就是循环引用的问题\",{\"3\":{\"114\":1}}],[\"就是它只管一层\",{\"3\":{\"112\":1}}],[\"就是如果两个值类型不同\",{\"3\":{\"108\":1}}],[\"就是\",{\"3\":{\"67\":1}}],[\"就是构造函数\",{\"3\":{\"59\":1}}],[\"就会出现\",{\"3\":{\"126\":1}}],[\"就会从父级作用域中查找\",{\"3\":{\"121\":1}}],[\"就会从父级作用域查找\",{\"3\":{\"120\":1}}],[\"就会报错\",{\"3\":{\"120\":1,\"121\":1}}],[\"就会造成死循环\",{\"3\":{\"114\":1}}],[\"就会影响到另一个对象\",{\"3\":{\"112\":1}}],[\"就会停止dom树的生成\",{\"3\":{\"26\":1}}],[\"就会生成dom树\",{\"3\":{\"26\":1}}],[\"就会导致内存泄漏\",{\"3\":{\"2\":1}}],[\"再匹配主机号\",{\"3\":{\"139\":1}}],[\"再将字符串转换为对象\",{\"3\":{\"115\":1}}],[\"再进行值的比较\",{\"3\":{\"109\":1,\"110\":1}}],[\"再进行比较\",{\"3\":{\"108\":3,\"110\":1}}],[\"再举一个例子\",{\"3\":{\"49\":1}}],[\"再去渲染dom树\",{\"3\":{\"26\":1}}],[\"再继续生成dom树\",{\"3\":{\"26\":1}}],[\"再继续解析html\",{\"3\":{\"25\":1}}],[\"等待事件冒泡\",{\"3\":{\"124\":1}}],[\"等待状态\",{\"3\":{\"65\":1}}],[\"等于==属于比较运算符\",{\"3\":{\"108\":1}}],[\"等于vs完全等于\",{\"1\":{\"108\":1,\"109\":1,\"110\":1,\"111\":1}}],[\"等于\",{\"0\":{\"108\":1},\"2\":{\"108\":1},\"3\":{\"93\":1}}],[\"等\",{\"3\":{\"76\":1}}],[\"等css加载完毕后\",{\"3\":{\"25\":1,\"26\":1}}],[\"等到执行栈中的代码执行完毕后\",{\"3\":{\"5\":1}}],[\"渲染阻塞会阻塞dom树的构建\",{\"3\":{\"25\":1}}],[\"渲染阻塞\",{\"0\":{\"25\":1,\"26\":1,\"27\":1},\"2\":{\"25\":1,\"26\":1,\"27\":1}}],[\"什么是泛型\",{\"0\":{\"154\":1},\"2\":{\"154\":1}}],[\"什么是事件委托\",{\"3\":{\"124\":1}}],[\"什么是临时死亡区\",{\"3\":{\"46\":1}}],[\"什么是变量提升\",{\"3\":{\"46\":1}}],[\"什么是作用域\",{\"3\":{\"45\":1}}],[\"什么是\",{\"0\":{\"25\":1},\"2\":{\"25\":1}}],[\"什么是bfc\",{\"0\":{\"19\":1},\"2\":{\"19\":1}}],[\"6cfad872\",{\"0\":{\"134\":1}}],[\"66e2f8be\",{\"0\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1}}],[\"6\",{\"3\":{\"45\":2,\"55\":2,\"71\":4}}],[\"600px\",{\"3\":{\"40\":1}}],[\"60em\",{\"3\":{\"30\":2}}],[\"6237d1b1\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1}}],[\"6e32d892\",{\"0\":{\"17\":1,\"18\":1}}],[\"743faa02\",{\"0\":{\"163\":1}}],[\"74376a60\",{\"0\":{\"69\":1}}],[\"74368525\",{\"0\":{\"24\":1}}],[\"7\",{\"3\":{\"45\":2,\"67\":2}}],[\"75c3ec6e\",{\"0\":{\"15\":1,\"16\":1}}],[\"清除浮动\",{\"3\":{\"22\":1}}],[\"防止margin塌陷\",{\"3\":{\"22\":1}}],[\"浮动元素会参与高度计算\",{\"3\":{\"21\":1}}],[\"浮动元素\",{\"3\":{\"20\":1}}],[\"根域名服务器会返回一个ip地址\",{\"3\":{\"144\":1}}],[\"根元素或包含根元素的元素<html>\",{\"3\":{\"20\":1}}],[\"根据不同的设备\",{\"3\":{\"31\":1}}],[\"根据不同的设备特性\",{\"3\":{\"31\":1}}],[\"根据根元素html的font\",{\"3\":{\"15\":1}}],[\"根据当前盒子的父元素的font\",{\"3\":{\"15\":1}}],[\"根据上述代码进行分析\",{\"3\":{\"4\":1}}],[\"使其长度为targetlength\",{\"3\":{\"100\":1}}],[\"使内外元素的定位不会相互影响\",{\"3\":{\"19\":1}}],[\"使用call\",{\"3\":{\"131\":1}}],[\"使用的是addeventlistener这种方式绑定事件\",{\"3\":{\"129\":1}}],[\"使用的是onclick这种方式绑定事件\",{\"3\":{\"128\":1}}],[\"使用反引号\",{\"3\":{\"98\":1}}],[\"使用剩余运算符\",{\"3\":{\"54\":1}}],[\"使用省略号\",{\"3\":{\"52\":1,\"53\":1}}],[\"使用preload和prefetch\",{\"0\":{\"33\":1}}],[\"使用内联样式\",{\"0\":{\"32\":1},\"2\":{\"32\":1}}],[\"使用媒体查询\",{\"0\":{\"29\":1},\"2\":{\"29\":1}}],[\"使用abcd法则计算权重\",{\"3\":{\"12\":1}}],[\"使用定时器时\",{\"3\":{\"3\":1}}],[\"使用闭包时\",{\"3\":{\"3\":1}}],[\"使用\",{\"2\":{\"33\":1},\"3\":{\"3\":1,\"60\":1}}],[\"使用全局变量\",{\"3\":{\"2\":1}}],[\"让处于\",{\"3\":{\"19\":1}}],[\"即发送方会向网络中的所有主机发送请求\",{\"3\":{\"147\":1}}],[\"即先向根域名服务器发送请求\",{\"3\":{\"144\":1}}],[\"即在冒泡阶段执行事件处理程序\",{\"3\":{\"129\":1}}],[\"即如果空间不足\",{\"3\":{\"38\":1}}],[\"即如果存在剩余空间\",{\"3\":{\"38\":1}}],[\"即块级格式化上下文\",{\"3\":{\"19\":1}}],[\"即使创建它的上下文已经销毁\",{\"3\":{\"4\":1}}],[\"设置别名\",{\"3\":{\"53\":1}}],[\"设置默认值\",{\"3\":{\"52\":1,\"53\":1,\"54\":1}}],[\"设置打印样式\",{\"3\":{\"31\":1}}],[\"设置元素不显示\",{\"3\":{\"18\":1}}],[\"设置元素高度为\",{\"3\":{\"18\":1}}],[\"设置绝对定位\",{\"3\":{\"18\":1}}],[\"设置z\",{\"3\":{\"18\":1}}],[\"设置透明度为\",{\"3\":{\"18\":1}}],[\"设置可见性为隐藏\",{\"3\":{\"18\":1}}],[\"z\",{\"3\":{\"17\":1,\"18\":1}}],[\"onclick\",{\"3\":{\"128\":4}}],[\"only\",{\"3\":{\"30\":1}}],[\"of循环\",{\"3\":{\"55\":1}}],[\"o\",{\"3\":{\"52\":1}}],[\"old\",{\"3\":{\"50\":2,\"58\":2,\"59\":2,\"60\":4,\"131\":5,\"132\":3}}],[\"obj1\",{\"3\":{\"70\":5,\"71\":6}}],[\"obj2\",{\"3\":{\"55\":1,\"70\":4,\"71\":6}}],[\"obj\",{\"3\":{\"49\":9,\"53\":5,\"55\":4,\"70\":8,\"108\":1,\"113\":1,\"114\":3,\"115\":2}}],[\"object\",{\"0\":{\"81\":1},\"2\":{\"81\":1},\"3\":{\"60\":2,\"78\":1,\"106\":2,\"113\":1},\"4\":{\"0\":2,\"6\":2,\"10\":2,\"14\":2,\"16\":2,\"18\":2,\"23\":2,\"24\":2,\"34\":2,\"41\":2,\"68\":2,\"69\":2,\"72\":2,\"87\":2,\"96\":2,\"104\":2,\"107\":2,\"111\":2,\"117\":2,\"118\":2,\"130\":2,\"133\":2,\"134\":2,\"135\":2,\"142\":2,\"151\":2,\"152\":2,\"153\":2,\"162\":2,\"163\":2}}],[\"order\",{\"3\":{\"38\":1}}],[\"overflow\",{\"3\":{\"20\":1}}],[\"opcitiy\",{\"3\":{\"17\":1,\"18\":1}}],[\"否则返回false\",{\"3\":{\"101\":1}}],[\"否则返回\",{\"3\":{\"101\":1}}],[\"否\",{\"3\":{\"17\":10}}],[\"方法返回的promise对象就会变为resolved状态\",{\"3\":{\"67\":1}}],[\"方法返回的promise对象就会变为rejected状态\",{\"3\":{\"67\":2}}],[\"方法返回的promise对象才会变为resolved状态\",{\"3\":{\"67\":1}}],[\"方法\",{\"3\":{\"17\":1,\"59\":1,\"60\":1,\"64\":1,\"67\":2,\"71\":2,\"91\":1,\"106\":1}}],[\"区别\",{\"0\":{\"17\":1},\"2\":{\"17\":1}}],[\"视窗高度和视窗宽度\",{\"3\":{\"15\":1}}],[\"百分比\",{\"3\":{\"15\":1}}],[\"像素点\",{\"3\":{\"15\":1}}],[\"单位\",{\"0\":{\"15\":1},\"2\":{\"15\":1}}],[\"背景类\",{\"3\":{\"13\":1}}],[\"边框\",{\"3\":{\"13\":1}}],[\"边框和外边距\",{\"3\":{\"7\":1}}],[\"外边距\",{\"3\":{\"13\":1}}],[\"垂直对齐方式\",{\"3\":{\"13\":1}}],[\"其他都是转为数字\",{\"3\":{\"106\":1}}],[\"其他情况都是转化为true\",{\"3\":{\"76\":1}}],[\"其他的都是可以继承的\",{\"3\":{\"13\":1}}],[\"其实就是进行正则匹配的方法\",{\"3\":{\"103\":1}}],[\"其实可以将字符串看作是一种string\",{\"3\":{\"97\":1}}],[\"其实日常开发中\",{\"3\":{\"17\":1}}],[\"其实只要记录一些比较特殊的不可继承属性就可以了\",{\"3\":{\"13\":1}}],[\"列表不是很大\",{\"3\":{\"124\":1}}],[\"列表项标记的图像\",{\"3\":{\"13\":1}}],[\"列表项标记的位置\",{\"3\":{\"13\":1}}],[\"列表项标记的类型\",{\"3\":{\"13\":1}}],[\"列表类\",{\"3\":{\"13\":1}}],[\"是为了更好的复用\",{\"3\":{\"160\":1}}],[\"是一种广播的方式\",{\"3\":{\"147\":1}}],[\"是一个一个的传递的\",{\"3\":{\"71\":1}}],[\"是一个独立的渲染区域\",{\"3\":{\"19\":1}}],[\"是一个相对单位\",{\"3\":{\"15\":1}}],[\"是一个闭包\",{\"3\":{\"4\":1}}],[\"是否丢失\",{\"3\":{\"137\":1}}],[\"是否重复\",{\"3\":{\"137\":1}}],[\"是否在捕获阶段执行事件处理程序\",{\"3\":{\"129\":1}}],[\"是否显示表格中的空单元格\",{\"3\":{\"13\":1}}],[\"是resolve或reject的回调函数\",{\"3\":{\"66\":1}}],[\"是reject的回调函数\",{\"3\":{\"66\":1}}],[\"是类的方法\",{\"3\":{\"59\":1}}],[\"是window调用的\",{\"3\":{\"49\":1}}],[\"是\",{\"3\":{\"17\":8}}],[\"是相对于父元素的宽度来计算的\",{\"3\":{\"15\":1}}],[\"元素不占据空间\",{\"3\":{\"18\":2}}],[\"元素可见\",{\"3\":{\"17\":1}}],[\"元素可见性\",{\"3\":{\"13\":1}}],[\"元素可点击\",{\"3\":{\"17\":1}}],[\"元素占据空间\",{\"3\":{\"17\":1}}],[\"元素是否可见\",{\"3\":{\"13\":1}}],[\"元素选择器\",{\"3\":{\"11\":1,\"12\":1}}],[\"首行缩进\",{\"3\":{\"13\":1}}],[\"文本装饰\",{\"3\":{\"13\":1}}],[\"文本对齐方式\",{\"3\":{\"13\":1}}],[\"文本颜色\",{\"3\":{\"13\":1}}],[\"文本类\",{\"3\":{\"13\":2}}],[\"grade\",{\"3\":{\"131\":9,\"132\":6}}],[\"grow\",{\"3\":{\"38\":2}}],[\"getelementbyid\",{\"3\":{\"124\":1,\"128\":4,\"129\":4}}],[\"getage\",{\"3\":{\"5\":4}}],[\"g\",{\"3\":{\"52\":2}}],[\"global\",{\"3\":{\"12\":1}}],[\"权重为1\",{\"3\":{\"12\":1}}],[\"权重为10\",{\"3\":{\"12\":1}}],[\"权重为100\",{\"3\":{\"12\":1}}],[\"权重为1000\",{\"3\":{\"12\":1}}],[\"权重越高\",{\"3\":{\"12\":1}}],[\"代码实现\",{\"3\":{\"112\":1,\"114\":1}}],[\"代码会变为\",{\"3\":{\"5\":1}}],[\"代表元素选择器\",{\"3\":{\"12\":1}}],[\"代表类选择器\",{\"3\":{\"12\":1}}],[\"代表\",{\"3\":{\"12\":1}}],[\"代表内联样式\",{\"3\":{\"12\":1}}],[\"优先级越高\",{\"3\":{\"12\":1}}],[\"优先级\",{\"0\":{\"12\":1},\"2\":{\"12\":1}}],[\"他们的参数\",{\"3\":{\"71\":1}}],[\"他会选择所有的div下的紧邻的p元素\",{\"3\":{\"11\":1}}],[\"他会选择所有的div下的p元素\",{\"3\":{\"11\":1}}],[\"他的变量还在内存中被fn2引用着\",{\"3\":{\"4\":1}}],[\"dns解析\",{\"0\":{\"144\":1},\"2\":{\"144\":1}}],[\"dns等\",{\"3\":{\"136\":1}}],[\"d4d1ccf8\",{\"0\":{\"131\":1,\"132\":1,\"133\":1}}],[\"date\",{\"0\":{\"84\":1},\"2\":{\"84\":1}}],[\"data\",{\"3\":{\"64\":2,\"67\":6}}],[\"document\",{\"3\":{\"55\":1,\"124\":1,\"128\":4,\"129\":4}}],[\"deletecount\",{\"3\":{\"89\":1,\"90\":1}}],[\"delaytime\",{\"3\":{\"5\":2}}],[\"delay\",{\"3\":{\"5\":2}}],[\"decoration\",{\"3\":{\"13\":1}}],[\"direction和flex\",{\"3\":{\"37\":1}}],[\"direction\",{\"3\":{\"37\":1}}],[\"display\",{\"3\":{\"13\":1,\"17\":1,\"18\":1,\"20\":1,\"40\":1}}],[\"div4\",{\"3\":{\"128\":5,\"129\":5}}],[\"div>\",{\"3\":{\"128\":4,\"129\":4}}],[\"div3\",{\"3\":{\"128\":5,\"129\":5}}],[\"div2\",{\"3\":{\"128\":6,\"129\":6}}],[\"div1\",{\"3\":{\"128\":6,\"129\":6}}],[\"divs\",{\"3\":{\"55\":2}}],[\"div\",{\"3\":{\"11\":2,\"55\":1}}],[\"d\",{\"3\":{\"12\":2,\"114\":1}}],[\"群组选择器\",{\"3\":{\"11\":1}}],[\"兄弟选择器\",{\"3\":{\"11\":2}}],[\"><\",{\"3\":{\"128\":2,\"129\":2}}],[\">=\",{\"3\":{\"30\":2,\"106\":1}}],[\">\",{\"3\":{\"11\":1,\"12\":3,\"29\":7,\"33\":4,\"55\":1,\"64\":1,\"67\":7,\"106\":1,\"121\":3,\"123\":3,\"124\":1,\"128\":2,\"129\":2}}],[\"通配符选择器\",{\"3\":{\"11\":1}}],[\"通过调用super可以让子类访问到父类的方法和属性\",{\"3\":{\"132\":1}}],[\"通过new关键字创建一个promise对象\",{\"3\":{\"64\":1}}],[\"通过apply将参数传递给func\",{\"3\":{\"5\":1}}],[\"通过另一个函数访问这个函数的局部变量\",{\"3\":{\"4\":1}}],[\"t将传入的对象的属性名联合成一个联合类型\",{\"3\":{\"161\":1}}],[\"t\",{\"3\":{\"156\":2,\"157\":2,\"158\":4,\"159\":2,\"160\":2,\"161\":2}}],[\"ts的泛型使得ts\",{\"3\":{\"154\":1}}],[\"tcp会将消息体分成多个数据包\",{\"3\":{\"145\":1}}],[\"tcp在传输数据之前\",{\"3\":{\"145\":1}}],[\"tcp连接\",{\"0\":{\"145\":1},\"2\":{\"145\":1}}],[\"tcp段的由来\",{\"0\":{\"138\":1},\"2\":{\"138\":1}}],[\"tcp提供面向连接的\",{\"3\":{\"137\":1}}],[\"tcp和udp\",{\"3\":{\"137\":1}}],[\"tcp\",{\"1\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1}}],[\"target\",{\"3\":{\"124\":1}}],[\"targetlength\",{\"3\":{\"100\":2}}],[\"table\",{\"3\":{\"13\":1}}],[\"touppercase\",{\"3\":{\"100\":1}}],[\"tolowercase\",{\"3\":{\"100\":1}}],[\"tostring\",{\"3\":{\"95\":1,\"105\":1}}],[\"trimright\",{\"3\":{\"100\":1}}],[\"trimleft\",{\"3\":{\"100\":1}}],[\"trim\",{\"3\":{\"100\":1}}],[\"true\",{\"3\":{\"74\":1,\"78\":1,\"106\":1,\"108\":1,\"109\":6,\"110\":1}}],[\"then方法接收两个参数\",{\"3\":{\"64\":1}}],[\"then\",{\"3\":{\"64\":2,\"66\":1,\"67\":3}}],[\"this会指向调用它的对象\",{\"3\":{\"72\":1}}],[\"this指向的是\",{\"3\":{\"70\":2}}],[\"this指向的是函数定义时所在的对象\",{\"3\":{\"49\":1}}],[\"this指向问题\",{\"1\":{\"70\":1,\"71\":1,\"72\":1}}],[\"this的指向类型\",{\"0\":{\"70\":1}}],[\"this的指向问题\",{\"3\":{\"49\":1}}],[\"this\",{\"2\":{\"70\":1},\"3\":{\"5\":3,\"49\":9,\"58\":4,\"59\":4,\"60\":8,\"70\":5,\"71\":4,\"121\":2,\"131\":17,\"132\":9,\"158\":2}}],[\"timer是window的方法\",{\"3\":{\"49\":1}}],[\"timer\",{\"3\":{\"49\":3}}],[\"typescript篇\",{\"1\":{\"153\":1}}],[\"typeerror\",{\"3\":{\"120\":1,\"121\":1}}],[\"typeof\",{\"3\":{\"77\":1}}],[\"type\",{\"3\":{\"13\":1,\"160\":1}}],[\"type=\",{\"3\":{\"11\":1}}],[\"text\",{\"3\":{\"11\":1,\"13\":3}}],[\"http\",{\"3\":{\"135\":1}}],[\"http基本概念\",{\"1\":{\"134\":1}}],[\"hi\",{\"3\":{\"132\":1}}],[\"hidden\",{\"3\":{\"17\":1,\"18\":1}}],[\"h\",{\"3\":{\"52\":1}}],[\"href=\",{\"3\":{\"29\":3,\"33\":2}}],[\"hello\",{\"3\":{\"132\":2}}],[\"head\",{\"2\":{\"28\":1}}],[\"height等\",{\"3\":{\"30\":1}}],[\"height\",{\"3\":{\"8\":1,\"9\":1,\"13\":1,\"17\":1,\"18\":1,\"40\":3}}],[\"hover\",{\"3\":{\"11\":1}}],[\"伪类选择器\",{\"3\":{\"11\":1,\"12\":1}}],[\"伪元素选择器\",{\"3\":{\"11\":1,\"12\":1}}],[\"类的继承\",{\"0\":{\"61\":1},\"1\":{\"131\":1,\"132\":1,\"133\":1},\"2\":{\"61\":1}}],[\"类\",{\"0\":{\"56\":1},\"2\":{\"56\":1}}],[\"类型转化机制\",{\"1\":{\"105\":1,\"106\":1,\"107\":1}}],[\"类型\",{\"3\":{\"52\":1,\"53\":1}}],[\"类选择器\",{\"3\":{\"11\":2}}],[\"类似\",{\"3\":{\"11\":6}}],[\"类似div\",{\"3\":{\"11\":5}}],[\"普通元素选择器\",{\"3\":{\"11\":1}}],[\"你设置多大的width和height\",{\"3\":{\"9\":1}}],[\"怪异盒模型\",{\"0\":{\"9\":1},\"2\":{\"9\":1}}],[\"盒子类\",{\"3\":{\"13\":1}}],[\"盒子就是多大\",{\"3\":{\"9\":1}}],[\"盒子的总高度是height+margin\",{\"3\":{\"9\":1}}],[\"盒子的总高度是height\",{\"3\":{\"8\":1}}],[\"盒子的总宽度是width+margin\",{\"3\":{\"9\":1}}],[\"盒子的总宽度是width\",{\"3\":{\"8\":1}}],[\"盒子实际宽高\",{\"3\":{\"8\":1}}],[\"盒模型图例\",{\"3\":{\"9\":1}}],[\"盒模型是一个矩形的盒子\",{\"3\":{\"7\":1}}],[\"盒模型\",{\"0\":{\"7\":1},\"2\":{\"7\":1},\"3\":{\"7\":2}}],[\"不预先指定具体的类型\",{\"3\":{\"154\":2}}],[\"不支持捕获阶段\",{\"3\":{\"128\":1}}],[\"不是作用域的地方\",{\"3\":{\"121\":1}}],[\"不接受其他类型的值作为键名\",{\"3\":{\"114\":1}}],[\"不需要再次拷贝\",{\"3\":{\"114\":1}}],[\"不需要额外的变量\",{\"3\":{\"71\":1}}],[\"不可以修改\",{\"3\":{\"97\":1}}],[\"不会重复\",{\"3\":{\"137\":1}}],[\"不会乱序\",{\"3\":{\"137\":1}}],[\"不会进行隐式类型转换\",{\"3\":{\"109\":1}}],[\"不会改变数组本身\",{\"3\":{\"89\":1,\"90\":1}}],[\"不会存在外边距合并\",{\"3\":{\"21\":1}}],[\"不使用apply时\",{\"3\":{\"71\":1}}],[\"不使用闭包情况下\",{\"3\":{\"5\":1}}],[\"不管promise对象的状态是resolved还是rejected\",{\"3\":{\"66\":1}}],[\"不管你有没有设置padding和border\",{\"3\":{\"9\":1}}],[\"不要加上关键词function\",{\"3\":{\"59\":1}}],[\"不放大\",{\"3\":{\"38\":1}}],[\"不缩小\",{\"3\":{\"38\":2}}],[\"不同分辨率\",{\"3\":{\"31\":1}}],[\"不为visible\",{\"3\":{\"20\":1}}],[\"不为none\",{\"3\":{\"20\":1}}],[\"不包括end\",{\"3\":{\"90\":1}}],[\"不包括嵌套的p元素\",{\"3\":{\"11\":1}}],[\"不包含padding和border\",{\"3\":{\"8\":1}}],[\"smtp\",{\"3\":{\"136\":1}}],[\"s1\",{\"3\":{\"131\":6,\"132\":2}}],[\"split\",{\"3\":{\"102\":1}}],[\"splice\",{\"3\":{\"89\":1,\"90\":1}}],[\"super可以调用原型方法和静态方法\",{\"3\":{\"132\":1}}],[\"super关键字的作用\",{\"3\":{\"132\":1}}],[\"super\",{\"3\":{\"132\":3}}],[\"substring\",{\"3\":{\"99\":1}}],[\"substr\",{\"3\":{\"99\":1}}],[\"summer\",{\"3\":{\"49\":3,\"50\":2,\"53\":4,\"54\":6,\"55\":3,\"58\":2,\"59\":2,\"60\":4,\"70\":7,\"71\":8,\"131\":5,\"132\":2}}],[\"some\",{\"3\":{\"94\":1}}],[\"sort\",{\"3\":{\"71\":1,\"93\":1}}],[\"slice\",{\"3\":{\"90\":1,\"99\":1}}],[\"shift\",{\"3\":{\"89\":1}}],[\"shrink和flex\",{\"3\":{\"38\":1}}],[\"shrink\",{\"3\":{\"38\":1}}],[\"symbol\",{\"0\":{\"79\":1},\"2\":{\"79\":1}}],[\"sayhi\",{\"3\":{\"132\":1}}],[\"sayname\",{\"3\":{\"70\":7,\"71\":8}}],[\"say\",{\"3\":{\"58\":2,\"59\":2,\"60\":4,\"131\":6,\"132\":4}}],[\"s\",{\"3\":{\"55\":1,\"143\":1}}],[\"static\",{\"3\":{\"132\":1}}],[\"start+length\",{\"3\":{\"99\":1}}],[\"start\",{\"3\":{\"89\":1,\"90\":2,\"99\":6}}],[\"student\",{\"3\":{\"131\":8,\"132\":3}}],[\"stringify\",{\"3\":{\"115\":1}}],[\"string\",{\"0\":{\"75\":1},\"2\":{\"75\":1},\"3\":{\"161\":1}}],[\"str\",{\"3\":{\"50\":2,\"55\":2}}],[\"stylesheet\",{\"3\":{\"29\":3}}],[\"style\",{\"3\":{\"13\":5,\"29\":3,\"33\":4}}],[\"sex\",{\"3\":{\"157\":1}}],[\"search\",{\"3\":{\"103\":1}}],[\"separator\",{\"3\":{\"102\":1}}],[\"self\",{\"3\":{\"38\":1}}],[\"set\",{\"3\":{\"55\":1}}],[\"setage\",{\"3\":{\"5\":4}}],[\"settimeout是window的方法\",{\"3\":{\"49\":1}}],[\"settimeout\",{\"3\":{\"5\":6,\"49\":4,\"64\":1,\"67\":7}}],[\"side\",{\"3\":{\"13\":1}}],[\"size来计算\",{\"3\":{\"15\":2}}],[\"size\",{\"3\":{\"13\":1,\"38\":1}}],[\"sizing\",{\"3\":{\"7\":2}}],[\"sizing来进行设置\",{\"3\":{\"7\":1}}],[\"wd=搜索内容的形式\",{\"3\":{\"143\":1}}],[\"www\",{\"3\":{\"143\":1}}],[\"while\",{\"3\":{\"106\":1}}],[\"winter\",{\"3\":{\"70\":3,\"71\":6}}],[\"window\",{\"3\":{\"49\":3,\"70\":3}}],[\"width\",{\"3\":{\"7\":2,\"8\":1,\"9\":1,\"13\":2,\"29\":1,\"30\":8,\"40\":3}}],[\"wrap的简写\",{\"3\":{\"37\":1}}],[\"wrap\",{\"3\":{\"37\":1}}],[\"weight\",{\"3\":{\"13\":1}}],[\"weakmap属于弱引用\",{\"3\":{\"114\":1}}],[\"weakmap只接受对象作为键名\",{\"3\":{\"114\":1}}],[\"weakmap也会被回收\",{\"3\":{\"114\":1}}],[\"weakmap\",{\"3\":{\"3\":1}}],[\"中哪些数据结构具有可迭代性\",{\"3\":{\"55\":1}}],[\"中\",{\"3\":{\"55\":1}}],[\"中间自适应\",{\"3\":{\"40\":1}}],[\"中有一些属性是可以继承的\",{\"3\":{\"13\":1}}],[\"中的优先级是根据选择器的权重来决定的\",{\"3\":{\"12\":1}}],[\"中的变量\",{\"3\":{\"4\":1}}],[\"中选择器主要分为以下几种\",{\"3\":{\"11\":1}}],[\"中盒模型分为两种\",{\"3\":{\"7\":1}}],[\"内部的元素与外部的元素相互隔离\",{\"3\":{\"19\":1}}],[\"内联样式\",{\"3\":{\"12\":1}}],[\"内边距\",{\"3\":{\"7\":1,\"13\":1}}],[\"内存泄漏\",{\"1\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1}}],[\"它传输的单位是比特\",{\"3\":{\"141\":1}}],[\"它的作用是将数据从一台主机传输到另一台主机\",{\"3\":{\"141\":1}}],[\"它的作用是将网络层传下来的ip数据报封装成帧\",{\"3\":{\"140\":1}}],[\"它的值就是undefined\",{\"3\":{\"78\":1}}],[\"它不保证数据传输的可靠性\",{\"3\":{\"137\":1}}],[\"它能够保证数据从一端传到另一端\",{\"3\":{\"137\":1}}],[\"它其实就是变量声明\",{\"3\":{\"78\":1}}],[\"它是基于原型的继承\",{\"3\":{\"58\":1}}],[\"它是一种针对数组或者对象进行模式匹配\",{\"3\":{\"51\":1}}],[\"它好比是\",{\"3\":{\"55\":1}}],[\"它可以当作普通字符串使用\",{\"3\":{\"50\":1}}],[\"它包含了元素的内容\",{\"3\":{\"7\":1}}],[\"它仍然存在\",{\"3\":{\"4\":1}}],[\"click\",{\"3\":{\"124\":2,\"129\":4}}],[\"clonedeep\",{\"3\":{\"115\":1}}],[\"class就是构造函数的语法糖\",{\"3\":{\"59\":1}}],[\"class\",{\"3\":{\"11\":1,\"12\":1,\"59\":1,\"60\":2,\"132\":4,\"158\":1}}],[\"charat\",{\"3\":{\"101\":1}}],[\"cur为数组的第二个元素\",{\"3\":{\"94\":1}}],[\"cur\",{\"3\":{\"94\":1}}],[\"call的参数是一个一个传递的\",{\"3\":{\"71\":1}}],[\"call和apply的区别在于\",{\"3\":{\"71\":1}}],[\"call和apply都是改变this的指向\",{\"3\":{\"71\":1}}],[\"call和apply和bind的区别\",{\"0\":{\"71\":1},\"3\":{\"70\":1}}],[\"call\",{\"2\":{\"71\":1},\"3\":{\"70\":4,\"71\":4,\"72\":1,\"131\":2,\"132\":1}}],[\"catch\",{\"3\":{\"66\":1}}],[\"caption\",{\"3\":{\"13\":1}}],[\"cells\",{\"3\":{\"13\":1}}],[\"com\",{\"3\":{\"143\":1}}],[\"compare\",{\"3\":{\"109\":1}}],[\"count\",{\"3\":{\"100\":1}}],[\"code\",{\"3\":{\"30\":1}}],[\"collapse\",{\"3\":{\"13\":1}}],[\"color\",{\"3\":{\"13\":2,\"40\":4}}],[\"concat\",{\"3\":{\"89\":1,\"98\":1,\"113\":1}}],[\"context\",{\"3\":{\"19\":1}}],[\"content\",{\"3\":{\"7\":3,\"8\":2,\"9\":2,\"37\":2,\"40\":1}}],[\"console\",{\"3\":{\"4\":2,\"5\":7,\"45\":12,\"46\":6,\"47\":3,\"48\":3,\"49\":9,\"50\":1,\"52\":3,\"53\":3,\"54\":4,\"55\":4,\"58\":1,\"59\":1,\"60\":4,\"64\":2,\"67\":6,\"70\":4,\"71\":10,\"121\":1,\"123\":1,\"124\":1,\"128\":4,\"129\":4,\"131\":3,\"132\":4,\"159\":1}}],[\"constructor\",{\"3\":{\"59\":2,\"60\":2,\"132\":4,\"158\":1}}],[\"const声明的变量不会被提升到代码的最前面\",{\"3\":{\"46\":1}}],[\"const\",{\"0\":{\"42\":1},\"2\":{\"42\":1},\"3\":{\"3\":1,\"45\":3,\"46\":1,\"47\":2,\"48\":1,\"49\":2,\"50\":3,\"52\":6,\"53\":5,\"55\":13,\"58\":1,\"59\":1,\"60\":2,\"64\":2,\"67\":14,\"70\":4,\"71\":13,\"131\":3,\"132\":1}}],[\"c\",{\"3\":{\"12\":2,\"45\":7,\"46\":3,\"47\":3,\"48\":3,\"52\":2,\"54\":2,\"114\":1}}],[\"css下载\",{\"3\":{\"26\":1}}],[\"css渲染阻塞是指浏览器在解析html时\",{\"3\":{\"25\":1}}],[\"css渲染阻塞\",{\"1\":{\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1}}],[\"css篇\",{\"1\":{\"24\":1}}],[\"css实现隐藏元素的方法\",{\"1\":{\"17\":1,\"18\":1}}],[\"css中的常见单位有以下几种\",{\"3\":{\"15\":1}}],[\"css中的单位\",{\"1\":{\"15\":1,\"16\":1}}],[\"css选择器\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1}}],[\"css\",{\"0\":{\"25\":1,\"26\":1,\"27\":1,\"28\":1},\"2\":{\"25\":1,\"26\":1,\"27\":1,\"28\":1},\"3\":{\"7\":1,\"11\":1,\"12\":1,\"13\":1,\"25\":1,\"29\":3,\"30\":1,\"33\":2}}],[\"css的盒模型\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1}}],[\"在数据链路层\",{\"3\":{\"147\":1}}],[\"在数组中间添加元素\",{\"3\":{\"89\":1}}],[\"在数组开头添加元素\",{\"3\":{\"89\":1}}],[\"在数组末尾添加元素\",{\"3\":{\"89\":1}}],[\"在dns解析完成以后\",{\"3\":{\"144\":1}}],[\"在实际生活\",{\"3\":{\"139\":1}}],[\"在寻址过程中\",{\"3\":{\"139\":1}}],[\"在子类中\",{\"3\":{\"131\":1}}],[\"在这个执行环境中\",{\"3\":{\"124\":1}}],[\"在那里调用\",{\"3\":{\"121\":1}}],[\"在还未执行到resolve或reject时\",{\"3\":{\"64\":1}}],[\"在原型链上添加方法\",{\"3\":{\"60\":1}}],[\"在\",{\"3\":{\"55\":2}}],[\"在函数内部可以访问到的变量和函数\",{\"3\":{\"45\":1}}],[\"在函数中使用settimeout\",{\"3\":{\"5\":1}}],[\"在大括号内可以访问到的变量和函数\",{\"3\":{\"45\":1}}],[\"在代码的任何地方都可以访问到的变量和函数\",{\"3\":{\"45\":1}}],[\"在空间有剩余的情况下\",{\"3\":{\"38\":2}}],[\"在空间不足的情况下\",{\"3\":{\"38\":2}}],[\"在主轴上如何对齐\",{\"3\":{\"37\":1}}],[\"在副轴上如何对齐\",{\"3\":{\"37\":1}}],[\"在css中通过box\",{\"3\":{\"7\":1}}],[\"在每次循环时\",{\"3\":{\"5\":1}}],[\"为什么结果输出为\",{\"3\":{\"121\":1}}],[\"为什么会有\",{\"0\":{\"26\":1},\"2\":{\"26\":1}}],[\"为什么会导致内存泄漏\",{\"0\":{\"2\":1},\"2\":{\"2\":1}}],[\"为什么不是直接使用settimeout来延迟函数的执行呢\",{\"3\":{\"5\":1}}],[\"为什么要使用闭包来延迟函数的执行呢\",{\"3\":{\"5\":1}}],[\"+this\",{\"3\":{\"132\":4}}],[\"+\",{\"3\":{\"5\":2,\"7\":2,\"8\":4,\"9\":4,\"11\":2,\"98\":1,\"106\":9}}],[\"bce0ae32\",{\"0\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1}}],[\"bind改变了this的指向\",{\"3\":{\"70\":1}}],[\"bind\",{\"2\":{\"71\":1},\"3\":{\"70\":3,\"71\":2,\"72\":1}}],[\"blue\",{\"3\":{\"40\":1}}],[\"block\",{\"3\":{\"19\":1}}],[\"base<t>\",{\"3\":{\"158\":1}}],[\"basis的简写\",{\"3\":{\"38\":1}}],[\"basis\",{\"3\":{\"38\":1}}],[\"baidu\",{\"3\":{\"143\":1}}],[\"bar\",{\"3\":{\"121\":2}}],[\"background\",{\"3\":{\"40\":4}}],[\"bfc的特性\",{\"0\":{\"21\":1},\"2\":{\"21\":1}}],[\"bfc\",{\"3\":{\"19\":2}}],[\"bfc布局\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1}}],[\"before\",{\"3\":{\"11\":1}}],[\"boolean\",{\"0\":{\"76\":1},\"2\":{\"76\":1},\"3\":{\"76\":2,\"105\":1}}],[\"box\",{\"3\":{\"7\":4}}],[\"border+margin\",{\"3\":{\"8\":2}}],[\"border\",{\"3\":{\"7\":2,\"9\":2,\"13\":5}}],[\"b\",{\"3\":{\"5\":4,\"12\":2,\"45\":7,\"46\":3,\"47\":3,\"48\":3,\"52\":2,\"54\":2,\"55\":2,\"71\":2,\"114\":3}}],[\"当应用层需要传递的数据非常大\",{\"3\":{\"138\":1}}],[\"当数据从一端传到另一端的时候\",{\"3\":{\"139\":1}}],[\"当数据传到另一端时\",{\"3\":{\"137\":1}}],[\"当数组中的每一个promise对象都变为resolved状态时\",{\"3\":{\"67\":1}}],[\"当我们点击div3时\",{\"3\":{\"128\":1}}],[\"当用户点击ul的子元素时\",{\"3\":{\"124\":1}}],[\"当访问一个变量时\",{\"3\":{\"120\":1}}],[\"当weakmap的键名所指向的对象被回收\",{\"3\":{\"114\":1}}],[\"当obj被回收的时候\",{\"3\":{\"114\":1}}],[\"当对象和它所引用的对象一起拷贝时即发生深拷贝\",{\"3\":{\"114\":1}}],[\"当使用new操作符构造函数时\",{\"3\":{\"71\":1}}],[\"当符合某种条件的时候才会阻塞渲染\",{\"3\":{\"29\":1}}],[\"当浏览器开始解析html文件时\",{\"3\":{\"26\":1}}],[\"当需要在某个时间点上执行函数\",{\"3\":{\"5\":1}}],[\"当settimeout执行时\",{\"3\":{\"5\":1}}],[\"张三\",{\"3\":{\"5\":1}}],[\"pop\",{\"3\":{\"90\":1}}],[\"position\",{\"3\":{\"13\":1,\"17\":1,\"18\":1,\"20\":1}}],[\"parse\",{\"3\":{\"115\":1}}],[\"parseint\",{\"3\":{\"74\":2,\"105\":1}}],[\"padend\",{\"3\":{\"100\":1}}],[\"padstring\",{\"3\":{\"100\":2}}],[\"padstart\",{\"3\":{\"100\":1}}],[\"padding\",{\"3\":{\"7\":1,\"8\":2,\"9\":2,\"13\":1}}],[\"push\",{\"3\":{\"71\":1,\"89\":1}}],[\"p3\",{\"3\":{\"67\":4}}],[\"p2\",{\"3\":{\"67\":4}}],[\"pending\",{\"3\":{\"65\":1}}],[\"person\",{\"3\":{\"5\":2,\"58\":3,\"59\":2,\"60\":6,\"71\":4,\"131\":10,\"132\":3}}],[\"promise对象的状态为pending\",{\"3\":{\"64\":1}}],[\"promise对象是一个构造函数\",{\"3\":{\"64\":1}}],[\"promise\",{\"0\":{\"63\":1,\"64\":1,\"65\":1},\"2\":{\"63\":1,\"64\":1,\"65\":1},\"3\":{\"64\":3,\"67\":15}}],[\"prototype\",{\"3\":{\"58\":1,\"60\":2,\"113\":1,\"131\":5}}],[\"props\",{\"3\":{\"55\":1}}],[\"prev\",{\"3\":{\"94\":1}}],[\"prefetch\",{\"2\":{\"33\":1},\"3\":{\"33\":2}}],[\"preload用来指定当前页面必须要用到的资源\",{\"3\":{\"33\":1}}],[\"preload和prefetch是html5中的新特性\",{\"3\":{\"33\":1}}],[\"preload\",{\"2\":{\"33\":1},\"3\":{\"33\":2}}],[\"print等\",{\"3\":{\"30\":1}}],[\"print\",{\"3\":{\"29\":1,\"31\":1}}],[\"px\",{\"3\":{\"15\":1}}],[\"p\",{\"3\":{\"11\":7}}],[\"p1\",{\"3\":{\"5\":3,\"58\":2,\"59\":2,\"60\":6,\"64\":2,\"67\":6}}],[\"私有变量\",{\"3\":{\"5\":1}}],[\"network篇\",{\"1\":{\"135\":1}}],[\"new绑定\",{\"3\":{\"71\":1}}],[\"new\",{\"3\":{\"49\":1,\"58\":1,\"59\":1,\"60\":2,\"64\":1,\"67\":7,\"71\":1,\"131\":5,\"132\":1}}],[\"number或者symbol\",{\"3\":{\"108\":1}}],[\"number\",{\"0\":{\"74\":1},\"2\":{\"74\":1},\"3\":{\"74\":2,\"159\":1,\"161\":1}}],[\"num\",{\"3\":{\"64\":4,\"67\":28}}],[\"null除外\",{\"3\":{\"114\":1}}],[\"null会返回object\",{\"3\":{\"77\":1}}],[\"null\",{\"0\":{\"77\":1},\"2\":{\"77\":1},\"3\":{\"4\":2,\"71\":2,\"74\":2,\"76\":1,\"78\":1,\"106\":1,\"108\":1,\"109\":3,\"110\":2}}],[\"nowrap\",{\"3\":{\"37\":1}}],[\"not\",{\"3\":{\"30\":1}}],[\"not|only\",{\"3\":{\"30\":1}}],[\"none\",{\"3\":{\"17\":2,\"18\":1,\"38\":1}}],[\"nan和任何值都不相等\",{\"3\":{\"108\":1}}],[\"nan\",{\"3\":{\"74\":7,\"76\":1,\"108\":2,\"109\":2}}],[\"nav\",{\"3\":{\"12\":2}}],[\"name+\",{\"3\":{\"132\":1}}],[\"name\",{\"3\":{\"5\":3,\"49\":4,\"50\":4,\"53\":7,\"54\":9,\"55\":2,\"58\":6,\"59\":6,\"60\":12,\"70\":5,\"71\":10,\"131\":20,\"132\":16,\"157\":1,\"158\":4,\"160\":1,\"161\":1}}],[\"n\",{\"3\":{\"5\":2,\"52\":1}}],[\"值为5\",{\"3\":{\"5\":1}}],[\"那么我们就来谈谈\",{\"3\":{\"124\":1}}],[\"那么工作量很大\",{\"3\":{\"124\":1}}],[\"那么weakmap的键名和键值也会被回收\",{\"3\":{\"114\":1}}],[\"那么比较的是两个对象的引用是否相等\",{\"3\":{\"108\":1}}],[\"那么会将对象转换为原始类型的值\",{\"3\":{\"108\":1}}],[\"那么会将布尔值\",{\"3\":{\"108\":1}}],[\"那么会报错\",{\"3\":{\"46\":1}}],[\"那么第一次迭代的prev为数组的第一个元素\",{\"3\":{\"94\":1}}],[\"那么为什么会产生不同呢\",{\"3\":{\"5\":1}}],[\"那么就会进行类型转换\",{\"3\":{\"108\":1}}],[\"那么就会转化为字符串\",{\"3\":{\"106\":1}}],[\"那么就会导致内存泄漏\",{\"3\":{\"3\":1}}],[\"那么就不会被清除\",{\"3\":{\"2\":1}}],[\"此时i的值已经变成了5\",{\"3\":{\"5\":1}}],[\"此时fn3指向了fn2\",{\"3\":{\"4\":1}}],[\"会有一个缓存\",{\"3\":{\"147\":1}}],[\"会从div1开始\",{\"3\":{\"129\":1}}],[\"会从div3开始\",{\"3\":{\"128\":1}}],[\"会依次输出div3\",{\"3\":{\"128\":1,\"129\":1}}],[\"会先从foo的作用域中查找\",{\"3\":{\"121\":1}}],[\"会先从当前作用域查找\",{\"3\":{\"120\":1}}],[\"会进行隐式类型转换\",{\"3\":{\"108\":1}}],[\"会将其他类型转化为boolean\",{\"3\":{\"106\":1}}],[\"会将不会被使用的对象进行清除\",{\"3\":{\"2\":1}}],[\"会改变数组本身\",{\"3\":{\"89\":1,\"90\":1,\"93\":2}}],[\"会把变量的声明提升到代码的最前面\",{\"3\":{\"46\":1}}],[\"会暂停html的解析\",{\"3\":{\"25\":1}}],[\"会创建一个新的上下文\",{\"3\":{\"5\":1}}],[\"会访问到闭包中的i\",{\"3\":{\"5\":1}}],[\"这才是真正的数据发送过程\",{\"3\":{\"148\":1}}],[\"这两个地址都是ip地址\",{\"3\":{\"146\":1}}],[\"这就需要路由器来帮助我们选择路由\",{\"3\":{\"139\":1}}],[\"这就需要网络层来帮助传输层完成这个工作\",{\"3\":{\"139\":1}}],[\"这就是闭包的一个特性\",{\"3\":{\"4\":1}}],[\"这是因为\",{\"3\":{\"128\":1,\"129\":1}}],[\"这种事件模型同时支持冒泡阶段和捕获阶段\",{\"3\":{\"129\":1}}],[\"这种事件模型只支持冒泡阶段\",{\"3\":{\"128\":1}}],[\"这种需要转化为boolean的场景\",{\"3\":{\"106\":1}}],[\"这时候我们就可以使用泛型来解决这个问题\",{\"3\":{\"156\":1}}],[\"这时候应用层就会生成相应的http报文\",{\"3\":{\"144\":1}}],[\"这时候就会把数据分成多个小的数据包\",{\"3\":{\"138\":1}}],[\"这时候就会无法获取到父函数中的变量\",{\"3\":{\"5\":1}}],[\"这时候哦我们可以使用事件委托\",{\"3\":{\"124\":1}}],[\"这也就是我们说的\",{\"3\":{\"123\":1}}],[\"这个深拷贝还是有问题的\",{\"3\":{\"114\":1}}],[\"这个对象包含了实际的值\",{\"3\":{\"86\":1}}],[\"这个不使用apply其实也可以做到\",{\"3\":{\"71\":1}}],[\"这个其实就是相当于window\",{\"3\":{\"70\":1}}],[\"这边我们考虑的都是键入网址内容\",{\"3\":{\"143\":1}}],[\"这边我们引申出一个问题\",{\"3\":{\"70\":1}}],[\"这边就不写了\",{\"3\":{\"114\":1}}],[\"这边flex比较复杂\",{\"3\":{\"38\":1}}],[\"这段区域内不能访问到变量\",{\"3\":{\"46\":1}}],[\"这段代码其实是一个闭包\",{\"3\":{\"5\":1}}],[\"这样我们就可以在别的地方使用这个别名了\",{\"3\":{\"160\":2}}],[\"这样我们就可以在函数内部使用泛型的属性和方法了\",{\"3\":{\"159\":1,\"160\":1}}],[\"这样我们就可以直接在ul上增加点击事件\",{\"3\":{\"124\":1}}],[\"这样的话\",{\"3\":{\"114\":2}}],[\"这样就可以实现继承\",{\"3\":{\"131\":1}}],[\"这样就可以避免css阻塞dom树的生成\",{\"3\":{\"29\":1}}],[\"这样就不会造成内存泄漏了\",{\"3\":{\"114\":1}}],[\"这样就不会阻塞dom树的生成\",{\"3\":{\"28\":1}}],[\"这样是为了确保css能够正确的渲染dom树\",{\"3\":{\"26\":1}}],[\"400px\",{\"3\":{\"40\":1}}],[\"40em\",{\"3\":{\"29\":1,\"30\":4}}],[\"4\",{\"0\":{\"33\":1},\"2\":{\"33\":1},\"3\":{\"5\":3,\"45\":4,\"52\":1,\"55\":4,\"71\":8}}],[\"3448eb71\",{\"0\":{\"153\":1}}],[\"32位寻址方式\",{\"3\":{\"139\":1}}],[\"3cb808b6\",{\"0\":{\"108\":1,\"109\":1,\"110\":1,\"111\":1}}],[\"30525834\",{\"0\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1}}],[\"35f016f2\",{\"0\":{\"70\":1,\"71\":1,\"72\":1}}],[\"379d5da0\",{\"0\":{\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1}}],[\"36e7ec57\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1}}],[\"3\",{\"0\":{\"32\":1},\"2\":{\"32\":1},\"3\":{\"5\":5,\"12\":1,\"45\":3,\"46\":2,\"49\":3,\"52\":4,\"54\":2,\"55\":6,\"67\":3,\"71\":10}}],[\"128位寻址方式\",{\"3\":{\"139\":1}}],[\"12\",{\"3\":{\"131\":5,\"132\":2}}],[\"123a\",{\"3\":{\"74\":1}}],[\"123\",{\"3\":{\"74\":4}}],[\"1ccf7368\",{\"0\":{\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1}}],[\"10\",{\"3\":{\"53\":1}}],[\"100\",{\"3\":{\"40\":2}}],[\"100px\",{\"3\":{\"38\":2}}],[\"1000\",{\"3\":{\"5\":6,\"49\":4,\"64\":1,\"67\":7}}],[\"18\",{\"3\":{\"50\":2,\"53\":4,\"54\":6,\"55\":2,\"58\":2,\"59\":2,\"60\":4}}],[\"16px\",{\"3\":{\"15\":1}}],[\"1rtem\",{\"3\":{\"15\":1}}],[\"1px\",{\"3\":{\"15\":1}}],[\"1\",{\"0\":{\"28\":1},\"2\":{\"28\":1},\"3\":{\"5\":5,\"12\":2,\"15\":1,\"17\":1,\"18\":1,\"38\":10,\"40\":1,\"45\":1,\"46\":2,\"47\":3,\"48\":3,\"49\":3,\"52\":3,\"54\":2,\"55\":6,\"71\":12,\"74\":4,\"92\":1,\"93\":2,\"101\":1,\"106\":1,\"109\":2,\"114\":1,\"121\":3,\"123\":2,\"131\":3,\"132\":1}}],[\"1d2cefc0\",{\"0\":{\"0\":1}}],[\"join\",{\"3\":{\"95\":1}}],[\"javascript\",{\"3\":{\"124\":1}}],[\"javascript篇\",{\"1\":{\"118\":1}}],[\"javascript数据类型\",{\"1\":{\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1}}],[\"javascript中没有类的概念\",{\"3\":{\"58\":1}}],[\"json\",{\"3\":{\"115\":2}}],[\"js\",{\"3\":{\"55\":1,\"114\":1}}],[\"justify\",{\"3\":{\"37\":1}}],[\"j\",{\"3\":{\"5\":4,\"52\":1}}],[\"5b4756e9\",{\"0\":{\"152\":1}}],[\"5bc3b2da\",{\"0\":{\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1}}],[\"54eae7a0\",{\"0\":{\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"568d3b89\",{\"0\":{\"118\":1}}],[\"55\",{\"3\":{\"109\":2}}],[\"5null\",{\"3\":{\"106\":1}}],[\"5undefined\",{\"3\":{\"106\":1}}],[\"5f5c21dd\",{\"0\":{\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1}}],[\"5function\",{\"3\":{\"106\":1}}],[\"5false\",{\"3\":{\"106\":1}}],[\"5true\",{\"3\":{\"106\":1}}],[\"51\",{\"3\":{\"106\":1}}],[\"5\",{\"3\":{\"5\":14,\"45\":2,\"55\":4,\"64\":1,\"67\":2,\"71\":11,\"106\":10}}],[\"<t\",{\"3\":{\"160\":1}}],[\"<div\",{\"3\":{\"128\":4,\"129\":4}}],[\"<li>3<\",{\"3\":{\"124\":1}}],[\"<li>2<\",{\"3\":{\"124\":1}}],[\"<li>1<\",{\"3\":{\"124\":1}}],[\"<link\",{\"3\":{\"29\":3,\"33\":2}}],[\"<ul\",{\"3\":{\"124\":1}}],[\"<child\",{\"3\":{\"55\":1}}],[\"<=\",{\"3\":{\"30\":1,\"106\":1}}],[\"<\",{\"3\":{\"5\":4,\"29\":4,\"33\":2,\"106\":1,\"124\":1,\"128\":2,\"129\":2}}],[\"0\",{\"3\":{\"5\":6,\"12\":1,\"17\":2,\"18\":4,\"38\":5,\"64\":1,\"67\":7,\"74\":5,\"76\":2,\"93\":1}}],[\"ibase>\",{\"3\":{\"159\":1,\"160\":1,\"161\":1}}],[\"ibase\",{\"3\":{\"159\":1,\"161\":1}}],[\"ibase<t>\",{\"3\":{\"160\":4}}],[\"ibase<t\",{\"3\":{\"157\":1}}],[\"ip头部生成后\",{\"3\":{\"147\":1}}],[\"ip\",{\"3\":{\"139\":1}}],[\"ipv6\",{\"3\":{\"139\":1}}],[\"ipv4\",{\"3\":{\"139\":1}}],[\"ip协议需要知道源地址ip和目的地址ip\",{\"3\":{\"146\":1}}],[\"ip协议需要将数据封装为数据包\",{\"3\":{\"146\":1}}],[\"ip协议还定义了一种路由选择协议\",{\"3\":{\"139\":1}}],[\"ip协议定义了一种寻址方式\",{\"3\":{\"139\":1}}],[\"ip协议\",{\"0\":{\"146\":1},\"2\":{\"146\":1},\"3\":{\"139\":1}}],[\"ip网络模型\",{\"1\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1}}],[\"interface\",{\"3\":{\"157\":1,\"159\":1,\"161\":1}}],[\"innerhtml\",{\"3\":{\"124\":1}}],[\"initvalue为初始值\",{\"3\":{\"94\":1}}],[\"initvalue\",{\"3\":{\"94\":1}}],[\"includes\",{\"3\":{\"92\":1,\"101\":1}}],[\"indexof\",{\"3\":{\"92\":1,\"101\":1}}],[\"index为负数\",{\"3\":{\"18\":1}}],[\"index\",{\"3\":{\"17\":1,\"18\":1,\"94\":6,\"101\":1}}],[\"indent\",{\"3\":{\"13\":1}}],[\"if\",{\"3\":{\"64\":1,\"67\":7,\"106\":1}}],[\"item\",{\"3\":{\"94\":5}}],[\"item2\",{\"3\":{\"89\":1,\"90\":1}}],[\"item1\",{\"3\":{\"89\":1,\"90\":1}}],[\"items属性\",{\"3\":{\"38\":1}}],[\"items\",{\"3\":{\"37\":1}}],[\"iterable\",{\"3\":{\"55\":1}}],[\"is\",{\"3\":{\"50\":2,\"58\":2,\"59\":2,\"60\":4,\"131\":5,\"132\":2}}],[\"image\",{\"3\":{\"13\":1}}],[\"id=\",{\"3\":{\"124\":1,\"128\":4,\"129\":4}}],[\"id\",{\"3\":{\"11\":2,\"12\":2}}],[\"ie盒模型\",{\"3\":{\"7\":1}}],[\"ie\",{\"3\":{\"7\":2}}],[\"i的值都不一样\",{\"3\":{\"5\":1}}],[\"i的值会被保存在闭包中\",{\"3\":{\"5\":1}}],[\"i作为参数传递给了闭包\",{\"3\":{\"5\":1}}],[\"i++\",{\"3\":{\"5\":4}}],[\"i\",{\"3\":{\"5\":17,\"50\":2,\"52\":1,\"58\":2,\"59\":2,\"60\":8,\"131\":5,\"132\":3}}],[\"因为我们可以在定义函数\",{\"3\":{\"154\":1}}],[\"因为dom是一个树形结构\",{\"3\":{\"126\":1}}],[\"因为foo的作用域链是foo\",{\"3\":{\"121\":1}}],[\"因为它的作用域在函数定义的时候就决定了\",{\"3\":{\"121\":1}}],[\"因为普通函数有this\",{\"3\":{\"49\":1}}],[\"因为箭头函数没有this\",{\"3\":{\"49\":2}}],[\"因为css可以修改dom树的样式\",{\"3\":{\"26\":1}}],[\"因为settimeout是一个异步函数\",{\"3\":{\"5\":1}}],[\"因为闭包会携带包含它的函数的作用域\",{\"3\":{\"4\":1}}],[\"因此fn1也不会被销毁\",{\"3\":{\"4\":1}}],[\"无法被销毁\",{\"3\":{\"4\":2}}],[\"无法销毁\",{\"3\":{\"4\":1}}],[\"但是泛型别名\",{\"3\":{\"160\":1}}],[\"但是交换机会记录下数据包的源mac地址和端口号\",{\"3\":{\"149\":1}}],[\"但是传输层并不知道数据是如何从一端传到另一端的\",{\"3\":{\"139\":1}}],[\"但是如果是基于构造函数的继承\",{\"3\":{\"131\":1}}],[\"但是如果存在引用\",{\"3\":{\"2\":1}}],[\"但是需要动态的增加item\",{\"3\":{\"124\":1}}],[\"但是需要注意的是\",{\"3\":{\"52\":1,\"53\":1}}],[\"但是即使这样\",{\"3\":{\"114\":1}}],[\"但是这个深拷贝还有一个问题\",{\"3\":{\"114\":1}}],[\"但是这个深拷贝没有考虑到数组的情况\",{\"3\":{\"114\":1}}],[\"但是这种方法并不是很便捷\",{\"3\":{\"71\":1}}],[\"但是这种方法会导致元素不占据空间\",{\"3\":{\"17\":1}}],[\"但是没有赋值的情况下的默认值\",{\"3\":{\"78\":2}}],[\"但是有一些特殊情况\",{\"3\":{\"72\":1}}],[\"但是它会把数组中的每一个元素\",{\"3\":{\"71\":1}}],[\"但是使用apply\",{\"3\":{\"71\":1}}],[\"但是math\",{\"3\":{\"71\":1}}],[\"但是我们可以使用构造函数来模拟类的概念\",{\"3\":{\"58\":1}}],[\"但是普通函数有this\",{\"3\":{\"49\":1}}],[\"但是变量的赋值不会被提升\",{\"3\":{\"46\":1}}],[\"但是\",{\"3\":{\"46\":1}}],[\"但是在块级作用域和函数作用域中都不能访问到\",{\"3\":{\"45\":1}}],[\"但是在函数作用域中不能访问到\",{\"3\":{\"45\":1}}],[\"但是在生成dom树的时候\",{\"3\":{\"26\":1}}],[\"但是元素还是占据空间\",{\"3\":{\"18\":4}}],[\"但是又不想立即执行该函数时\",{\"3\":{\"5\":1}}],[\"但是因为使用了闭包\",{\"3\":{\"5\":1}}],[\"但是fn2依然会访问到外部作用域的变量\",{\"3\":{\"4\":1}}],[\"已经被销毁\",{\"3\":{\"4\":1}}],[\"的继承\",{\"0\":{\"131\":1,\"132\":1},\"2\":{\"131\":1,\"132\":1}}],[\"的事件模型\",{\"3\":{\"124\":1}}],[\"的垃圾回收机制\",{\"3\":{\"114\":1}}],[\"的角度来看待的\",{\"3\":{\"97\":1}}],[\"的元素\",{\"3\":{\"90\":1}}],[\"的数组\",{\"3\":{\"74\":1}}],[\"的值会绑定到新创建的对象上\",{\"3\":{\"71\":1}}],[\"的区别\",{\"2\":{\"71\":1}}],[\"的指向\",{\"3\":{\"70\":1}}],[\"的指向类型\",{\"2\":{\"70\":1}}],[\"的三种状态\",{\"0\":{\"65\":1},\"2\":{\"65\":1}}],[\"的基本使用\",{\"0\":{\"64\":1},\"2\":{\"64\":1}}],[\"的构造函数\",{\"3\":{\"59\":1}}],[\"的类\",{\"0\":{\"58\":1,\"59\":1},\"2\":{\"58\":1,\"59\":1},\"3\":{\"59\":1}}],[\"的产物\",{\"3\":{\"43\":2}}],[\"的引用已经被释放\",{\"3\":{\"4\":1}}],[\"的返回值\",{\"3\":{\"4\":1}}],[\"被赋值为\",{\"3\":{\"4\":1}}],[\"lodash\",{\"3\":{\"115\":1}}],[\"log\",{\"3\":{\"4\":2,\"5\":7,\"45\":12,\"46\":6,\"47\":3,\"48\":3,\"49\":9,\"50\":1,\"52\":3,\"53\":3,\"54\":4,\"55\":4,\"58\":1,\"59\":1,\"60\":4,\"64\":2,\"67\":6,\"70\":4,\"71\":10,\"121\":1,\"123\":1,\"124\":1,\"128\":4,\"129\":4,\"131\":3,\"132\":4,\"159\":1}}],[\"lastindexof\",{\"3\":{\"92\":1}}],[\"layout\",{\"3\":{\"13\":1}}],[\"l\",{\"3\":{\"52\":1}}],[\"length\",{\"3\":{\"99\":1,\"159\":2}}],[\"left\",{\"3\":{\"40\":1}}],[\"let声明的变量不会被提升到代码的最前面\",{\"3\":{\"46\":1}}],[\"let和const声明的变量不能被重复声明\",{\"3\":{\"47\":1}}],[\"let和const声明的变量在全局作用域中可以访问到\",{\"3\":{\"45\":1}}],[\"let和const是\",{\"3\":{\"43\":1}}],[\"let定义的变量不会具有变量提升的特性\",{\"3\":{\"5\":1}}],[\"let\",{\"0\":{\"42\":1},\"2\":{\"42\":1},\"3\":{\"3\":1,\"5\":1,\"45\":3,\"46\":1,\"47\":2,\"48\":1,\"49\":1,\"114\":1,\"123\":1,\"124\":1,\"128\":4,\"129\":4}}],[\"li>\",{\"3\":{\"124\":3}}],[\"limit表示最大分割次数\",{\"3\":{\"102\":1}}],[\"limit\",{\"3\":{\"102\":1}}],[\"list\",{\"3\":{\"13\":3}}],[\"link\",{\"3\":{\"12\":1}}],[\"li\",{\"3\":{\"12\":1}}],[\"2376843a\",{\"0\":{\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1}}],[\"28cd39da\",{\"0\":{\"135\":1}}],[\"2b9022fc\",{\"0\":{\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1}}],[\"200px\",{\"3\":{\"40\":2}}],[\"29367432\",{\"0\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1}}],[\"25\",{\"3\":{\"5\":1}}],[\"2\",{\"0\":{\"29\":1},\"2\":{\"29\":1},\"3\":{\"4\":3,\"5\":5,\"38\":2,\"45\":3,\"46\":2,\"47\":4,\"48\":5,\"49\":3,\"52\":3,\"54\":2,\"55\":6,\"71\":10,\"114\":1,\"121\":1}}],[\"==会进行隐式类型转换\",{\"3\":{\"110\":1}}],[\"===不会进行隐式类型转换\",{\"3\":{\"110\":1}}],[\"===\",{\"3\":{\"106\":1,\"109\":1,\"110\":1}}],[\"==\",{\"3\":{\"78\":1,\"106\":2,\"108\":2,\"109\":1,\"110\":1}}],[\"=>\",{\"3\":{\"49\":4,\"55\":1,\"64\":4,\"67\":20,\"71\":1,\"94\":6}}],[\"=\",{\"3\":{\"4\":6,\"5\":9,\"7\":2,\"8\":2,\"9\":2,\"15\":2,\"45\":9,\"46\":3,\"47\":6,\"48\":6,\"49\":4,\"50\":3,\"52\":7,\"53\":6,\"54\":1,\"55\":13,\"58\":4,\"59\":3,\"60\":7,\"64\":2,\"67\":14,\"70\":4,\"71\":14,\"106\":1,\"114\":2,\"121\":2,\"123\":2,\"124\":1,\"128\":8,\"129\":4,\"131\":17,\"132\":7,\"158\":2,\"160\":1}}],[\"addeventlistener接收三个参数\",{\"3\":{\"129\":1}}],[\"addeventlistener\",{\"3\":{\"124\":1,\"129\":4}}],[\"a0326798\",{\"0\":{\"105\":1,\"106\":1,\"107\":1}}],[\"a123\",{\"3\":{\"74\":1}}],[\"all\",{\"3\":{\"67\":5}}],[\"align\",{\"3\":{\"13\":2,\"37\":2,\"38\":1}}],[\"assign\",{\"3\":{\"60\":2,\"113\":1}}],[\"as=\",{\"3\":{\"33\":2}}],[\"app\",{\"3\":{\"55\":1}}],[\"apply的使用场景\",{\"3\":{\"71\":1}}],[\"apply\",{\"2\":{\"71\":1},\"3\":{\"5\":1,\"70\":1,\"71\":5}}],[\"arp为了提高效率\",{\"3\":{\"147\":1}}],[\"arp获取mac地址的方式\",{\"3\":{\"147\":1}}],[\"array\",{\"0\":{\"82\":1},\"2\":{\"82\":1},\"3\":{\"94\":6,\"113\":1}}],[\"arr3\",{\"3\":{\"55\":2}}],[\"arr2\",{\"3\":{\"55\":2,\"71\":4}}],[\"arr1\",{\"3\":{\"55\":2,\"71\":5}}],[\"arr\",{\"3\":{\"52\":6,\"55\":5,\"71\":5}}],[\"arg\",{\"3\":{\"156\":2,\"159\":3,\"160\":3,\"161\":2}}],[\"arguments是一个类数组对象\",{\"3\":{\"49\":1}}],[\"arguments\",{\"3\":{\"5\":1,\"49\":2,\"55\":1}}],[\"args\",{\"3\":{\"5\":2}}],[\"aquamarine\",{\"3\":{\"40\":1}}],[\"auto\",{\"3\":{\"38\":5}}],[\"and\",{\"3\":{\"30\":3}}],[\"absolute或fixed\",{\"3\":{\"20\":1}}],[\"absolute\",{\"3\":{\"17\":1,\"18\":1}}],[\"abcd法则\",{\"3\":{\"12\":1}}],[\"active\",{\"3\":{\"11\":1}}],[\"after\",{\"3\":{\"11\":1}}],[\"aad12c32\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1}}],[\"age+\",{\"3\":{\"132\":1}}],[\"age\",{\"3\":{\"5\":3,\"50\":2,\"53\":6,\"54\":7,\"55\":2,\"58\":4,\"59\":4,\"60\":8,\"131\":15,\"132\":12,\"157\":1,\"158\":4,\"160\":1,\"161\":1}}],[\"a\",{\"3\":{\"4\":5,\"5\":4,\"12\":3,\"45\":7,\"46\":3,\"47\":3,\"48\":3,\"52\":2,\"54\":2,\"55\":2,\"71\":2,\"109\":2,\"114\":1,\"121\":1}}],[\"ftp\",{\"3\":{\"136\":1}}],[\"filter\",{\"3\":{\"94\":1}}],[\"find\",{\"3\":{\"92\":1}}],[\"finally\",{\"3\":{\"66\":1}}],[\"false\",{\"3\":{\"74\":1,\"106\":1,\"108\":1,\"109\":6,\"110\":1}}],[\"family\",{\"3\":{\"13\":1}}],[\"f\",{\"3\":{\"52\":2}}],[\"flow\",{\"3\":{\"37\":1}}],[\"float\",{\"3\":{\"21\":1}}],[\"float和position类\",{\"3\":{\"13\":1}}],[\"flex\",{\"3\":{\"35\":2,\"37\":4,\"38\":11,\"40\":2}}],[\"flex布局\",{\"1\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1}}],[\"fd14e8e4\",{\"0\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1}}],[\"foo\",{\"3\":{\"121\":2,\"123\":3}}],[\"font\",{\"3\":{\"13\":6}}],[\"foreach\",{\"3\":{\"94\":1}}],[\"formatting\",{\"3\":{\"19\":1}}],[\"for\",{\"3\":{\"5\":4}}],[\"func\",{\"3\":{\"5\":2}}],[\"function等特殊对象\",{\"3\":{\"114\":1}}],[\"function\",{\"0\":{\"83\":1},\"2\":{\"83\":1},\"3\":{\"4\":4,\"5\":14,\"45\":1,\"49\":6,\"54\":4,\"58\":2,\"60\":1,\"70\":4,\"71\":3,\"106\":1,\"121\":2,\"123\":2,\"124\":1,\"128\":4,\"129\":4,\"131\":9,\"156\":1,\"159\":1,\"160\":1,\"161\":1}}],[\"fn<t\",{\"3\":{\"159\":1,\"161\":1}}],[\"fn<t>\",{\"3\":{\"156\":1,\"160\":1}}],[\"fn4\",{\"3\":{\"54\":2}}],[\"fn\",{\"3\":{\"5\":4,\"45\":2,\"49\":6,\"54\":2,\"70\":8}}],[\"fn3\",{\"3\":{\"4\":11,\"54\":2}}],[\"fn2\",{\"3\":{\"4\":5,\"49\":2,\"54\":2,\"71\":3}}],[\"fn1\",{\"3\":{\"4\":8,\"5\":2,\"71\":3,\"123\":2}}],[\"创建闭包的最常见的方式就是在一个函数内创建另一个函数\",{\"3\":{\"4\":1}}],[\"之类弱引用的数据结构\",{\"3\":{\"3\":1}}],[\"注意区分后代选择器和兄弟选择器的区别\",{\"3\":{\"11\":1}}],[\"注意清除定时器\",{\"3\":{\"3\":1}}],[\"注意闭包中的变量是否会被使用\",{\"3\":{\"3\":1}}],[\"如width\",{\"3\":{\"30\":1}}],[\"如screen\",{\"3\":{\"30\":1}}],[\"如果http请求的消息体较大\",{\"3\":{\"145\":1}}],[\"如果有\",{\"3\":{\"143\":1,\"144\":1}}],[\"如果是搜索内容\",{\"3\":{\"143\":1}}],[\"如果是一个promise对象\",{\"3\":{\"67\":1}}],[\"如果是一个值\",{\"3\":{\"67\":1}}],[\"如果全局作用域也没有找到\",{\"3\":{\"120\":1,\"121\":1}}],[\"如果没有\",{\"3\":{\"143\":1,\"144\":1}}],[\"如果没有找到\",{\"3\":{\"120\":1,\"121\":1}}],[\"如果没有初始值\",{\"3\":{\"94\":1}}],[\"如果已经拷贝过了\",{\"3\":{\"114\":1}}],[\"如果属性是引用类型\",{\"3\":{\"112\":1}}],[\"如果属性是基本类型\",{\"3\":{\"112\":1}}],[\"如果类型相同\",{\"3\":{\"109\":1,\"110\":1}}],[\"如果类型不同\",{\"3\":{\"109\":1,\"110\":1}}],[\"如果两方都是object\",{\"3\":{\"108\":1}}],[\"如果一方是object\",{\"3\":{\"108\":1}}],[\"如果一方是布尔值或者是字符串\",{\"3\":{\"108\":1}}],[\"如果包含\",{\"3\":{\"101\":2}}],[\"如果第一个字符就不可以转化\",{\"3\":{\"74\":1}}],[\"如果数组中的某一个promise对象变为rejected状态\",{\"3\":{\"67\":2}}],[\"如果不存在\",{\"3\":{\"92\":1}}],[\"如果不写\",{\"3\":{\"59\":1}}],[\"如果不会被使用\",{\"3\":{\"3\":1}}],[\"如果解构不成功\",{\"3\":{\"52\":1}}],[\"如果访问\",{\"3\":{\"46\":1}}],[\"如果希望弹箱项目会根据位置和大小进行缩小\",{\"3\":{\"38\":1}}],[\"如果希望弹性项目可以占据多余空间\",{\"3\":{\"38\":1}}],[\"如果遇到了css\",{\"3\":{\"25\":1,\"26\":1}}],[\"如何写出一个惊艳面试官的深拷贝\",{\"3\":{\"116\":1}}],[\"如何避免\",{\"0\":{\"27\":1},\"2\":{\"27\":1}}],[\"如何创建bfc\",{\"0\":{\"20\":1},\"2\":{\"20\":1}}],[\"如何处理\",{\"0\":{\"3\":1},\"2\":{\"3\":1}}],[\"如何处理内存泄漏问题\",{\"0\":{\"1\":1},\"2\":{\"1\":1}}],[\"避免使用\",{\"3\":{\"3\":1}}],[\"声明变量\",{\"3\":{\"3\":1}}],[\"和string\",{\"3\":{\"105\":1}}],[\"和splice\",{\"3\":{\"91\":1}}],[\"和number\",{\"3\":{\"74\":1,\"105\":1}}],[\"和math\",{\"3\":{\"71\":2}}],[\"和vh\",{\"3\":{\"15\":1}}],[\"和\",{\"0\":{\"42\":2},\"2\":{\"33\":1,\"42\":2,\"71\":2},\"3\":{\"3\":1,\"76\":1,\"105\":1,\"109\":6}}],[\"未清理的定时器或者回调函数\",{\"3\":{\"2\":1}}],[\"导致垃圾回收机制无法回收\",{\"3\":{\"2\":1}}],[\"循环引用\",{\"3\":{\"2\":1}}],[\"闭包中内部函数可以访问外部变量的原因\",{\"3\":{\"123\":1}}],[\"闭包就是在作用域链中查找变量的一种机制\",{\"3\":{\"121\":1}}],[\"闭包进行延迟执行\",{\"3\":{\"5\":1}}],[\"闭包可以用来延迟函数的执行\",{\"3\":{\"5\":1}}],[\"闭包可以用来封装私有变量\",{\"3\":{\"5\":1}}],[\"闭包可以用来模拟块级作用域\",{\"3\":{\"5\":1}}],[\"闭包的应用\",{\"0\":{\"5\":1},\"2\":{\"5\":1}}],[\"闭包的另一个特性是\",{\"3\":{\"4\":1}}],[\"闭包是指有权访问另一个函数作用域中的变量的函数\",{\"3\":{\"4\":1}}],[\"闭包\",{\"0\":{\"4\":1,\"123\":1},\"2\":{\"4\":1,\"123\":1},\"3\":{\"2\":1,\"3\":1}}],[\"正常浏览器会存在垃圾回收机制\",{\"3\":{\"2\":1}}],[\"vue篇\",{\"1\":{\"163\":1}}],[\"valueof\",{\"3\":{\"108\":1}}],[\"value\",{\"3\":{\"74\":1,\"121\":3,\"123\":2}}],[\"var和let声明的变量是可变的\",{\"3\":{\"48\":2}}],[\"var声明的变量可以被重复声明\",{\"3\":{\"47\":2}}],[\"var声明的变量会被提升到代码的最前面\",{\"3\":{\"46\":1}}],[\"var声明的变量在全局作用域和块级作用域中都可以访问到\",{\"3\":{\"45\":1}}],[\"var是\",{\"3\":{\"43\":1}}],[\"variant\",{\"3\":{\"13\":1}}],[\"var定义的变量会具有变量提升的特性\",{\"3\":{\"5\":1}}],[\"var\",{\"0\":{\"42\":1},\"2\":{\"42\":1},\"3\":{\"3\":1,\"4\":4,\"5\":8,\"45\":3,\"46\":1,\"47\":2,\"48\":1,\"121\":2,\"123\":1}}],[\"vm是相对于视窗的高度和宽度来计算的\",{\"3\":{\"15\":1}}],[\"vm的区别\",{\"3\":{\"15\":1}}],[\"vm\",{\"3\":{\"15\":1}}],[\"vh\",{\"3\":{\"15\":2}}],[\"vertical\",{\"3\":{\"13\":1}}],[\"visibility\",{\"3\":{\"13\":1,\"17\":1,\"18\":1}}],[\"v\",{\"0\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1}}]],\"serializationVersion\":2}}")).map(([a,t])=>[a,xt.loadJSON(t,{fields:["title","header","text","customFields"],storeFields:["title","header","text","customFields"]})]));self.onmessage=({data:{query:a,locale:t,options:e}})=>{self.postMessage(Vt(a,Lt[t],e))};
//# sourceMappingURL=index.js.map
