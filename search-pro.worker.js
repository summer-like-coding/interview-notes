var O=function(){return O=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++){e=arguments[i];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t},O.apply(this,arguments)};function yt(a,t,e,i){function n(r){return r instanceof e?r:new e(function(u){u(r)})}return new(e||(e=Promise))(function(r,u){function o(s){try{h(i.next(s))}catch(f){u(f)}}function l(s){try{h(i.throw(s))}catch(f){u(f)}}function h(s){s.done?r(s.value):n(s.value).then(o,l)}h((i=i.apply(a,t||[])).next())})}function pt(a,t){var e={label:0,sent:function(){if(r[0]&1)throw r[1];return r[1]},trys:[],ops:[]},i,n,r,u;return u={next:o(0),throw:o(1),return:o(2)},typeof Symbol=="function"&&(u[Symbol.iterator]=function(){return this}),u;function o(h){return function(s){return l([h,s])}}function l(h){if(i)throw new TypeError("Generator is already executing.");for(;u&&(u=0,h[0]&&(e=0)),e;)try{if(i=1,n&&(r=h[0]&2?n.return:h[0]?n.throw||((r=n.return)&&r.call(n),0):n.next)&&!(r=r.call(n,h[1])).done)return r;switch(n=0,r&&(h=[h[0]&2,r.value]),h[0]){case 0:case 1:r=h;break;case 4:return e.label++,{value:h[1],done:!1};case 5:e.label++,n=h[1],h=[0];continue;case 7:h=e.ops.pop(),e.trys.pop();continue;default:if(r=e.trys,!(r=r.length>0&&r[r.length-1])&&(h[0]===6||h[0]===2)){e=0;continue}if(h[0]===3&&(!r||h[1]>r[0]&&h[1]<r[3])){e.label=h[1];break}if(h[0]===6&&e.label<r[1]){e.label=r[1],r=h;break}if(r&&e.label<r[2]){e.label=r[2],e.ops.push(h);break}r[2]&&e.ops.pop(),e.trys.pop();continue}h=t.call(a,e)}catch(s){h=[6,s],n=0}finally{i=r=0}if(h[0]&5)throw h[1];return{value:h[0]?h[1]:void 0,done:!0}}}function F(a){var t=typeof Symbol=="function"&&Symbol.iterator,e=t&&a[t],i=0;if(e)return e.call(a);if(a&&typeof a.length=="number")return{next:function(){return a&&i>=a.length&&(a=void 0),{value:a&&a[i++],done:!a}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(a,t){var e=typeof Symbol=="function"&&a[Symbol.iterator];if(!e)return a;var i=e.call(a),n,r=[],u;try{for(;(t===void 0||t-- >0)&&!(n=i.next()).done;)r.push(n.value)}catch(o){u={error:o}}finally{try{n&&!n.done&&(e=i.return)&&e.call(i)}finally{if(u)throw u.error}}return r}var mt="ENTRIES",it="KEYS",at="VALUES",I="",K=function(){function a(t,e){var i=t._tree,n=Array.from(i.keys());this.set=t,this._type=e,this._path=n.length>0?[{node:i,keys:n}]:[]}return a.prototype.next=function(){var t=this.dive();return this.backtrack(),t},a.prototype.dive=function(){if(this._path.length===0)return{done:!0,value:void 0};var t=N(this._path),e=t.node,i=t.keys;if(N(i)===I)return{done:!1,value:this.result()};var n=e.get(N(i));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()},a.prototype.backtrack=function(){if(this._path.length!==0){var t=N(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}},a.prototype.key=function(){return this.set._prefix+this._path.map(function(t){var e=t.keys;return N(e)}).filter(function(t){return t!==I}).join("")},a.prototype.value=function(){return N(this._path).node.get(I)},a.prototype.result=function(){switch(this._type){case at:return this.value();case it:return this.key();default:return[this.key(),this.value()]}},a.prototype[Symbol.iterator]=function(){return this},a}(),N=function(a){return a[a.length-1]},gt=function(a,t,e){var i=new Map;if(t===void 0)return i;for(var n=t.length+1,r=n+e,u=new Uint8Array(r*n).fill(e+1),o=0;o<n;++o)u[o]=o;for(var l=1;l<r;++l)u[l*n]=l;return ut(a,t,e,i,u,1,n,""),i},ut=function(a,t,e,i,n,r,u,o){var l,h,s=r*u;try{t:for(var f=F(a.keys()),c=f.next();!c.done;c=f.next()){var v=c.value;if(v===I){var d=n[s-1];d<=e&&i.set(o,[a.get(v),d])}else{for(var p=r,y=0;y<v.length;++y,++p){for(var g=v[y],w=u*p,m=w-u,b=n[w],z=Math.max(0,p-e-1),V=Math.min(u-1,p+e),x=z;x<V;++x){var C=g!==t[x],S=n[m+x]+ +C,E=n[m+x+1]+1,M=n[w+x]+1,A=n[w+x+1]=Math.min(S,E,M);A<b&&(b=A)}if(b>e)continue t}ut(a.get(v),t,e,i,n,p,u,o+v)}}}catch(L){l={error:L}}finally{try{c&&!c.done&&(h=f.return)&&h.call(f)}finally{if(l)throw l.error}}},Y=function(){function a(t,e){t===void 0&&(t=new Map),e===void 0&&(e=""),this._size=void 0,this._tree=t,this._prefix=e}return a.prototype.atPrefix=function(t){var e,i;if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");var n=_(R(this._tree,t.slice(this._prefix.length)),2),r=n[0],u=n[1];if(r===void 0){var o=_(Z(u),2),l=o[0],h=o[1];try{for(var s=F(l.keys()),f=s.next();!f.done;f=s.next()){var c=f.value;if(c!==I&&c.startsWith(h)){var v=new Map;return v.set(c.slice(h.length),l.get(c)),new a(v,t)}}}catch(d){e={error:d}}finally{try{f&&!f.done&&(i=s.return)&&i.call(s)}finally{if(e)throw e.error}}}return new a(r,t)},a.prototype.clear=function(){this._size=void 0,this._tree.clear()},a.prototype.delete=function(t){return this._size=void 0,Ft(this._tree,t)},a.prototype.entries=function(){return new K(this,mt)},a.prototype.forEach=function(t){var e,i;try{for(var n=F(this),r=n.next();!r.done;r=n.next()){var u=_(r.value,2),o=u[0],l=u[1];t(o,l,this)}}catch(h){e={error:h}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},a.prototype.fuzzyGet=function(t,e){return gt(this._tree,t,e)},a.prototype.get=function(t){var e=H(this._tree,t);return e!==void 0?e.get(I):void 0},a.prototype.has=function(t){var e=H(this._tree,t);return e!==void 0&&e.has(I)},a.prototype.keys=function(){return new K(this,it)},a.prototype.set=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t);return i.set(I,e),this},Object.defineProperty(a.prototype,"size",{get:function(){if(this._size)return this._size;this._size=0;for(var t=this.entries();!t.next().done;)this._size+=1;return this._size},enumerable:!1,configurable:!0}),a.prototype.update=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t);return i.set(I,e(i.get(I))),this},a.prototype.fetch=function(t,e){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;var i=X(this._tree,t),n=i.get(I);return n===void 0&&i.set(I,n=e()),n},a.prototype.values=function(){return new K(this,at)},a.prototype[Symbol.iterator]=function(){return this.entries()},a.from=function(t){var e,i,n=new a;try{for(var r=F(t),u=r.next();!u.done;u=r.next()){var o=_(u.value,2),l=o[0],h=o[1];n.set(l,h)}}catch(s){e={error:s}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}return n},a.fromObject=function(t){return a.from(Object.entries(t))},a}(),R=function(a,t,e){var i,n;if(e===void 0&&(e=[]),t.length===0||a==null)return[a,e];try{for(var r=F(a.keys()),u=r.next();!u.done;u=r.next()){var o=u.value;if(o!==I&&t.startsWith(o))return e.push([a,o]),R(a.get(o),t.slice(o.length),e)}}catch(l){i={error:l}}finally{try{u&&!u.done&&(n=r.return)&&n.call(r)}finally{if(i)throw i.error}}return e.push([a,t]),R(void 0,"",e)},H=function(a,t){var e,i;if(t.length===0||a==null)return a;try{for(var n=F(a.keys()),r=n.next();!r.done;r=n.next()){var u=r.value;if(u!==I&&t.startsWith(u))return H(a.get(u),t.slice(u.length))}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},X=function(a,t){var e,i,n=t.length;t:for(var r=0;a&&r<n;){try{for(var u=(e=void 0,F(a.keys())),o=u.next();!o.done;o=u.next()){var l=o.value;if(l!==I&&t[r]===l[0]){for(var h=Math.min(n-r,l.length),s=1;s<h&&t[r+s]===l[s];)++s;var f=a.get(l);if(s===l.length)a=f;else{var c=new Map;c.set(l.slice(s),f),a.set(t.slice(r,r+s),c),a.delete(l),a=c}r+=s;continue t}}}catch(d){e={error:d}}finally{try{o&&!o.done&&(i=u.return)&&i.call(u)}finally{if(e)throw e.error}}var v=new Map;return a.set(t.slice(r),v),v}return a},Ft=function(a,t){var e=_(R(a,t),2),i=e[0],n=e[1];if(i!==void 0){if(i.delete(I),i.size===0)ot(n);else if(i.size===1){var r=_(i.entries().next().value,2),u=r[0],o=r[1];lt(n,u,o)}}},ot=function(a){if(a.length!==0){var t=_(Z(a),2),e=t[0],i=t[1];if(e.delete(i),e.size===0)ot(a.slice(0,-1));else if(e.size===1){var n=_(e.entries().next().value,2),r=n[0],u=n[1];r!==I&&lt(a.slice(0,-1),r,u)}}},lt=function(a,t,e){if(a.length!==0){var i=_(Z(a),2),n=i[0],r=i[1];n.set(r+t,e),n.delete(r)}},Z=function(a){return a[a.length-1]},J,j="or",ht="and",wt="and_not",xt=function(){function a(t){if((t==null?void 0:t.fields)==null)throw new Error('MiniSearch: option "fields" must be provided');var e=t.autoVacuum==null||t.autoVacuum===!0?nt:t.autoVacuum;this._options=O(O(O({},tt),t),{autoVacuum:e,searchOptions:O(O({},st),t.searchOptions||{}),autoSuggestOptions:O(O({},St),t.autoSuggestOptions||{})}),this._index=new Y,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=rt,this.addFields(this._options.fields)}return a.prototype.add=function(t){var e,i,n,r,u,o,l=this._options,h=l.extractField,s=l.tokenize,f=l.processTerm,c=l.fields,v=l.idField,d=h(t,v);if(d==null)throw new Error('MiniSearch: document does not have ID field "'.concat(v,'"'));if(this._idToShortId.has(d))throw new Error("MiniSearch: duplicate ID ".concat(d));var p=this.addDocumentId(d);this.saveStoredFields(p,t);try{for(var y=F(c),g=y.next();!g.done;g=y.next()){var w=g.value,m=h(t,w);if(m!=null){var b=s(m.toString(),w),z=this._fieldIds[w],V=new Set(b).size;this.addFieldLength(p,z,this._documentCount-1,V);try{for(var x=(n=void 0,F(b)),C=x.next();!C.done;C=x.next()){var S=C.value,E=f(S,w);if(Array.isArray(E))try{for(var M=(u=void 0,F(E)),A=M.next();!A.done;A=M.next()){var L=A.value;this.addTerm(z,p,L)}}catch(D){u={error:D}}finally{try{A&&!A.done&&(o=M.return)&&o.call(M)}finally{if(u)throw u.error}}else E&&this.addTerm(z,p,E)}}catch(D){n={error:D}}finally{try{C&&!C.done&&(r=x.return)&&r.call(x)}finally{if(n)throw n.error}}}}}catch(D){e={error:D}}finally{try{g&&!g.done&&(i=y.return)&&i.call(y)}finally{if(e)throw e.error}}},a.prototype.addAll=function(t){var e,i;try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;this.add(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},a.prototype.addAllAsync=function(t,e){var i=this;e===void 0&&(e={});var n=e.chunkSize,r=n===void 0?10:n,u={chunk:[],promise:Promise.resolve()},o=t.reduce(function(s,f,c){var v=s.chunk,d=s.promise;return v.push(f),(c+1)%r===0?{chunk:[],promise:d.then(function(){return new Promise(function(p){return setTimeout(p,0)})}).then(function(){return i.addAll(v)})}:{chunk:v,promise:d}},u),l=o.chunk,h=o.promise;return h.then(function(){return i.addAll(l)})},a.prototype.remove=function(t){var e,i,n,r,u,o,l=this._options,h=l.tokenize,s=l.processTerm,f=l.extractField,c=l.fields,v=l.idField,d=f(t,v);if(d==null)throw new Error('MiniSearch: document does not have ID field "'.concat(v,'"'));var p=this._idToShortId.get(d);if(p==null)throw new Error("MiniSearch: cannot remove document with ID ".concat(d,": it is not in the index"));try{for(var y=F(c),g=y.next();!g.done;g=y.next()){var w=g.value,m=f(t,w);if(m!=null){var b=h(m.toString(),w),z=this._fieldIds[w],V=new Set(b).size;this.removeFieldLength(p,z,this._documentCount,V);try{for(var x=(n=void 0,F(b)),C=x.next();!C.done;C=x.next()){var S=C.value,E=s(S,w);if(Array.isArray(E))try{for(var M=(u=void 0,F(E)),A=M.next();!A.done;A=M.next()){var L=A.value;this.removeTerm(z,p,L)}}catch(D){u={error:D}}finally{try{A&&!A.done&&(o=M.return)&&o.call(M)}finally{if(u)throw u.error}}else E&&this.removeTerm(z,p,E)}}catch(D){n={error:D}}finally{try{C&&!C.done&&(r=x.return)&&r.call(x)}finally{if(n)throw n.error}}}}}catch(D){e={error:D}}finally{try{g&&!g.done&&(i=y.return)&&i.call(y)}finally{if(e)throw e.error}}this._storedFields.delete(p),this._documentIds.delete(p),this._idToShortId.delete(d),this._fieldLength.delete(p),this._documentCount-=1},a.prototype.removeAll=function(t){var e,i;if(t)try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;this.remove(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}else{if(arguments.length>0)throw new Error("Expected documents to be present. Omit the argument to remove all documents.");this._index=new Y,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldLength=new Map,this._avgFieldLength=[],this._storedFields=new Map,this._nextId=0}},a.prototype.discard=function(t){var e=this,i=this._idToShortId.get(t);if(i==null)throw new Error("MiniSearch: cannot discard document with ID ".concat(t,": it is not in the index"));this._idToShortId.delete(t),this._documentIds.delete(i),this._storedFields.delete(i),(this._fieldLength.get(i)||[]).forEach(function(n,r){e.removeFieldLength(i,r,e._documentCount,n)}),this._fieldLength.delete(i),this._documentCount-=1,this._dirtCount+=1,this.maybeAutoVacuum()},a.prototype.maybeAutoVacuum=function(){if(this._options.autoVacuum!==!1){var t=this._options.autoVacuum,e=t.minDirtFactor,i=t.minDirtCount,n=t.batchSize,r=t.batchWait;this.conditionalVacuum({batchSize:n,batchWait:r},{minDirtCount:i,minDirtFactor:e})}},a.prototype.discardAll=function(t){var e,i,n=this._options.autoVacuum;try{this._options.autoVacuum=!1;try{for(var r=F(t),u=r.next();!u.done;u=r.next()){var o=u.value;this.discard(o)}}catch(l){e={error:l}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}}finally{this._options.autoVacuum=n}this.maybeAutoVacuum()},a.prototype.replace=function(t){var e=this._options,i=e.idField,n=e.extractField,r=n(t,i);this.discard(r),this.add(t)},a.prototype.vacuum=function(t){return t===void 0&&(t={}),this.conditionalVacuum(t)},a.prototype.conditionalVacuum=function(t,e){var i=this;return this._currentVacuum?(this._enqueuedVacuumConditions=this._enqueuedVacuumConditions&&e,this._enqueuedVacuum!=null?this._enqueuedVacuum:(this._enqueuedVacuum=this._currentVacuum.then(function(){var n=i._enqueuedVacuumConditions;return i._enqueuedVacuumConditions=rt,i.performVacuuming(t,n)}),this._enqueuedVacuum)):this.vacuumConditionsMet(e)===!1?Promise.resolve():(this._currentVacuum=this.performVacuuming(t),this._currentVacuum)},a.prototype.performVacuuming=function(t,e){return yt(this,void 0,void 0,function(){var i,n,r,u,o,l,h,s,f,c,v,d,p,y,g,w,m,b,z,V,x,C,S,E,M;return pt(this,function(A){switch(A.label){case 0:if(i=this._dirtCount,!this.vacuumConditionsMet(e))return[3,10];n=t.batchSize||et.batchSize,r=t.batchWait||et.batchWait,u=1,A.label=1;case 1:A.trys.push([1,7,8,9]),o=F(this._index),l=o.next(),A.label=2;case 2:if(l.done)return[3,6];h=_(l.value,2),s=h[0],f=h[1];try{for(c=(C=void 0,F(f)),v=c.next();!v.done;v=c.next()){d=_(v.value,2),p=d[0],y=d[1];try{for(g=(E=void 0,F(y)),w=g.next();!w.done;w=g.next())m=_(w.value,1),b=m[0],!this._documentIds.has(b)&&(y.size<=1?f.delete(p):y.delete(b))}catch(L){E={error:L}}finally{try{w&&!w.done&&(M=g.return)&&M.call(g)}finally{if(E)throw E.error}}}}catch(L){C={error:L}}finally{try{v&&!v.done&&(S=c.return)&&S.call(c)}finally{if(C)throw C.error}}return this._index.get(s).size===0&&this._index.delete(s),u%n!==0?[3,4]:[4,new Promise(function(L){return setTimeout(L,r)})];case 3:A.sent(),A.label=4;case 4:u+=1,A.label=5;case 5:return l=o.next(),[3,2];case 6:return[3,9];case 7:return z=A.sent(),V={error:z},[3,9];case 8:try{l&&!l.done&&(x=o.return)&&x.call(o)}finally{if(V)throw V.error}return[7];case 9:this._dirtCount-=i,A.label=10;case 10:return[4,null];case 11:return A.sent(),this._currentVacuum=this._enqueuedVacuum,this._enqueuedVacuum=null,[2]}})})},a.prototype.vacuumConditionsMet=function(t){if(t==null)return!0;var e=t.minDirtCount,i=t.minDirtFactor;return e=e||nt.minDirtCount,i=i||nt.minDirtFactor,this.dirtCount>=e&&this.dirtFactor>=i},Object.defineProperty(a.prototype,"isVacuuming",{get:function(){return this._currentVacuum!=null},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"dirtCount",{get:function(){return this._dirtCount},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"dirtFactor",{get:function(){return this._dirtCount/(1+this._documentCount+this._dirtCount)},enumerable:!1,configurable:!0}),a.prototype.has=function(t){return this._idToShortId.has(t)},a.prototype.getStoredFields=function(t){var e=this._idToShortId.get(t);if(e!=null)return this._storedFields.get(e)},a.prototype.search=function(t,e){var i,n;e===void 0&&(e={});var r=this.executeQuery(t,e),u=[];try{for(var o=F(r),l=o.next();!l.done;l=o.next()){var h=_(l.value,2),s=h[0],f=h[1],c=f.score,v=f.terms,d=f.match,p=v.length,y={id:this._documentIds.get(s),score:c*p,terms:Object.keys(d),match:d};Object.assign(y,this._storedFields.get(s)),(e.filter==null||e.filter(y))&&u.push(y)}}catch(g){i={error:g}}finally{try{l&&!l.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u.sort(ct),u},a.prototype.autoSuggest=function(t,e){var i,n,r,u;e===void 0&&(e={}),e=O(O({},this._options.autoSuggestOptions),e);var o=new Map;try{for(var l=F(this.search(t,e)),h=l.next();!h.done;h=l.next()){var s=h.value,f=s.score,c=s.terms,v=c.join(" "),d=o.get(v);d!=null?(d.score+=f,d.count+=1):o.set(v,{score:f,terms:c,count:1})}}catch(z){i={error:z}}finally{try{h&&!h.done&&(n=l.return)&&n.call(l)}finally{if(i)throw i.error}}var p=[];try{for(var y=F(o),g=y.next();!g.done;g=y.next()){var w=_(g.value,2),d=w[0],m=w[1],f=m.score,c=m.terms,b=m.count;p.push({suggestion:d,terms:c,score:f/b})}}catch(z){r={error:z}}finally{try{g&&!g.done&&(u=y.return)&&u.call(y)}finally{if(r)throw r.error}}return p.sort(ct),p},Object.defineProperty(a.prototype,"documentCount",{get:function(){return this._documentCount},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"termCount",{get:function(){return this._index.size},enumerable:!1,configurable:!0}),a.loadJSON=function(t,e){if(e==null)throw new Error("MiniSearch: loadJSON should be given the same options used when serializing the index");return this.loadJS(JSON.parse(t),e)},a.getDefault=function(t){if(tt.hasOwnProperty(t))return q(tt,t);throw new Error('MiniSearch: unknown option "'.concat(t,'"'))},a.loadJS=function(t,e){var i,n,r,u,o,l,h=t.index,s=t.documentCount,f=t.nextId,c=t.documentIds,v=t.fieldIds,d=t.fieldLength,p=t.averageFieldLength,y=t.storedFields,g=t.dirtCount,w=t.serializationVersion;if(w!==1&&w!==2)throw new Error("MiniSearch: cannot deserialize an index created with an incompatible version");var m=new a(e);m._documentCount=s,m._nextId=f,m._documentIds=$(c),m._idToShortId=new Map,m._fieldIds=v,m._fieldLength=$(d),m._avgFieldLength=p,m._storedFields=$(y),m._dirtCount=g||0,m._index=new Y;try{for(var b=F(m._documentIds),z=b.next();!z.done;z=b.next()){var V=_(z.value,2),x=V[0],C=V[1];m._idToShortId.set(C,x)}}catch(P){i={error:P}}finally{try{z&&!z.done&&(n=b.return)&&n.call(b)}finally{if(i)throw i.error}}try{for(var S=F(h),E=S.next();!E.done;E=S.next()){var M=_(E.value,2),A=M[0],L=M[1],D=new Map;try{for(var k=(o=void 0,F(Object.keys(L))),B=k.next();!B.done;B=k.next()){var T=B.value,W=L[T];w===1&&(W=W.ds),D.set(parseInt(T,10),$(W))}}catch(P){o={error:P}}finally{try{B&&!B.done&&(l=k.return)&&l.call(k)}finally{if(o)throw o.error}}m._index.set(A,D)}}catch(P){r={error:P}}finally{try{E&&!E.done&&(u=S.return)&&u.call(S)}finally{if(r)throw r.error}}return m},a.prototype.executeQuery=function(t,e){var i=this;if(e===void 0&&(e={}),typeof t!="string"){var n=O(O(O({},e),t),{queries:void 0}),r=t.queries.map(function(y){return i.executeQuery(y,n)});return this.combineResults(r,n.combineWith)}var u=this._options,o=u.tokenize,l=u.processTerm,h=u.searchOptions,s=O(O({tokenize:o,processTerm:l},h),e),f=s.tokenize,c=s.processTerm,v=f(t).flatMap(function(y){return c(y)}).filter(function(y){return!!y}),d=v.map(zt(s)),p=d.map(function(y){return i.executeQuerySpec(y,s)});return this.combineResults(p,s.combineWith)},a.prototype.executeQuerySpec=function(t,e){var i,n,r,u,o=O(O({},this._options.searchOptions),e),l=(o.fields||this._options.fields).reduce(function(T,W){var P;return O(O({},T),(P={},P[W]=q(o.boost,W)||1,P))},{}),h=o.boostDocument,s=o.weights,f=o.maxFuzzy,c=o.bm25,v=O(O({},st.weights),s),d=v.fuzzy,p=v.prefix,y=this._index.get(t.term),g=this.termResults(t.term,t.term,1,y,l,h,c),w,m;if(t.prefix&&(w=this._index.atPrefix(t.term)),t.fuzzy){var b=t.fuzzy===!0?.2:t.fuzzy,z=b<1?Math.min(f,Math.round(t.term.length*b)):b;z&&(m=this._index.fuzzyGet(t.term,z))}if(w)try{for(var V=F(w),x=V.next();!x.done;x=V.next()){var C=_(x.value,2),S=C[0],E=C[1],M=S.length-t.term.length;if(M){m==null||m.delete(S);var A=p*S.length/(S.length+.3*M);this.termResults(t.term,S,A,E,l,h,c,g)}}}catch(T){i={error:T}}finally{try{x&&!x.done&&(n=V.return)&&n.call(V)}finally{if(i)throw i.error}}if(m)try{for(var L=F(m.keys()),D=L.next();!D.done;D=L.next()){var S=D.value,k=_(m.get(S),2),B=k[0],M=k[1];if(M){var A=d*S.length/(S.length+M);this.termResults(t.term,S,A,B,l,h,c,g)}}}catch(T){r={error:T}}finally{try{D&&!D.done&&(u=L.return)&&u.call(L)}finally{if(r)throw r.error}}return g},a.prototype.combineResults=function(t,e){if(e===void 0&&(e=j),t.length===0)return new Map;var i=e.toLowerCase();return t.reduce(At[i])||new Map},a.prototype.toJSON=function(){var t,e,i,n,r=[];try{for(var u=F(this._index),o=u.next();!o.done;o=u.next()){var l=_(o.value,2),h=l[0],s=l[1],f={};try{for(var c=(i=void 0,F(s)),v=c.next();!v.done;v=c.next()){var d=_(v.value,2),p=d[0],y=d[1];f[p]=Object.fromEntries(y)}}catch(g){i={error:g}}finally{try{v&&!v.done&&(n=c.return)&&n.call(c)}finally{if(i)throw i.error}}r.push([h,f])}}catch(g){t={error:g}}finally{try{o&&!o.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:r,serializationVersion:2}},a.prototype.termResults=function(t,e,i,n,r,u,o,l){var h,s,f,c,v;if(l===void 0&&(l=new Map),n==null)return l;try{for(var d=F(Object.keys(r)),p=d.next();!p.done;p=d.next()){var y=p.value,g=r[y],w=this._fieldIds[y],m=n.get(w);if(m!=null){var b=m.size,z=this._avgFieldLength[w];try{for(var V=(f=void 0,F(m.keys())),x=V.next();!x.done;x=V.next()){var C=x.value;if(!this._documentIds.has(C)){this.removeTerm(w,C,e),b-=1;continue}var S=u?u(this._documentIds.get(C),e,this._storedFields.get(C)):1;if(S){var E=m.get(C),M=this._fieldLength.get(C)[w],A=bt(E,b,this._documentCount,M,z,o),L=i*g*S*A,D=l.get(C);if(D){D.score+=L,Et(D.terms,t);var k=q(D.match,e);k?k.push(y):D.match[e]=[y]}else l.set(C,{score:L,terms:[t],match:(v={},v[e]=[y],v)})}}}catch(B){f={error:B}}finally{try{x&&!x.done&&(c=V.return)&&c.call(V)}finally{if(f)throw f.error}}}}}catch(B){h={error:B}}finally{try{p&&!p.done&&(s=d.return)&&s.call(d)}finally{if(h)throw h.error}}return l},a.prototype.addTerm=function(t,e,i){var n=this._index.fetch(i,vt),r=n.get(t);if(r==null)r=new Map,r.set(e,1),n.set(t,r);else{var u=r.get(e);r.set(e,(u||0)+1)}},a.prototype.removeTerm=function(t,e,i){if(!this._index.has(i)){this.warnDocumentChanged(e,t,i);return}var n=this._index.fetch(i,vt),r=n.get(t);r==null||r.get(e)==null?this.warnDocumentChanged(e,t,i):r.get(e)<=1?r.size<=1?n.delete(t):r.delete(e):r.set(e,r.get(e)-1),this._index.get(i).size===0&&this._index.delete(i)},a.prototype.warnDocumentChanged=function(t,e,i){var n,r;try{for(var u=F(Object.keys(this._fieldIds)),o=u.next();!o.done;o=u.next()){var l=o.value;if(this._fieldIds[l]===e){this._options.logger("warn","MiniSearch: document with ID ".concat(this._documentIds.get(t),' has changed before removal: term "').concat(i,'" was not present in field "').concat(l,'". Removing a document after it has changed can corrupt the index!'),"version_conflict");return}}}catch(h){n={error:h}}finally{try{o&&!o.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}},a.prototype.addDocumentId=function(t){var e=this._nextId;return this._idToShortId.set(t,e),this._documentIds.set(e,t),this._documentCount+=1,this._nextId+=1,e},a.prototype.addFields=function(t){for(var e=0;e<t.length;e++)this._fieldIds[t[e]]=e},a.prototype.addFieldLength=function(t,e,i,n){var r=this._fieldLength.get(t);r==null&&this._fieldLength.set(t,r=[]),r[e]=n;var u=this._avgFieldLength[e]||0,o=u*i+n;this._avgFieldLength[e]=o/(i+1)},a.prototype.removeFieldLength=function(t,e,i,n){if(i===1){this._avgFieldLength[e]=0;return}var r=this._avgFieldLength[e]*i-n;this._avgFieldLength[e]=r/(i-1)},a.prototype.saveStoredFields=function(t,e){var i,n,r=this._options,u=r.storeFields,o=r.extractField;if(!(u==null||u.length===0)){var l=this._storedFields.get(t);l==null&&this._storedFields.set(t,l={});try{for(var h=F(u),s=h.next();!s.done;s=h.next()){var f=s.value,c=o(e,f);c!==void 0&&(l[f]=c)}}catch(v){i={error:v}}finally{try{s&&!s.done&&(n=h.return)&&n.call(h)}finally{if(i)throw i.error}}}},a}(),q=function(a,t){return Object.prototype.hasOwnProperty.call(a,t)?a[t]:void 0},At=(J={},J[j]=function(a,t){var e,i;try{for(var n=F(t.keys()),r=n.next();!r.done;r=n.next()){var u=r.value,o=a.get(u);if(o==null)a.set(u,t.get(u));else{var l=t.get(u),h=l.score,s=l.terms,f=l.match;o.score=o.score+h,o.match=Object.assign(o.match,f),ft(o.terms,s)}}}catch(c){e={error:c}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}return a},J[ht]=function(a,t){var e,i,n=new Map;try{for(var r=F(t.keys()),u=r.next();!u.done;u=r.next()){var o=u.value,l=a.get(o);if(l!=null){var h=t.get(o),s=h.score,f=h.terms,c=h.match;ft(l.terms,f),n.set(o,{score:l.score+s,terms:l.terms,match:Object.assign(l.match,c)})}}}catch(v){e={error:v}}finally{try{u&&!u.done&&(i=r.return)&&i.call(r)}finally{if(e)throw e.error}}return n},J[wt]=function(a,t){var e,i;try{for(var n=F(t.keys()),r=n.next();!r.done;r=n.next()){var u=r.value;a.delete(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}return a},J),Ct={k:1.2,b:.7,d:.5},bt=function(a,t,e,i,n,r){var u=r.k,o=r.b,l=r.d,h=Math.log(1+(e-t+.5)/(t+.5));return h*(l+a*(u+1)/(a+u*(1-o+o*i/n)))},zt=function(a){return function(t,e,i){var n=typeof a.fuzzy=="function"?a.fuzzy(t,e,i):a.fuzzy||!1,r=typeof a.prefix=="function"?a.prefix(t,e,i):a.prefix===!0;return{term:t,fuzzy:n,prefix:r}}},tt={idField:"id",extractField:function(a,t){return a[t]},tokenize:function(a,t){return a.split(Dt)},processTerm:function(a,t){return a.toLowerCase()},fields:void 0,searchOptions:void 0,storeFields:[],logger:function(a,t,e){return console!=null&&console.warn!=null&&console[a](t)},autoVacuum:!0},st={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:Ct},St={combineWith:ht,prefix:function(a,t,e){return t===e.length-1}},et={batchSize:1e3,batchWait:10},rt={minDirtFactor:.1,minDirtCount:20},nt=O(O({},et),rt),Et=function(a,t){a.includes(t)||a.push(t)},ft=function(a,t){var e,i;try{for(var n=F(t),r=n.next();!r.done;r=n.next()){var u=r.value;a.includes(u)||a.push(u)}}catch(o){e={error:o}}finally{try{r&&!r.done&&(i=n.return)&&i.call(n)}finally{if(e)throw e.error}}},ct=function(a,t){var e=a.score,i=t.score;return i-e},vt=function(){return new Map},$=function(a){var t,e,i=new Map;try{for(var n=F(Object.keys(a)),r=n.next();!r.done;r=n.next()){var u=r.value;i.set(parseInt(u,10),a[u])}}catch(o){t={error:o}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}return i},Dt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u;const dt=Object.entries,Mt=Object.fromEntries,Ot=Object.keys,U=100,Q=20,G=(a,t)=>{const e=a.toLowerCase(),i=t.toLowerCase(),n=[];let r=0,u=0;const o=(h,s=!1)=>{let f="";u===0?f=h.length>Q?`… ${h.slice(-Q)}`:h:s?f=h.length+u>U?`${h.slice(0,U-u)}… `:h:f=h.length>Q?`${h.slice(0,Q)} … ${h.slice(-Q)}`:h,f&&n.push(f),u+=f.length,s||(n.push(["mark",t]),u+=t.length,u>=U&&n.push(" …"))};let l=e.indexOf(i,r);if(l===-1)return null;for(;l>=0;){const h=l+i.length;if(o(a.slice(r,l)),r=h,u>U)break;l=e.indexOf(i,r)}return u<U&&o(a.slice(r),!0),n},Vt=(a,t,e={})=>{const i={};return t.search(a,{fuzzy:.2,prefix:!0,boost:{header:4,text:2,title:1},...e}).forEach(n=>{const{title:r,id:u,terms:o,score:l}=n,h=u.split("#")[0];i[h]||(i[h]={title:r,contents:[]});const{contents:s}=i[h],f=c=>{const v=G(n.title,c);if(v&&s.push({type:"title",id:u,display:v,score:l}),"header"in n){const d=G(n.header,c);d&&s.push({type:"heading",id:u.split("#")[0],display:d,score:l})}if("text"in n)for(const d of n.text){const p=G(d,c);p&&s.push({type:"content",header:"header"in n?n.header:n.title,id:u.split("#")[0],display:p,score:l})}"customFields"in n&&dt(n.customFields).forEach(([d,p])=>{p.forEach(y=>{const g=G(y,c);g&&s.push({type:"custom",id:u,index:d,display:g,score:l})})})};o.forEach(c=>{f(c)})}),Ot(i).sort((n,r)=>i[r].contents.reduce((u,{score:o})=>u+o,0)-i[n].contents.reduce((u,{score:o})=>u+o,0)).map(n=>i[n])},Lt=Mt(dt(JSON.parse("{\"/\":{\"documentCount\":298,\"nextId\":298,\"documentIds\":{\"0\":\"v-5bc3b2da#如何处理内存泄漏问题\",\"1\":\"v-5bc3b2da#为什么会导致内存泄漏\",\"2\":\"v-5bc3b2da#如何处理\",\"3\":\"v-5bc3b2da#闭包\",\"4\":\"v-5bc3b2da#闭包的应用\",\"5\":\"v-5bc3b2da\",\"6\":\"v-4d21c07a#什么是浏览器的缓存机制\",\"7\":\"v-4d21c07a#强制缓存\",\"8\":\"v-4d21c07a#协商缓存\",\"9\":\"v-4d21c07a#总结\",\"10\":\"v-4d21c07a\",\"11\":\"v-c0145384#什么是跨域\",\"12\":\"v-c0145384#同源策略\",\"13\":\"v-c0145384#如何解决跨域\",\"14\":\"v-c0145384#_1-通过-jsonp-跨域\",\"15\":\"v-c0145384#_2-cors-跨域\",\"16\":\"v-c0145384#_3-反向代理\",\"17\":\"v-c0145384\",\"18\":\"v-29367432#盒模型\",\"19\":\"v-29367432#标准盒模型\",\"20\":\"v-29367432#怪异盒模型\",\"21\":\"v-29367432\",\"22\":\"v-aad12c32#选择器\",\"23\":\"v-aad12c32#优先级\",\"24\":\"v-aad12c32#继承属性\",\"25\":\"v-aad12c32\",\"26\":\"v-75c3ec6e#单位\",\"27\":\"v-75c3ec6e\",\"28\":\"v-6e32d892#区别\",\"29\":\"v-6e32d892\",\"30\":\"v-fd14e8e4#什么是bfc\",\"31\":\"v-fd14e8e4#如何创建bfc\",\"32\":\"v-fd14e8e4#bfc的特性\",\"33\":\"v-fd14e8e4#应用场景\",\"34\":\"v-fd14e8e4\",\"35\":\"v-6237d1b1#什么是-css-渲染阻塞\",\"36\":\"v-6237d1b1#为什么会有-css-渲染阻塞\",\"37\":\"v-6237d1b1#如何避免-css-渲染阻塞\",\"38\":\"v-6237d1b1#_1-将-css-放在head标签中\",\"39\":\"v-6237d1b1#_2-使用媒体查询\",\"40\":\"v-6237d1b1#媒体查询\",\"41\":\"v-6237d1b1#媒体查询的使用场景\",\"42\":\"v-6237d1b1#_3-使用内联样式\",\"43\":\"v-6237d1b1#_4-使用preload和prefetch\",\"44\":\"v-6237d1b1\",\"45\":\"v-36e7ec57#基础概念\",\"46\":\"v-36e7ec57#属性\",\"47\":\"v-36e7ec57#容器属性\",\"48\":\"v-36e7ec57#项目属性\",\"49\":\"v-36e7ec57#常见布局\",\"50\":\"v-36e7ec57#三栏布局\",\"51\":\"v-36e7ec57\",\"52\":\"v-379d5da0#let-和-const-和-var\",\"53\":\"v-379d5da0#产生时间\",\"54\":\"v-379d5da0#作用域\",\"55\":\"v-379d5da0#作用域补充\",\"56\":\"v-379d5da0#变量提升-临时死亡区\",\"57\":\"v-379d5da0#重复声明\",\"58\":\"v-379d5da0#可变性\",\"59\":\"v-379d5da0#箭头函数\",\"60\":\"v-379d5da0#模板字符串\",\"61\":\"v-379d5da0#解构赋值\",\"62\":\"v-379d5da0#数组的解构赋值\",\"63\":\"v-379d5da0#对象的解构赋值\",\"64\":\"v-379d5da0#函数的解构赋值\",\"65\":\"v-379d5da0#扩展运算符\",\"66\":\"v-379d5da0#类\",\"67\":\"v-379d5da0#定义类\",\"68\":\"v-379d5da0#es5-的类\",\"69\":\"v-379d5da0#es6-的类\",\"70\":\"v-379d5da0#对类添加方法\",\"71\":\"v-379d5da0#类的继承\",\"72\":\"v-379d5da0#module-模块化\",\"73\":\"v-379d5da0#promise\",\"74\":\"v-379d5da0#promise-的基本使用\",\"75\":\"v-379d5da0#promise-的三种状态\",\"76\":\"v-379d5da0#实例方法\",\"77\":\"v-379d5da0#构造函数方法\",\"78\":\"v-379d5da0\",\"79\":\"v-35f016f2#this的指向类型\",\"80\":\"v-35f016f2#call和apply和bind的区别\",\"81\":\"v-35f016f2\",\"82\":\"v-b7fdfeba#功能\",\"83\":\"v-b7fdfeba#例子\",\"84\":\"v-b7fdfeba#代码实现\",\"85\":\"v-b7fdfeba#总结\",\"86\":\"v-b7fdfeba#参考\",\"87\":\"v-b7fdfeba\",\"88\":\"v-7521bc0a#题目要求\",\"89\":\"v-7521bc0a#思路\",\"90\":\"v-7521bc0a#代码实现\",\"91\":\"v-7521bc0a\",\"92\":\"v-f7cc4e6a#题目要求\",\"93\":\"v-f7cc4e6a#思路\",\"94\":\"v-f7cc4e6a#实现\",\"95\":\"v-f7cc4e6a\",\"96\":\"v-6b57fc0a#题目要求\",\"97\":\"v-6b57fc0a#思路\",\"98\":\"v-6b57fc0a#代码实现\",\"99\":\"v-6b57fc0a\",\"100\":\"v-5464e616\",\"101\":\"v-66e2f8be#基本数据类型\",\"102\":\"v-66e2f8be#number\",\"103\":\"v-66e2f8be#string\",\"104\":\"v-66e2f8be#boolean\",\"105\":\"v-66e2f8be#null\",\"106\":\"v-66e2f8be#undefined\",\"107\":\"v-66e2f8be#symbol\",\"108\":\"v-66e2f8be#引用数据类型\",\"109\":\"v-66e2f8be#object\",\"110\":\"v-66e2f8be#array\",\"111\":\"v-66e2f8be#function\",\"112\":\"v-66e2f8be#date\",\"113\":\"v-66e2f8be#regexp\",\"114\":\"v-66e2f8be#存储位置\",\"115\":\"v-66e2f8be\",\"116\":\"v-30525834#操作方法\",\"117\":\"v-30525834#增加元素\",\"118\":\"v-30525834#删除元素\",\"119\":\"v-30525834#修改元素\",\"120\":\"v-30525834#查找元素\",\"121\":\"v-30525834#排序方法\",\"122\":\"v-30525834#迭代方法\",\"123\":\"v-30525834#转化方法\",\"124\":\"v-30525834\",\"125\":\"v-2b9022fc#操作方法\",\"126\":\"v-2b9022fc#增加元素\",\"127\":\"v-2b9022fc#删除元素\",\"128\":\"v-2b9022fc#修改元素\",\"129\":\"v-2b9022fc#查找元素\",\"130\":\"v-2b9022fc#转换方法\",\"131\":\"v-2b9022fc#模板匹配方法\",\"132\":\"v-2b9022fc\",\"133\":\"v-a0326798#显示类型转化\",\"134\":\"v-a0326798#隐式类型转化\",\"135\":\"v-a0326798\",\"136\":\"v-3cb808b6#等于\",\"137\":\"v-3cb808b6#完全等于\",\"138\":\"v-3cb808b6#总结\",\"139\":\"v-3cb808b6\",\"140\":\"v-5f5c21dd#浅拷贝\",\"141\":\"v-5f5c21dd#常见的浅拷贝方法\",\"142\":\"v-5f5c21dd#深拷贝\",\"143\":\"v-5f5c21dd#常见的深拷贝方法\",\"144\":\"v-5f5c21dd#参考文章\",\"145\":\"v-5f5c21dd\",\"146\":\"v-568d3b89\",\"147\":\"v-13900acc#undefined\",\"148\":\"v-13900acc#null\",\"149\":\"v-13900acc#null-和-undefined-的相同点\",\"150\":\"v-13900acc#null-和-undefined-的不同点\",\"151\":\"v-13900acc\",\"152\":\"v-1514e16c#产生的原因\",\"153\":\"v-1514e16c#任务队列\",\"154\":\"v-1514e16c#事件循环\",\"155\":\"v-1514e16c#宏任务和微任务\",\"156\":\"v-1514e16c#代码示例\",\"157\":\"v-1514e16c\",\"158\":\"v-1ccf7368#作用域链分类\",\"159\":\"v-1ccf7368#作用域链\",\"160\":\"v-1ccf7368#词法作用域\",\"161\":\"v-1ccf7368#作用域链的场景\",\"162\":\"v-1ccf7368#闭包\",\"163\":\"v-1ccf7368#事件委托\",\"164\":\"v-1ccf7368#引申-事件模型\",\"165\":\"v-1ccf7368#事件和事件流\",\"166\":\"v-1ccf7368#事件模型\",\"167\":\"v-1ccf7368#原始事件模型\",\"168\":\"v-1ccf7368#标准事件模型\",\"169\":\"v-1ccf7368\",\"170\":\"v-452c4c68#原型\",\"171\":\"v-452c4c68#原型链\",\"172\":\"v-452c4c68#数组的原型链\",\"173\":\"v-452c4c68\",\"174\":\"v-d4d1ccf8#es5-的继承\",\"175\":\"v-d4d1ccf8#es6-的继承\",\"176\":\"v-d4d1ccf8\",\"177\":\"v-6cfad872\",\"178\":\"v-bce0ae32#应用层\",\"179\":\"v-bce0ae32#传输层\",\"180\":\"v-bce0ae32#tcp段的由来\",\"181\":\"v-bce0ae32#网络层\",\"182\":\"v-bce0ae32#链路层\",\"183\":\"v-bce0ae32#物理层\",\"184\":\"v-bce0ae32\",\"185\":\"v-54eae7a0#浏览器解析\",\"186\":\"v-54eae7a0#dns解析\",\"187\":\"v-54eae7a0#tcp连接\",\"188\":\"v-54eae7a0#ip协议\",\"189\":\"v-54eae7a0#mac地址\",\"190\":\"v-54eae7a0#网卡\",\"191\":\"v-54eae7a0#交换机\",\"192\":\"v-54eae7a0#路由器\",\"193\":\"v-54eae7a0\",\"194\":\"v-b53997e2#场景\",\"195\":\"v-b53997e2#实现\",\"196\":\"v-b53997e2#_1-使用-createapp-创建了两个-vue-实例\",\"197\":\"v-b53997e2\",\"198\":\"v-a85593e6#什么是-jsx\",\"199\":\"v-a85593e6#jsx-转化过程\",\"200\":\"v-a85593e6#_1-转化为-react-元素\",\"201\":\"v-a85593e6#在-react16-中-会被转化成\",\"202\":\"v-a85593e6#在-react17-中-会被转化成\",\"203\":\"v-a85593e6#_2-react-元素转化为-fiber\",\"204\":\"v-a85593e6#_3-fiber-转化为-dom\",\"205\":\"v-a85593e6\",\"206\":\"v-0d084802#react-hooks\",\"207\":\"v-0d084802#类组件和函数组件\",\"208\":\"v-0d084802#类组件\",\"209\":\"v-0d084802#函数组件\",\"210\":\"v-0d084802#类组件和函数组件的区别\",\"211\":\"v-0d084802#hooks-种类\",\"212\":\"v-0d084802#usestate函数\",\"213\":\"v-0d084802#useeffect函数\",\"214\":\"v-0d084802#usecontext函数\",\"215\":\"v-0d084802#usereducer函数\",\"216\":\"v-0d084802#usememo函数\",\"217\":\"v-0d084802#usecallback函数\",\"218\":\"v-0d084802#useref函数\",\"219\":\"v-0d084802\",\"220\":\"v-08c026b0#什么是生命周期\",\"221\":\"v-08c026b0#生命周期的分类\",\"222\":\"v-08c026b0#_16-3-版本之前的生命周期\",\"223\":\"v-08c026b0#挂载阶段\",\"224\":\"v-08c026b0#更新阶段\",\"225\":\"v-08c026b0#卸载阶段\",\"226\":\"v-08c026b0#_16-3-版本之后的生命周期\",\"227\":\"v-08c026b0#挂载阶段-1\",\"228\":\"v-08c026b0#更新阶段-1\",\"229\":\"v-08c026b0#卸载阶段-1\",\"230\":\"v-08c026b0#hook函数\",\"231\":\"v-08c026b0\",\"232\":\"v-5ec739b6#父子组件通信\",\"233\":\"v-5ec739b6#父传子\",\"234\":\"v-5ec739b6#子传父\",\"235\":\"v-5ec739b6#兄弟组件通信\",\"236\":\"v-5ec739b6#跨级组件通信\",\"237\":\"v-5ec739b6#context\",\"238\":\"v-5ec739b6#任意组件通信\",\"239\":\"v-5ec739b6\",\"240\":\"v-9ec5e242#受控组件\",\"241\":\"v-9ec5e242#非受控组件\",\"242\":\"v-9ec5e242\",\"243\":\"v-4761c778#场景\",\"244\":\"v-4761c778#解决方案\",\"245\":\"v-4761c778#方案一-使用-localstorage\",\"246\":\"v-4761c778#方案二-使用路由参数\",\"247\":\"v-4761c778\",\"248\":\"v-015c1f8a#场景\",\"249\":\"v-015c1f8a#解决方案\",\"250\":\"v-015c1f8a#方案一-分页加载\",\"251\":\"v-015c1f8a#方案二-图片懒加载\",\"252\":\"v-015c1f8a#方案三-前端缓存\",\"253\":\"v-015c1f8a#方案四-虚拟列表\",\"254\":\"v-015c1f8a#方案五-骨架屏\",\"255\":\"v-015c1f8a\",\"256\":\"v-2376843a#什么是泛型\",\"257\":\"v-2376843a#泛型使用方式\",\"258\":\"v-2376843a#泛型函数\",\"259\":\"v-2376843a#泛型接口\",\"260\":\"v-2376843a#泛型类\",\"261\":\"v-2376843a#泛型约束\",\"262\":\"v-2376843a#泛型别名\",\"263\":\"v-2376843a#索引类型\",\"264\":\"v-2376843a\",\"265\":\"v-2b00a92c#相同点\",\"266\":\"v-2b00a92c#不同点\",\"267\":\"v-2b00a92c#方式\",\"268\":\"v-2b00a92c#编译过程\",\"269\":\"v-2b00a92c#触发生命周期\",\"270\":\"v-2b00a92c#性能\",\"271\":\"v-2b00a92c\",\"272\":\"v-3bdca45c#vue2\",\"273\":\"v-3bdca45c#创建前后\",\"274\":\"v-3bdca45c#挂载前后\",\"275\":\"v-3bdca45c#更新前后\",\"276\":\"v-3bdca45c#销毁前后\",\"277\":\"v-3bdca45c#其他\",\"278\":\"v-3bdca45c#vue3\",\"279\":\"v-3bdca45c#创建前后-1\",\"280\":\"v-3bdca45c#挂载前后-1\",\"281\":\"v-3bdca45c#更新前后-1\",\"282\":\"v-3bdca45c#销毁前后-1\",\"283\":\"v-3bdca45c#其他-1\",\"284\":\"v-3bdca45c#引申-1-keep-alive的是什么\",\"285\":\"v-3bdca45c#引申-2-当父组件发生更新-那么子组件的生命周期会发生怎么样的变化\",\"286\":\"v-3bdca45c#引申-3-keep-alive是否类似于react中的memo\",\"287\":\"v-3bdca45c#引申-4-keep-alive下的组件生命周期\",\"288\":\"v-3bdca45c#第一次渲染\",\"289\":\"v-3bdca45c#组件被激活\",\"290\":\"v-3bdca45c#组件被移除\",\"291\":\"v-3bdca45c#组件被销毁\",\"292\":\"v-3bdca45c\",\"293\":\"v-6c93545e#acm-模式获取输入\",\"294\":\"v-6c93545e#单行输入\",\"295\":\"v-6c93545e#多行输入\",\"296\":\"v-6c93545e#输入多组数据\",\"297\":\"v-6c93545e\"},\"fieldIds\":{\"id\":0,\"title\":1,\"header\":2,\"text\":3,\"customFields\":4},\"fieldLength\":{\"0\":[3,1,1,1],\"1\":[3,1,1,11],\"2\":[3,1,1,17],\"3\":[3,1,1,41],\"4\":[3,1,1,88],\"5\":[2,1,null,null,3],\"6\":[3,1,1,12],\"7\":[3,1,1,69],\"8\":[3,1,1,38],\"9\":[3,1,1,23],\"10\":[2,1,null,null,3],\"11\":[3,1,1,6],\"12\":[3,1,1,30],\"13\":[3,1,1,1],\"14\":[6,1,4,62],\"15\":[5,1,3,70],\"16\":[4,1,2,14],\"17\":[2,1,null,null,3],\"18\":[3,1,1,22],\"19\":[3,1,1,13],\"20\":[3,1,1,13],\"21\":[2,1,null,null,3],\"22\":[3,1,1,36],\"23\":[3,1,1,41],\"24\":[3,1,1,61],\"25\":[2,1,null,null,3],\"26\":[3,1,1,25],\"27\":[2,1,null,null,3],\"28\":[3,1,1,24],\"29\":[2,1,null,23,3],\"30\":[3,1,1,10],\"31\":[3,1,1,8],\"32\":[3,1,1,4],\"33\":[3,1,1,3],\"34\":[2,1,null,null,3],\"35\":[5,1,3,9],\"36\":[5,1,3,14],\"37\":[5,1,3,1],\"38\":[6,1,6,4],\"39\":[4,1,2,22],\"40\":[3,1,1,39],\"41\":[3,1,1,12],\"42\":[4,1,2,1],\"43\":[4,1,5,20],\"44\":[2,1,null,null,3],\"45\":[3,1,1,9],\"46\":[3,1,1,1],\"47\":[3,1,1,18],\"48\":[3,1,1,54],\"49\":[3,1,1,1],\"50\":[3,1,1,23],\"51\":[2,1,null,null,3],\"52\":[6,1,4,1],\"53\":[3,1,1,6],\"54\":[3,1,1,1],\"55\":[3,1,1,40],\"56\":[4,1,3,32],\"57\":[3,1,1,18],\"58\":[3,1,1,16],\"59\":[3,1,1,51],\"60\":[3,1,1,25],\"61\":[3,1,1,4],\"62\":[3,1,1,40],\"63\":[3,1,1,26],\"64\":[3,1,1,23],\"65\":[3,1,1,72],\"66\":[3,1,1,1],\"67\":[3,1,1,1],\"68\":[4,1,2,31],\"69\":[4,1,2,42],\"70\":[3,1,1,36],\"71\":[3,1,1,2],\"72\":[4,1,2,1],\"73\":[3,1,1,1],\"74\":[4,1,2,47],\"75\":[4,1,2,7],\"76\":[3,1,1,12],\"77\":[3,1,1,59],\"78\":[2,1,null,null,3],\"79\":[3,1,2,35],\"80\":[3,1,5,73],\"81\":[2,1,null,6,3],\"82\":[3,2,1,9],\"83\":[3,2,1,14],\"84\":[3,2,1,51],\"85\":[3,2,1,23],\"86\":[3,2,1,7],\"87\":[2,2,null,null,3],\"88\":[3,2,1,23],\"89\":[3,2,1,8],\"90\":[3,2,1,35],\"91\":[2,2,null,null,3],\"92\":[3,3,1,23],\"93\":[3,3,1,16],\"94\":[3,3,1,40],\"95\":[2,3,null,null,3],\"96\":[3,1,1,14],\"97\":[3,1,1,12],\"98\":[3,1,1,42],\"99\":[2,1,null,null,3],\"100\":[2,2,null,49,3],\"101\":[3,1,1,1],\"102\":[3,1,1,25],\"103\":[3,1,1,1],\"104\":[3,1,1,14],\"105\":[3,1,1,2],\"106\":[3,1,1,20],\"107\":[3,1,1,1],\"108\":[3,1,1,1],\"109\":[3,1,1,1],\"110\":[3,1,1,1],\"111\":[3,1,1,1],\"112\":[3,1,1,1],\"113\":[3,1,1,1],\"114\":[3,1,1,8],\"115\":[2,1,null,null,3],\"116\":[3,1,1,3],\"117\":[3,1,1,17],\"118\":[3,1,1,20],\"119\":[3,1,1,4],\"120\":[3,1,1,13],\"121\":[3,1,1,11],\"122\":[3,1,1,30],\"123\":[3,1,1,7],\"124\":[2,1,null,null,3],\"125\":[3,1,1,7],\"126\":[3,1,1,11],\"127\":[3,1,1,9],\"128\":[3,1,1,18],\"129\":[3,1,1,12],\"130\":[3,1,1,6],\"131\":[3,1,1,7],\"132\":[2,1,null,null,3],\"133\":[3,1,1,11],\"134\":[3,1,1,40],\"135\":[2,1,null,null,3],\"136\":[3,1,1,32],\"137\":[3,1,1,19],\"138\":[3,1,1,14],\"139\":[2,1,null,null,3],\"140\":[3,1,1,10],\"141\":[3,1,1,8],\"142\":[3,1,1,51],\"143\":[3,1,1,9],\"144\":[3,1,1,1],\"145\":[2,1,null,null,3],\"146\":[2,1,null,null,3],\"147\":[3,1,1,18],\"148\":[3,1,1,19],\"149\":[6,1,4,17],\"150\":[6,1,4,15],\"151\":[2,1,null,null,3],\"152\":[3,1,1,11],\"153\":[3,1,1,12],\"154\":[3,1,1,7],\"155\":[3,1,1,32],\"156\":[3,1,1,99],\"157\":[2,1,null,null,3],\"158\":[3,1,1,3],\"159\":[3,1,1,9],\"160\":[3,1,1,44],\"161\":[3,1,1,1],\"162\":[3,1,1,20],\"163\":[3,1,1,60],\"164\":[4,1,2,1],\"165\":[3,1,1,15],\"166\":[3,1,1,3],\"167\":[3,1,1,33],\"168\":[3,1,1,43],\"169\":[2,1,null,null,3],\"170\":[3,1,1,8],\"171\":[3,1,1,9],\"172\":[3,1,1,3],\"173\":[2,1,null,1,3],\"174\":[4,1,2,54],\"175\":[4,1,2,53],\"176\":[2,1,null,null,3],\"177\":[2,1,null,null,3],\"178\":[3,2,1,13],\"179\":[3,2,1,23],\"180\":[3,2,1,6],\"181\":[3,2,1,37],\"182\":[3,2,1,4],\"183\":[3,2,1,6],\"184\":[2,2,null,null,3],\"185\":[3,3,1,23],\"186\":[3,3,1,15],\"187\":[3,3,1,10],\"188\":[3,3,1,6],\"189\":[3,3,1,17],\"190\":[3,3,1,5],\"191\":[3,3,1,7],\"192\":[3,3,1,5],\"193\":[2,3,null,null,3],\"194\":[3,1,1,13],\"195\":[3,1,1,1],\"196\":[8,1,6,22],\"197\":[2,1,null,null,3],\"198\":[4,1,3,7],\"199\":[4,1,2,1],\"200\":[6,1,4,21],\"201\":[6,1,5,60],\"202\":[6,1,5,58],\"203\":[6,1,4,48],\"204\":[6,1,4,4],\"205\":[2,1,null,null,3],\"206\":[4,2,2,1],\"207\":[3,2,1,1],\"208\":[3,2,1,39],\"209\":[3,2,1,28],\"210\":[3,2,1,12],\"211\":[4,2,2,1],\"212\":[3,2,2,38],\"213\":[3,2,2,46],\"214\":[3,2,2,60],\"215\":[3,2,2,38],\"216\":[3,2,2,54],\"217\":[3,2,2,55],\"218\":[3,2,2,99],\"219\":[2,2,null,null,3],\"220\":[3,1,1,45],\"221\":[3,1,1,1],\"222\":[5,1,3,1],\"223\":[3,1,1,37],\"224\":[3,1,1,53],\"225\":[3,1,1,15],\"226\":[5,1,3,1],\"227\":[4,1,1,31],\"228\":[4,1,1,36],\"229\":[4,1,1,16],\"230\":[3,1,2,45],\"231\":[2,1,null,null,3],\"232\":[3,1,1,1],\"233\":[3,1,1,40],\"234\":[3,1,1,63],\"235\":[3,1,1,57],\"236\":[3,1,1,11],\"237\":[3,1,1,31],\"238\":[3,1,1,5],\"239\":[2,1,null,null,3],\"240\":[3,1,1,40],\"241\":[3,1,1,41],\"242\":[2,1,null,null,3],\"243\":[3,1,1,6],\"244\":[3,1,1,1],\"245\":[5,1,3,52],\"246\":[4,1,2,74],\"247\":[2,1,null,null,3],\"248\":[3,1,1,9],\"249\":[3,1,1,1],\"250\":[4,1,2,50],\"251\":[4,1,2,61],\"252\":[4,1,2,8],\"253\":[4,1,2,58],\"254\":[4,1,2,39],\"255\":[2,1,null,null,3],\"256\":[3,1,1,12],\"257\":[3,1,1,4],\"258\":[3,1,1,10],\"259\":[3,1,1,9],\"260\":[3,1,1,9],\"261\":[3,1,1,16],\"262\":[3,1,1,28],\"263\":[3,1,1,18],\"264\":[2,1,null,null,3],\"265\":[3,4,1,15],\"266\":[3,4,1,1],\"267\":[3,4,1,25],\"268\":[3,4,1,15],\"269\":[3,4,1,16],\"270\":[3,4,1,7],\"271\":[2,4,null,null,3],\"272\":[3,1,1,5],\"273\":[3,1,1,28],\"274\":[3,1,1,16],\"275\":[3,1,1,18],\"276\":[3,1,1,8],\"277\":[3,1,1,12],\"278\":[3,1,1,1],\"279\":[4,1,1,10],\"280\":[4,1,1,7],\"281\":[4,1,1,18],\"282\":[4,1,1,8],\"283\":[4,1,1,12],\"284\":[6,1,6,24],\"285\":[6,1,5,12],\"286\":[6,1,9,10],\"287\":[6,1,5,5],\"288\":[3,1,1,1],\"289\":[3,1,1,4],\"290\":[3,1,1,4],\"291\":[3,1,1,1],\"292\":[2,1,null,2,3],\"293\":[4,2,2,1],\"294\":[3,2,1,11],\"295\":[3,2,1,30],\"296\":[3,2,1,38],\"297\":[2,2,null,9,3]},\"averageFieldLength\":[3.1644295302013425,1.2818791946308723,1.4422274572118297,21.138810613719833,1.635474728607366],\"storedFields\":{\"0\":{\"title\":\"内存泄漏\",\"header\":\"如何处理内存泄漏问题\",\"text\":[]},\"1\":{\"title\":\"内存泄漏\",\"header\":\"为什么会导致内存泄漏\",\"text\":[\"正常浏览器会存在垃圾回收机制，会将不会被使用的对象进行清除，但是如果存在引用，那么就不会被清除，就会导致内存泄漏。\",\"使用全局变量\",\"闭包\",\"循环引用：对象之前出现相互引用的情况，导致垃圾回收机制无法回收\",\"未清理的定时器或者回调函数\"]},\"2\":{\"title\":\"内存泄漏\",\"header\":\"如何处理\",\"text\":[\"使用 let 和 const 声明变量，避免使用 var\",\"使用闭包时，注意闭包中的变量是否会被使用，如果不会被使用，那么就会导致内存泄漏\",\"使用定时器时，注意清除定时器\",\"WeakMap 之类弱引用的数据结构\",\"引申：闭包\"]},\"3\":{\"title\":\"内存泄漏\",\"header\":\"闭包\",\"text\":[\"闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量。\",\"function fn1() { var a = 2; function fn2() { console.log(a); } return fn2; } var fn3 = fn1(); fn3(); // 2 \",\"从上述代码我们可以知道，fn3 作为 fn1 的返回值，fn3 可以访问到 fn1 中的变量 a，这就是闭包的一个特性：函数可以访问其声明外部的函数的作用域。\",\"闭包的另一个特性是：即使创建它的上下文已经销毁，它仍然存在。因为闭包会携带包含它的函数的作用域，所以会比其他函数占用更多的内存。\",\"function fn1() { var a = 2; function fn2() { console.log(a); } return fn2; } var fn3 = fn1(); fn3(); fn3 = null; \",\"根据上述代码进行分析：\",\"fn3 被赋值为 null，意味着对 fn3 的引用已经被释放,fn3 已经被销毁\",\"fn3 = fn1(),将fn1的返回值给了fn3,此时fn3指向了fn2，虽然fn3被销毁了，但是fn2依然会访问到外部作用域的变量，是一个闭包，无法销毁。fn2 无法被销毁\",\"因此fn1也不会被销毁，他的变量还在内存中被fn2引用着，fn1 无法被销毁\"]},\"4\":{\"title\":\"内存泄漏\",\"header\":\"闭包的应用\",\"text\":[\"闭包可以用来模拟块级作用域\",\"for (var i = 0; i < 5; i++) { (function (j) { setTimeout(function () { console.log(j); // 0,1,2,3,4 }, j * 1000); })(i); } \",\"分析一下上述代码：\",\"(function (j) {...})(i)这段代码其实是一个闭包，i作为参数传递给了闭包，i的值会被保存在闭包中，当setTimeout执行时，会访问到闭包中的i。\",\"因为setTimeout是一个异步函数，所以会在循环结束后才会执行，此时i的值已经变成了5。\",\"但是因为使用了闭包，所以i的值会被保存在闭包中，所以会输出0,1,2,3,4。\",\"不使用闭包情况下：\",\"for (var i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 5,5,5,5,5 }, i * 1000); } \",\"假如使用变量let\",\"for (let i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 0,1,2,3,4 }, i * 1000); } \",\"那么为什么会产生不同呢？\",\"var定义的变量会具有变量提升的特性，所以var定义的变量会被提升到全局作用域中，所以setTimeout中访问到的i是全局作用域中的i，而全局作用域中的i在循环结束后，值为5。\",\"代码会变为：\",\"var i; for (i = 0; i < 5; i++) { setTimeout(function () { console.log(i); // 5,5,5,5,5 }, i * 1000); } \",\"let定义的变量不会具有变量提升的特性，所以setTimeout中访问到的i是for循环中的i，在每次循环时，都会重新定义，所以每次循环时，i的值都不一样。\",\"闭包可以用来封装私有变量\",\"function Person(name) { var _age; // 私有变量 function setAge(n) { _age = n; } function getAge() { return _age; } return { name: name, getAge: getAge, setAge: setAge, }; } var p1 = Person(\\\"张三\\\"); p1.setAge(25); console.log(p1.getAge()); \",\"闭包进行延迟执行\",\"闭包可以用来延迟函数的执行，当需要在某个时间点上执行函数，但是又不想立即执行该函数时，可以使用闭包来延迟函数的执行。\",\"function delay(func, delayTime) { return function () { var args = arguments; var _this = this; setTimeout(function () { func.apply(_this, args); // 通过apply将参数传递给func }, delayTime); } } function fn(a, b) { console.log(a + b); } var fn1 = delay(fn, 1000); fn1(1, 2); // 3 \",\"一般会在场景题里面出现\",\"为什么要使用闭包来延迟函数的执行呢？为什么不是直接使用setTimeout来延迟函数的执行呢？\",\"function fn(a, b) { console.log(a + b); } setTimeout(fn, 1000, 1, 2); // 3 \",\"原因：在函数中使用setTimeout，会创建一个新的上下文，并将其放在任务队列里面。等到执行栈中的代码执行完毕后，才会执行任务队列中的代码。这时候就会无法获取到父函数中的变量。\"]},\"5\":{\"title\":\"内存泄漏\",\"customFields\":{\"0\":[\"浏览器\"],\"1\":[\"内存泄漏\"]}},\"6\":{\"title\":\"缓存机制\",\"header\":\"什么是浏览器的缓存机制\",\"text\":[\"浏览器缓存机制又可以称为是Http缓存机制`，是指浏览器对于静态资源的缓存策略。 对于一些重复性的请求，浏览器会将请求的资源缓存起来，当下次请求时，如果资源没有发生变化，就会直接从缓存中获取，而不是再次向服务器发起请求。\",\"实现HTTP缓存的方式有很多，但是大体上可以分为两种：\",\"强制缓存\",\"协商缓存\"]},\"7\":{\"title\":\"缓存机制\",\"header\":\"强制缓存\",\"text\":[\"浏览器在第一次请求资源时，服务器会将资源的缓存策略一起返回给浏览器，浏览器会根据缓存策略来决定是否缓存资源。由浏览器来决定，是不是使用缓存，而不是由服务器来决定。\",\"强制缓存主要使用的是响应头中的两个字段：Expires和Cache-Control。\",\"Expires：是一个绝对时间，用来指定资源的过期时间，即到了这个时间，浏览器就会向服务器发起请求，如果没有发生变化，就会使用缓存。 但是到了HTTP1.1以后，Expires就被Cache-COntrol替换了，这是因为，Expires是一个绝对时间，是由服务器来设置的，如果服务器的时间和浏览器的时间不一致，就会导致缓存失效，但是浏览器第二次请求时，服务器的时间和浏览器的时间可能就一致了，这样就会导致缓存生效，但是实际上，资源已经发生了变化，这样就会导致缓存失效。\",\"Cache-Control：是一个相对时间，用来指定资源的过期时间，即到了这个时间，浏览器就会向服务器发起请求，如果没有发生变化，就会使用缓存。 Cache-Control的值有很多，常用的有以下几个： \",\"no-cache：不使用强制缓存，但是会使用协商缓存。\",\"no-store：不使用强制缓存，也不使用协商缓存。\",\"max-age：指定资源的过期时间，单位是秒，缓存内容将在这个时间之后失效。\",\"s-maxage：和max-age的作用一样，但是只针对于代理服务器，比如CDN。\",\"Cache-Control的优先级要高于Expires\",\"引申：浏览器缓存，那么将请求的资源缓存到哪里呢？ 浏览器缓存主要分为两种：内存缓存和硬盘缓存\",\"内存缓存的优点是读取速度快，但是缺点是存储空间小，而且会随着浏览器(进程)的关闭而释放。\",\"硬盘缓存的优点是存储空间大，而且不会随着浏览器的关闭而释放，但是缺点是读取速度慢。\",\"浏览器会将js和图片解析完成后将他们放在内存缓存中，将css文件会存放在硬盘中\",\"浏览器强制缓存\"]},\"8\":{\"title\":\"缓存机制\",\"header\":\"协商缓存\",\"text\":[\"协商缓存是指，当强制缓存失效以后，浏览器会携带缓存标识向服务器发起请求，由服务器根据缓存标识来决定是否使用缓存。\",\"控制协商缓存的字段有两组：\",\"Last-Modified和If-Modified-Since：表示的是时间，最后一次修改时间。\",\"ETag和If-None-Match：表示的是资源的唯一标识，是一个字符串。 其中，Etag的优先级会高一点\",\"具体流程如下：\",\"当强制缓存失效后，浏览器再次发送请求到服务器，并且会在请求头里面携带If-Modified-Since或者If-None-Match字段，这两个字段的值分别是上一次请求返回的Last-Modified和ETag的值。\",\"服务器接受到请求后，会根据If-Modified-Since或者If-None-Match的值和资源的最新修改时间或者ETag的值进行对比，如果没有发生变化，就会返回304，并且不会返回资源内容，浏览器就会使用缓存，如果发生了变化，就会返回200，并且返回资源内容，浏览器就会使用最新的资源。\"]},\"9\":{\"title\":\"缓存机制\",\"header\":\"总结\",\"text\":[\"强制缓存优先于协商缓存进行，若强制缓存(Expires 和 Cache-Control)生效则直接使用缓存，若不生效则进行协商缓存(Last-Modified / If-Modified-Since和ETag / If-None-Match)，协商缓存由服务器决定是否使用缓存，若协商缓存失效，那么代表该请求的缓存失效，重新获取请求结果，再存入浏览器缓存中；生效则返回 304，继续使用缓存。\",\"浏览器缓存\"]},\"10\":{\"title\":\"缓存机制\",\"customFields\":{\"0\":[\"浏览器\"],\"1\":[\"浏览器\",\"缓存\"]}},\"11\":{\"title\":\"跨域问腿\",\"header\":\"什么是跨域\",\"text\":[\"跨域是指浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。\",\"引申： 什么是同源策略？\"]},\"12\":{\"title\":\"跨域问腿\",\"header\":\"同源策略\",\"text\":[\"浏览器规定，AJAX请求只能发给同源的网址，否则就报错。所谓同源是指，域名，协议，端口相同。\",\"例如：\",\"http://www.example.com/dir/page.html http://www.example.com/dir2/other.html # 同源 https://www.example.com/dir/page.html # 不同源（协议不同） http://www.example.com:81/dir/page.html # 不同源（端口不同） http://www.example.com/dir/page.html # 不同源（域名不同） \",\"比如你在请求一个跨域的接口，浏览器会将这个请求拦截下来，不会发出去，也不会返回结果，但是浏览器的控制台中会显示出如下错误信息：\"]},\"13\":{\"title\":\"跨域问腿\",\"header\":\"如何解决跨域\",\"text\":[]},\"14\":{\"title\":\"跨域问腿\",\"header\":\"1. 通过 jsonp 跨域\",\"text\":[\"jsonp的原理是动态创建script标签\",\"HTML5 的 script 标签，默认 type 就是 text/javascript,这时候请求的内容就会被当做javascript代码去执行，然后就可以拿到数据。\",\"<script> var script = document.createElement('script'); script.type = 'text/javascript'; // 传参并指定回调执行函数为onBack script.src = 'http://www.domain2.com:8080/login?user=admin&callback=onBack'; document.head.appendChild(script); // 回调执行函数 function onBack(res) { alert(JSON.stringify(res)); } </script> \",\"也就是说，我们在客户端提前设置好一个函数，这个函数的作用是拿到服务器返回的数据，然后做一些事情，这个函数就是onBack。 当服务器看到这些额外的参数，就会将要返回的数据包裹在这个函数里面，然后以 JSON 格式返回给客户端。\",\"JOSNP 的优缺点：\",\"优点：兼容性好，简单易用，支持浏览器与服务器双向通信。\",\"缺点：只支持 GET 请求，不安全，可能会遭受 XSS 攻击。\"]},\"15\":{\"title\":\"跨域问腿\",\"header\":\"2. CORS 跨域\",\"text\":[\"当浏览器在发送跨域请求的时候，会自动在请求头中加入Origin字段，这个字段的值就是当前页面的源（协议 + 域名 + 端口）。\",\"这时候服务器就可以根据这个值来决定是否同意这次请求。可以设置Access-Control-Allow-Origin字段来允许指定源的请求。\",\"当用户想要修改服务器数据的时候，例如 PUT，Patch 之类的，浏览器就会自动发送一个预检请求，这个请求是一个OPTIONS请求，这个请求的作用是询问服务器是否允许这种请求，如果服务器允许，就会在响应头中加入Access-Control-Allow-Methods字段，告诉浏览器允许这种请求。\",\"// nodejs const http = require('http'); const server = http.createServer(); server.on('request', (req, res) => { // 设置响应头，允许跨域 res.setHeader('Access-Control-Allow-Origin', '*'); // 设置响应头，允许跨域的请求方式 res.setHeader('Access-Control-Allow-Methods', 'GET,POST,DELETE,OPTIONS'); // 允许前端获取哪个请求头 res.setHeader('Access-Control-Allow-Headers', 'x-requested-with,content-type'); // 设置响应头，允许跨域携带cookie res.setHeader('Access-Control-Allow-Credentials', true); // 设置响应体 res.end('hello cors'); }); server.listen(3000, () => { console.log('server running at http:// localhost:3000'); }); \",\"具体流程如下：\"]},\"16\":{\"title\":\"跨域问腿\",\"header\":\"3. 反向代理\",\"text\":[\"反向代理的原理是：同源策略是浏览器的安全策略，不是服务器的安全策略，服务器完全可以不遵守同源策略，服务器可以接收任何请求，也可以发送任何请求，所以我们可以通过服务器来请求接口，然后再将结果返回给浏览器，这样浏览器就认为这是同源的了。\",\"一般在项目中，我们可以去配置nginx来做反向代理，也可以配置Vite, webpack等工具来做反向代理。\"]},\"17\":{\"title\":\"跨域问腿\",\"customFields\":{\"0\":[\"浏览器\"],\"1\":[\"跨域\",\"配置\"]}},\"18\":{\"title\":\"CSS的盒模型\",\"header\":\"盒模型\",\"text\":[\"盒模型是一个矩形的盒子，它包含了元素的内容、内边距、边框和外边距。\",\"css 中盒模型分为两种：标准盒模型和 IE 盒模型。\",\"标准盒模型：width = content\",\"IE 盒模型：width = content + padding + border\",\"在CSS中通过box-sizing来进行设置\",\" box-sizing: content-box; /* 标准盒模型 */ box-sizing: border-box; /* IE盒模型 */ \"]},\"19\":{\"title\":\"CSS的盒模型\",\"header\":\"标准盒模型\",\"text\":[\"标准盒模型其实就是width就是内容的宽度，不包含padding和border。\",\"width = content\",\"height = content\",\"盒子实际宽高：\",\"盒子的总宽度是width + padding + border+margin。\",\"盒子的总高度是height + padding + border+margin。\"]},\"20\":{\"title\":\"CSS的盒模型\",\"header\":\"怪异盒模型\",\"text\":[\"你设置多大的width和height，盒子就是多大，不管你有没有设置padding和border。\",\"width = content + padding + border\",\"height = content + padding + border\",\"盒子的总宽度是width+margin。 盒子的总高度是height+margin。\",\"盒模型图例\"]},\"21\":{\"title\":\"CSS的盒模型\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"盒模型\"]}},\"22\":{\"title\":\"CSS选择器\",\"header\":\"选择器\",\"text\":[\"css 中选择器主要分为以下几种：\",\"元素选择器 \",\"普通元素选择器，类似div，p\",\"伪元素选择器，类似::before，::after，可以在里面插入内容\",\"类选择器 \",\"类选择器，类似.class\",\"伪类选择器,类似:hover，:active，可以在里面插入样式\",\"id 选择器，类似#id\",\"属性选择器，类似[type=\\\"text\\\"]\",\"通配符选择器，类似*\",\"后代选择器，类似div p\",\"子代选择器，类似div > p\",\"兄弟选择器，类似div + p\",\"群组选择器，类似div, p\",\"注意区分后代选择器和兄弟选择器的区别：\",\"后代选择器：div p,他会选择所有的div下的p元素，包括嵌套的p元素。\",\"兄弟选择器：div + p,他会选择所有的div下的紧邻的p元素，不包括嵌套的p元素。\"]},\"23\":{\"title\":\"CSS选择器\",\"header\":\"优先级\",\"text\":[\"css 中的优先级是根据选择器的权重来决定的，权重越高，优先级越高。 主要原则就是：ABCD法则\",\"A: 代表内联样式，权重为1000\",\"B: 代表 id 选择器，权重为100\",\"C: 代表类选择器，属性选择器，伪类选择器，权重为10\",\"D: 代表元素选择器，伪元素选择器，权重为1\",\"例子：\",\"#nav-global > ul > li > a.nav-link; \",\"使用ABCD法则计算权重：\",\"A(内联样式): 0\",\"B(ID 选择器): 1\",\"C(Class 选择器+属性选择器): 1\",\"D(元素选择器): 3\",\"所以权重为0113\"]},\"24\":{\"title\":\"CSS选择器\",\"header\":\"继承属性\",\"text\":[\"css 中有一些属性是可以继承的\",\"字体类\",\"font-family\",\"font-size\",\"font-weight\",\"font-style\",\"font-variant\",\"font\",\"文本类\",\"color: 文本颜色\",\"text-align: 文本对齐方式\",\"text-indent: 首行缩进\",\"元素可见性\",\"visibility: 元素是否可见\",\"表格类\",\"caption-side: 表格标题的位置\",\"empty-cells: 是否显示表格中的空单元格\",\"table-layout: 表格的布局方式\",\"border-collapse: 表格边框是否合并\",\"列表类\",\"list-style-type: 列表项标记的类型\",\"list-style-position: 列表项标记的位置\",\"list-style-image: 列表项标记的图像\",\"其实只要记录一些比较特殊的不可继承属性就可以了，其他的都是可以继承的。\",\"display\",\"文本类\",\"vertical-align：垂直对齐方式\",\"text-decoration: 文本装饰,添加下划线，删除线等\",\"盒子类\",\"width，height:宽高度\",\"margin，padding: 外边距，内边距\",\"border，border-width，border-style，border-color: 边框\",\"背景类\",\"float和position类\"]},\"25\":{\"title\":\"CSS选择器\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"选择器\",\"容易遗忘\"]}},\"26\":{\"title\":\"CSS中的单位\",\"header\":\"单位\",\"text\":[\"CSS中的常见单位有以下几种：\",\"px:像素点，是一个相对单位，相对于显示器的分辨率，一般情况下，1px = 1/96英寸\",\"%：百分比\",\"vh,vm：视窗高度和视窗宽度\",\"em：根据当前盒子的父元素的font-size来计算\",\"rem：根据根元素html的font-size来计算，一般情况下，1rtem = 16px\",\"%和vh,vm的区别：\",\"%是相对于父元素的宽度来计算的\",\"vh,vm是相对于视窗的高度和宽度来计算的\"]},\"27\":{\"title\":\"CSS中的单位\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"单位\"]}},\"28\":{\"title\":\"CSS实现隐藏元素的方法\",\"header\":\"区别\",\"text\":[\"其实日常开发中，我们一般使用display: none;来隐藏元素，但是这种方法会导致元素不占据空间，所以在一些特殊的场景下，我们需要使用其他的方法来隐藏元素。\",\"方法\",\"元素占据空间\",\"元素可点击\",\"元素可见\",\"visibility: hidden;\",\"是\",\"是\",\"否\",\"opcitiy: 0;\",\"是\",\"是\",\"否\",\"z-index: -1;\",\"是\",\"是\",\"否\",\"position: absolute;\",\"是\",\"是\",\"否\",\"height: 0;\",\"否\",\"否\",\"否\",\"display: none;\",\"否\",\"否\",\"否\"]},\"29\":{\"title\":\"CSS实现隐藏元素的方法\",\"text\":[\"常见的隐藏元素的方法有以下几种：\",\"visibility: hidden;,设置可见性为隐藏，但是元素还是占据空间\",\"opcitiy: 0;，设置透明度为 0，但是元素还是占据空间\",\"z-index: -1;，设置z-index为负数，但是元素还是占据空间\",\"position: absolute;，设置绝对定位，然后将元素移除屏幕，但是元素还是占据空间\",\"height: 0;，设置元素高度为 0，元素不占据空间\",\"display: none;，设置元素不显示，元素不占据空间\"],\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"隐藏元素\"]}},\"30\":{\"title\":\"BFC布局\",\"header\":\"什么是BFC\",\"text\":[\"BFC（Block Formatting Context）即块级格式化上下文，是一个独立的渲染区域，让处于 BFC 内部的元素与外部的元素相互隔离，使内外元素的定位不会相互影响。\"]},\"31\":{\"title\":\"BFC布局\",\"header\":\"如何创建BFC\",\"text\":[\"根元素或包含根元素的元素<html>\",\"浮动元素\",\"position: absolute或fixed\",\"display:不为none\",\"overflow:不为visible\"]},\"32\":{\"title\":\"BFC布局\",\"header\":\"BFC的特性\",\"text\":[\"不会存在外边距合并(margin塌陷问题)\",\"float,浮动元素会参与高度计算\"]},\"33\":{\"title\":\"BFC布局\",\"header\":\"应用场景\",\"text\":[\"防止margin塌陷\",\"清除浮动\",\"自适应两栏布局\"]},\"34\":{\"title\":\"BFC布局\",\"customFields\":{\"0\":[\"CSS篇\"],\"1\":[\"基础概念\",\"BFC\"]}},\"35\":{\"title\":\"css渲染阻塞\",\"header\":\"什么是 css 渲染阻塞\",\"text\":[\"css渲染阻塞是指浏览器在解析html时，如果遇到了css，会暂停html的解析，等css加载完毕后，再继续解析html。所以说，css 渲染阻塞会阻塞DOM树的构建。\"]},\"36\":{\"title\":\"css渲染阻塞\",\"header\":\"为什么会有 css 渲染阻塞\",\"text\":[\"当浏览器开始解析HTML文件时，就会生成DOM树，但是在生成DOM树的时候，如果遇到了css，就会停止DOM树的生成，等css加载完毕后，再继续生成DOM树。\",\"这样是为了确保css能够正确的渲染DOM树，因为css可以修改DOM树的样式，css下载，解析完毕后，再去渲染DOM树，就可以确保css能够正确的渲染DOM树。\"]},\"37\":{\"title\":\"css渲染阻塞\",\"header\":\"如何避免 css 渲染阻塞\",\"text\":[]},\"38\":{\"title\":\"css渲染阻塞\",\"header\":\"1. 将 css 放在 head 标签中\",\"text\":[\"将css放在head标签中，可以确保css在DOM树生成之前就加载完毕，这样就不会阻塞DOM树的生成。\"]},\"39\":{\"title\":\"css渲染阻塞\",\"header\":\"2. 使用媒体查询\",\"text\":[\"我们可以使用媒体查询来指定css的加载时机，这样就可以避免css阻塞DOM树的生成。\",\"<!-- 网页首次加载时，只在打印内容时适用 --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" media=\\\"print\\\" /> <!-- 当符合某种条件的时候才会阻塞渲染 --> <!-- 宽度至少是40em --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" media=\\\"(min-width: 40em)\\\" /> <!-- 一直会阻塞渲染 --> <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" /> \",\"引申：媒体查询\"]},\"40\":{\"title\":\"css渲染阻塞\",\"header\":\"媒体查询\",\"text\":[\"简单来说，媒体查询就是一种检测浏览器或设备特性的方法，可以根据不同的特性来加载不同的css\",\"媒体查询的语法如下：\",\"@media not|only mediatype and (expressions) { CSS-Code; } \",\"not：表示不匹配媒体类型的情况\",\"only：表示只匹配媒体类型的情况\",\"meidatype：指定媒体类型，如screen、print等\",\"expressions：媒体查询表达式，用来检测媒体类型的特性，如width、height等 \",\"max-width：最大宽度(至多多少)\",\"min-width：最小宽度(至少多少)\",\"语法改进：\",\"@media (min-width: 40em) { /* 宽度至少是40em */ } /* 现在可以改写成 */ @media (width >= 40em) { /* 宽度至少是40em */ } \",\"@media (min-width: 40em) and (max-width: 60em) { /* 宽度至少是40em，至多是60em */ } /* 现在可以改写成 */ @media (width >= 40em) and (width <= 60em) { /* 宽度至少是40em，至多是60em */ } \"]},\"41\":{\"title\":\"css渲染阻塞\",\"header\":\"媒体查询的使用场景\",\"text\":[\"响应式布局\",\"设置打印样式(@media print { ... })\",\"动态样式(根据不同的设备特性，加载不同的样式)\",\"图片优化(根据不同的设备，不同分辨率，加载不同的图片)\"]},\"42\":{\"title\":\"css渲染阻塞\",\"header\":\"3. 使用内联样式\",\"text\":[]},\"43\":{\"title\":\"css渲染阻塞\",\"header\":\"4. 使用 preload 和 prefetch\",\"text\":[\"preload和prefetch是html5中的新特性，可以用来指定资源的加载时机。\",\"preload用来指定当前页面必须要用到的资源，而prefetch用来指定当前页面可能会用到的资源。\",\"<!-- preload --> <link rel=\\\"preload\\\" href=\\\"style.css\\\" as=\\\"style\\\" /> <!-- prefetch --> <link rel=\\\"prefetch\\\" href=\\\"style.css\\\" as=\\\"style\\\" /> \",\"作用就是：预加载，提前加载，提前缓存，一般都是将他直接缓存在浏览器的缓存目录下。\"]},\"44\":{\"title\":\"css渲染阻塞\",\"customFields\":{\"0\":[\"CSS\"],\"1\":[\"CSS\",\"渲染\"]}},\"45\":{\"title\":\"flex布局\",\"header\":\"基础概念\",\"text\":[\"flex 布局是一种一维布局模型，可以实现更加灵活的布局方式，flex 布局的主要思想是让容器有能力让其子元素改变自身的宽度、高度、顺序，以及对齐方式等，以最适合当前的显示环境。\"]},\"46\":{\"title\":\"flex布局\",\"header\":\"属性\",\"text\":[]},\"47\":{\"title\":\"flex布局\",\"header\":\"容器属性\",\"text\":[\"就是对于父元素的属性\",\"flex-direction：决定主轴的方向\",\"flex-wrap: 决定元素是否换行\",\"align-items: 在副轴上如何对齐\",\"justify-content: 在主轴上如何对齐\",\"align-content: 多根轴线的对齐方式\",\"flex-flow: flex-direction和flex-wrap的简写,默认值为row nowrap\"]},\"48\":{\"title\":\"flex布局\",\"header\":\"项目属性\",\"text\":[\"order: 定义项目的排列顺序，数值越小，排列越靠前，默认为 0\",\"align-self: 允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性\",\"flex-grow: 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大\",\"flex-shrink: 定义项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小\",\"flex-basis: 定义在分配多余空间之前，项目占据的主轴空间（main size）\",\"flex: flex-grow、flex-shrink和flex-basis的简写，默认值为0 1 auto，后两个属性可选\",\"这边flex比较复杂，且很重要，所以单独拿出来说一下\",\"flex,一般会简写：\",\"flex: 1：相当于flex: 1 1 0,表明，在空间不足的情况下，不缩小，在空间有剩余的情况下，放大\",\"flex: auto：相当于flex: 1 1 auto,表明，在空间不足的情况下，缩小，在空间有剩余的情况下，放大\",\"flex:none: 相当于flex: 0 0 auto,表明，不放大，不缩小\",\"flex: 2 1 100px: 表明，放大比例为 2，缩小比例为 1，基准值为 100px\",\"场景：\",\"如果希望弹性项目可以占据多余空间，且会根据剩余空间的大小进行放大，可以使用flex: 1\",\"如果希望弹箱项目会根据位置和大小进行缩小，可以使用flex: auto\"]},\"49\":{\"title\":\"flex布局\",\"header\":\"常见布局\",\"text\":[]},\"50\":{\"title\":\"flex布局\",\"header\":\"三栏布局\",\"text\":[\"三栏布局：左右两边固定宽度，中间自适应\",\".content { display: flex; width: 400px; height: 600px; background-color: aquamarine; } .medium { flex: 1; background-color: yellow; } .left { width: 200px; height: 100%; background-color: blue; } .right { width: 200px; height: 100%; background-color: red; } \"]},\"51\":{\"title\":\"flex布局\",\"customFields\":{\"0\":[\"CSS\"],\"1\":[\"flex\",\"布局\",\"基础概念\"]}},\"52\":{\"title\":\"ES6新特新\",\"header\":\"let 和 const 和 var\",\"text\":[]},\"53\":{\"title\":\"ES6新特新\",\"header\":\"产生时间\",\"text\":[\"var是 ES5 的产物，let和const是 ES6 的产物。\"]},\"54\":{\"title\":\"ES6新特新\",\"header\":\"作用域\",\"text\":[]},\"55\":{\"title\":\"ES6新特新\",\"header\":\"作用域补充\",\"text\":[\"什么是作用域？\",\"作用域就是变量和函数的可访问范围，也就是说在什么范围内可以访问到变量和函数。\",\"作用域分类\",\"全局作用域：在代码的任何地方都可以访问到的变量和函数(只要不在函数内部或者在大括号内的都是全局作用域)。\",\"块级作用域：在大括号内可以访问到的变量和函数。\",\"函数作用域：在函数内部可以访问到的变量和函数。\",\"// 全局作用域 var a = 1; let b = 2; const c = 3; // 块级作用域 { var a = 4; let b = 5; const c = 6; console.log(a); // 4 console.log(b); // 5 console.log(c); // 6 } console.log(a); // 4 console.log(b); // 2 console.log(c); // 3 // 函数作用域 function fn() { var a = 7; let b = 8; const c = 9; console.log(a); // 7 console.log(b); // 8 console.log(c); // 9 } fn(); console.log(a); // 4 console.log(b); // 2 console.log(c); // 3 \",\"上述代码表明：\",\"var声明的变量在全局作用域和块级作用域中都可以访问到，并且是可以被改变的，但是在函数作用域中不能访问到。\",\"let和const声明的变量在全局作用域中可以访问到，但是在块级作用域和函数作用域中都不能访问到。(仅在当前这个作用域生效，可被改变)\"]},\"56\":{\"title\":\"ES6新特新\",\"header\":\"变量提升(临时死亡区)\",\"text\":[\"什么是变量提升？\",\"变量提升就是在代码执行之前，会把变量的声明提升到代码的最前面，但是，赋值还是在后面。\",\"什么是临时死亡区？\",\"临时死亡区就是代码块的起始位置到变量声明的位置，这段区域内不能访问到变量。如果访问，那么会报错(ReferenceError)\",\"console.log(a); // undefined var a = 1; console.log(a); // 1 \",\"上面这段代码表明，var声明的变量会被提升到代码的最前面，但是变量的赋值不会被提升。\",\"console.log(b); // 报错 let b = 2; console.log(b); // 2 \",\"上面这段代码表明，let声明的变量不会被提升到代码的最前面，所以在声明之前访问变量会报错。\",\"console.log(c); // 报错 const c = 3; console.log(c); // 3 \",\"上面这段代码表明，const声明的变量不会被提升到代码的最前面，所以在声明之前访问变量会报错。\"]},\"57\":{\"title\":\"ES6新特新\",\"header\":\"重复声明\",\"text\":[\"var声明的变量可以被重复声明，而let和const声明的变量不能被重复声明。\",\"var a = 1; var a = 2; console.log(a); // 2 \",\"上面这段代码表明，var声明的变量可以被重复声明，而且后面的声明会覆盖前面的声明。\",\"let b = 1; let b = 2; console.log(b); // 报错 const c = 1; const c = 2; console.log(c); // 报错 \",\"上面这段代码表明，let和const声明的变量不能被重复声明。\"]},\"58\":{\"title\":\"ES6新特新\",\"header\":\"可变性\",\"text\":[\"var和let声明的变量是可变的，而const声明的变量是不可变的。\",\"var a = 1; a = 2; console.log(a); // 2 let b = 1; b = 2; console.log(b); // 2 \",\"上面的代码表明，var和let声明的变量是可变的。\",\"const c = 1; c = 2; console.log(c); // 报错 \"]},\"59\":{\"title\":\"ES6新特新\",\"header\":\"箭头函数\",\"text\":[\"形式：() => {}\",\"特点：\",\"箭头函数没有this，this指向的是函数定义时所在的对象，而不是使用时所在的对象；但是普通函数有this,指向的是函数使用时所在的对象。\",\"const obj = { name: \\\"Summer\\\", fn: function () { console.log(this); // obj setTimeout(function () { console.log(this); // window，setTimeout是window的方法 }, 1000); }, fn2: function () { console.log(this); // obj setTimeout(() => { console.log(this); // obj，因为箭头函数没有this，所以this指向的是函数定义时所在的对象 }, 1000); }, }; obj.fn(); // obj，window obj.fn2(); // obj，obj \",\"再举一个例子\",\"function Timer() { console.log(this); // window, Timer是window的方法，是window调用的 this.name = \\\"Summer\\\"; setTimeout(function () { console.log(this.name); // undefined，因为普通函数有this，所以this指向的是使用时所在的对象，而使用时是window调用的，所以this指向的是window }, 1000); setTimeout(() => { console.log(this.name); // Summer，因为箭头函数没有this，所以this指向的是函数定义时所在的对象 }, 1000); } let timer = new Timer(); \",\"引申：this的指向问题\",\"具体参考，this 指向问题\",\"箭头函数没有arguments\",\"arguments是一个类数组对象，包含了函数的所有参数。简单理解为参数列表\",\"function fn() { console.log(arguments); } fn(1, 2, 3); // [1, 2, 3] \",\"const fn = () => { console.log(arguments); }; fn(1, 2, 3); // 报错 \"]},\"60\":{\"title\":\"ES6新特新\",\"header\":\"模板字符串\",\"text\":[\"模板字符串是增强版的字符串，用反引号(`)标识，它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。\",\"const name = \\\"Summer\\\"; const age = 18; const str = `My name is ${name}, I'm ${age} years old.`; console.log(str); // My name is Summer, I'm 18 years old. \"]},\"61\":{\"title\":\"ES6新特新\",\"header\":\"解构赋值\",\"text\":[\"解构赋值是对赋值运算符的扩展，它是一种针对数组或者对象进行模式匹配，然后对其中的变量进行赋值。\"]},\"62\":{\"title\":\"ES6新特新\",\"header\":\"数组的解构赋值\",\"text\":[\"类型：\",\"一一对应\",\"可以跳过某些元素\",\"使用省略号（剩余运算符），返回的是一个数组\",\"设置默认值\",\"解构不成功，变量的值就等于 undefined\",\"const arr = [1, 2, 3]; const [a, b, c] = arr; console.log(a, b, c); // 1, 2, 3 const [, , e] = arr; // 可以跳过某些元素 console.log(e); // 3 const [f, ...g] = arr; // 可以使用剩余运算符，但是需要注意的是，剩余运算符只能放在最后一位 console.log(f, g); // 1, [2, 3] const [h, i, j, k] = arr; // 如果解构不成功，变量的值就等于undefined const [l, m, n, o = 4] = arr; // 可以给变量设置默认值 \"]},\"63\":{\"title\":\"ES6新特新\",\"header\":\"对象的解构赋值\",\"text\":[\"类型：\",\"一一对应\",\"设置别名\",\"设置默认值\",\"使用省略号（剩余运算符），返回的是一个对象\",\"const obj = { name: \\\"Summer\\\", age: 18, }; const { name, age } = obj; console.log(name, age); // Summer, 18 const { name: myName, age: myAge } = obj; // 可以给变量设置别名 console.log(myName, myAge); // Summer, 18 const { name, age = 10 } = obj; // 可以给变量设置默认值 const { name, ...rest } = obj; // 可以使用剩余运算符，但是需要注意的是，剩余运算符只能放在最后一位 console.log(name, rest); // Summer, {age: 18} \"]},\"64\":{\"title\":\"ES6新特新\",\"header\":\"函数的解构赋值\",\"text\":[\"函数的解构赋值其实是针对于函数的参数而言的\",\"function fn([a, b, c]) { console.log(a, b, c); } fn([1, 2, 3]); // 1, 2, 3 function fn2({ name, age }) { console.log(name, age); } fn2({ name: \\\"Summer\\\", age: 18 }); // Summer, 18 function fn3({ name, age = 18 }) { // 设置默认值 console.log(name, age); } fn3({ name: \\\"Summer\\\" }); // Summer, 18 function fn4({ name, ...rest }) { // 使用剩余运算符 console.log(name, rest); } fn4({ name: \\\"Summer\\\", age: 18 }); // Summer, {age: 18} \"]},\"65\":{\"title\":\"ES6新特新\",\"header\":\"扩展运算符\",\"text\":[\"扩展运算符是三个点（...），它好比是 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列。\",\"console.log(...[1, 2, 3]); // 1, 2, 3 \",\"应用场景：\",\"数组合并\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; const arr3 = [...arr1, ...arr2]; console.log(arr3); // [1, 2, 3, 4, 5, 6] \",\"与解构赋值结合，获取数组的部分元素\",\"const arr = [1, 2, 3, 4, 5]; const [a, ...b] = arr; console.log(a, b); // 1, [2, 3, 4, 5] \",\"字符串转数组\",\"const str = \\\"Summer\\\"; const arr = [...str]; console.log(arr); // [\\\"S\\\", \\\"u\\\", \\\"m\\\", \\\"m\\\", \\\"e\\\", \\\"r\\\"] \",\"将伪数组转为真正的数组\",\"const divs = document.querySelectorAll(\\\"div\\\"); const arr = [...divs]; \",\"进行深拷贝\",\"const obj = { name: \\\"Summer\\\", age: 18 }; const obj2 = { ...obj }; \",\"在 react 中，可以使用扩展运算符来传递 props\",\"const obj = { name: \\\"Summer\\\", age: 18 }; const App = () => { return <Child {...obj} />; }; \",\"关于扩展运算符和解构赋值，都需要对象具有可迭代性（iterable）\",\"引申：在 JS 中哪些数据结构具有可迭代性？\",\"数组\",\"字符串\",\"Map(ES6 新增)\",\"Set(ES6 新增)\",\"arguments（参数列表）\",\"具有可迭代性的对象，可以使用解构赋值，扩展运算符以及for...of循环\"]},\"66\":{\"title\":\"ES6新特新\",\"header\":\"类\",\"text\":[]},\"67\":{\"title\":\"ES6新特新\",\"header\":\"定义类\",\"text\":[]},\"68\":{\"title\":\"ES6新特新\",\"header\":\"ES5 的类\",\"text\":[\"javascript中没有类的概念，它是基于原型的继承，但是我们可以使用构造函数来模拟类的概念\",\"// 定义构造函数 function Person(name, age) { this.name = name; this.age = age; } // 定义方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. \"]},\"69\":{\"title\":\"ES6新特新\",\"header\":\"ES6 的类\",\"text\":[\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. \",\"结合上面两个代码，我们可以看出:\",\"ES6 的类，本质上还是 ES5 的构造函数,可以认为，class就是构造函数的语法糖\",\"constructor 方法，就是构造函数,用来接收参数。如果不写，默认会有一个空的constructor方法\",\"ES6中定义的方法，是类的方法，不要加上关键词function\"]},\"70\":{\"title\":\"ES6新特新\",\"header\":\"对类添加方法\",\"text\":[\"在原型链上添加方法\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 添加方法 Person.prototype.eat = function () { console.log(\\\"I'm eating.\\\"); }; // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. p1.eat(); // I'm eating. \",\"使用 Object.assign()方法\",\"class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 添加方法 Object.assign(Person.prototype, { eat() { console.log(\\\"I'm eating.\\\"); }, }); // 实例化 const p1 = new Person(\\\"Summer\\\", 18); p1.say(); // My name is Summer, I'm 18 years old. p1.eat(); // I'm eating. \"]},\"71\":{\"title\":\"ES6新特新\",\"header\":\"类的继承\",\"text\":[\"具体参考：继承\"]},\"72\":{\"title\":\"ES6新特新\",\"header\":\"module 模块化\",\"text\":[\"主要就是export和import两个关键字\"]},\"73\":{\"title\":\"ES6新特新\",\"header\":\"Promise\",\"text\":[]},\"74\":{\"title\":\"ES6新特新\",\"header\":\"Promise 的基本使用\",\"text\":[\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 then 方法 p1.then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"从上面的代码可以看出：\",\"Promise对象是一个构造函数，通过new关键字创建一个Promise对象\",\"在还未执行到resolve或reject时，Promise对象的状态为pending，执行到resolve时，状态变为resolved，执行到reject时，状态变为rejected\",\"然后就会去调用then方法，then方法接收两个参数，第一个参数是resolve的回调函数，第二个参数是reject的回调函数\"]},\"75\":{\"title\":\"ES6新特新\",\"header\":\"Promise 的三种状态\",\"text\":[\"pending：等待状态，既不是成功也不是失败\",\"resolved：成功状态\",\"rejected: 失败状态\"]},\"76\":{\"title\":\"ES6新特新\",\"header\":\"实例方法\",\"text\":[\"then()：接收两个参数，第一个参数是resolve的回调函数，第二个参数是reject的回调函数\",\"catch()：接收一个参数，是reject的回调函数,兜底的作用\",\"finally()：接收一个参数，是resolve或reject的回调函数，不管Promise对象的状态是resolved还是rejected，都会执行\"]},\"77\":{\"title\":\"ES6新特新\",\"header\":\"构造函数方法\",\"text\":[\"all(): 接收一个数组，数组中的每一项都是一个Promise对象，当数组中的每一个Promise对象都变为resolved状态时，all()方法返回的Promise对象才会变为resolved状态，如果数组中的某一个Promise对象变为rejected状态，all()方法返回的Promise对象就会变为rejected状态\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); const p2 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); const p3 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.7) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 all 方法 Promise.all([p1, p2, p3]).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"race(): 接收一个数组，数组中的每一项都是一个Promise对象，只要数组的某一个Promise对象变为resolved状态，race()方法返回的Promise对象就会变为resolved状态，如果数组中的某一个Promise对象变为rejected状态，race()方法返回的Promise对象就会变为rejected状态\",\"简单来说，就是，谁先来的就跟着谁变化\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); const p2 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.5) { resolve(num); } else { reject(num); } }, 1000); }); const p3 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.7) { resolve(num); } else { reject(num); } }, 1000); }); // 调用race Promise.race([p1, p2, p3]).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"resolve(): 接收一个参数，可以是一个值，也可以是一个Promise对象，如果是一个值，返回的Promise对象就会变为resolved状态，如果是一个Promise对象，返回的Promise对象的状态就会跟随参数的Promise对象的状态\",\"// 定义一个 Promise 对象 const p1 = new Promise((resolve, reject) => { // resolve 成功的回调函数 // reject 失败的回调函数 // 异步操作 setTimeout(() => { const num = Math.random(); if (num > 0.3) { resolve(num); } else { reject(num); } }, 1000); }); // 调用 Promise 对象的 resolve 方法 Promise.resolve(p1).then( (data) => { console.log(\\\"成功\\\", data); }, (err) => { console.log(\\\"失败\\\", err); } ); \",\"reject(): 接收一个参数，返回的Promise对象就会变为rejected状态\"]},\"78\":{\"title\":\"ES6新特新\",\"customFields\":{\"0\":[\"ES6篇\"],\"1\":[\"ES6\",\"新特性\"]}},\"79\":{\"title\":\"this指向问题\",\"header\":\"this 的指向类型\",\"text\":[\"默认绑定\",\"function fn() { console.log(this); // window } fn(); // 这个其实就是相当于window.fn() \",\"上面的代码表明，this指向的是 window。\",\"隐式绑定\",\"const obj = { name: \\\"Summer\\\", fn: function () { console.log(this); // obj }, }; obj.fn(); // \",\"上面的代码表明，this指向的是 obj。\",\"显示绑定\",\"采用一些方法，来直接改变 this 的指向\",\"const obj = { name: \\\"Summer\\\", }; function fn() { console.log(this); // obj } fn(); // window fn.call(obj); // obj \",\"我们也可以看一个稍微复杂一点的例子\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; sayName.call(obj1); // Summer sayName.call(obj2); // Winter sayName.bind(obj1)(); // Summer sayName.bind(obj2)(); // Winter sayName.bind(obj1).call(obj2); // Summer, bind改变了this的指向，所以this指向的是obj1，而call又改变了this的指向，所以this指向的是obj2 sayName.apply(obj1); // Summer \",\"这边我们引申出一个问题，call和apply和bind的区别?\"]},\"80\":{\"title\":\"this指向问题\",\"header\":\"call 和 apply 和 bind 的区别\",\"text\":[\"call和apply都是改变this的指向，而bind是返回一个新的函数，新的函数的this指向的是bind的第一个参数，而且bind的第一个参数是不能被改变的。\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; const fn1 = sayName.bind(obj1); const fn2 = sayName.bind(obj2); fn1(); // Summer fn2(); // Winter fn1.call(obj2); // Summer fn2.call(obj1); // Winter \",\"call和apply的区别在于，call的参数是一个一个传递的，而apply的参数是一个数组。\",\"function sayName() { console.log(this.name); } const obj1 = { name: \\\"Summer\\\", }; const obj2 = { name: \\\"Winter\\\", }; sayName.call(obj1); // Summer sayName.apply(obj2); // Winter sayName.call(obj1, 1, 2, 3); // Summer sayName.apply(obj2, [1, 2, 3]); // Winter \",\"apply的使用场景\",\"求数组的最大值和最小值\",\"// 不使用apply时，我们会使用遍历或者sort方法 const arr = [1, 2, 3, 4, 5]; console.log(arr.sort((a, b) => b - a)); // 5 \",\"但是这种方法并不是很便捷，所以会使用Math.max()和Math.min()方法。 但是Math.max()和Math.min()方法，他们的参数，是一个一个的传递的。\",\"console.log(Math.max(1, 2, 3, 4, 5)); // 5 console.log(Math.min(1, 2, 3, 4, 5)); // 1 \",\"所以我们就需要使用apply方法。\",\"const arr = [1, 2, 3, 4, 5]; console.log(Math.max.apply(null, arr)); // 5 console.log(Math.min.apply(null, arr)); // 1 \",\"实现数组的拼接\",\"这个不使用apply其实也可以做到，可以使用...运算符。\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; console.log([...arr1, ...arr2]); // [1, 2, 3, 4, 5, 6] \",\"但是使用apply,不需要额外的变量，也不需要额外的运算符。\",\"const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; console.log(arr1.push.apply(arr1, arr2)); // [1, 2, 3, 4, 5, 6] \",\"我的理解是，虽然apply接受的参数是一个数组，但是它会把数组中的每一个元素，都当做一个参数，传递出去。\",\"new绑定 当使用new操作符构造函数时，this 的值会绑定到新创建的对象上\",\"function Person(name) { this.name = name; } const person = new Person(\\\"Summer\\\"); console.log(person.name); // Summer \"]},\"81\":{\"title\":\"this指向问题\",\"text\":[\"总的来说，this会指向调用它的对象，但是有一些特殊情况(call,bind)。\"],\"customFields\":{\"0\":[\"ES6篇\",\"this\"],\"1\":[\"ES6\",\"this\"]}},\"82\":{\"title\":\"Promise.all手写实现\",\"header\":\"功能\",\"text\":[\"接收一个Promise实例的数组或具有Iterator接口的对象\",\"它会将多个Promise实例包装成一个新的Promise实例\",\"Promise.all()的状态由Promise实例决定 \",\"只有所有的Promise实例状态都变成fulfilled，Promise.all()的状态才会变成fulfilled\",\"只要有一个Promise实例状态变成rejected，Promise.all()的状态就会变成rejected\"]},\"83\":{\"title\":\"Promise.all手写实现\",\"header\":\"例子\",\"text\":[\"从上面的这些例子我们可以得出：\",\"只有当所有的Promise实例状态都变成fulfilled，Promise.all()的状态才会变成fulfilled，这边变为fullfilled有两种情况：\",\"传入的Promise中都是resolve的实例\",\"传入的Promise中有reject的实例，但是已经被捕获了\",\"只要有一个reject(没有被捕获)，那么Promise.all()就会变成rejected，那么会在第一处遇到的reject的地方抛出错误\"]},\"84\":{\"title\":\"Promise.all手写实现\",\"header\":\"代码实现\",\"text\":[\"/** * @description Promise.all手写实现 * @param {Array} promises Promise实例数组 * @returns {Promise} 返回一个Promise实例 */ function promiseAll(promises) { // 设置返回结果里面的数组 let result = [] // 返回一个Promise实例 return new Promise((resolve,reject)=>{ // promise是一个有Iterator接口的对象，可以使用for...of遍历 for [key,promise] of promises { // 判断当前遍历的promise是否是Promise实例，还是一个普通的值 if(promise instanceof Promise){ // 那么就需要等待这个Promise实例的状态变更，然后再将结果放在result里面 promise.then(res=>{ // 如果走的是成功的回调，那么就将结果放在result里面 result[key] = res // 判断是否是最后一个Promise实例 if(result.length === promises.length){ // 是最后一个Promise实例，那么就将result作为参数传入resolve resolve(result) } },err=>{ // 如果有一个Promise实例的状态变成了rejected，那么就直接将这个错误抛出 reject(err) }) }else{ // 不是Promise对象 // 那么直接存储数据 result[key] = promise } } }) } \"]},\"85\":{\"title\":\"Promise.all手写实现\",\"header\":\"总结\",\"text\":[\"Promise.all()接收一个具有iterator接口的对象，所以可以使用forEach()进行遍历\",\"需要对传入的参数进行判断，判断它到底是不是 Promise 实例\",\"如果是 Promise 实例，那么就需要等待这个 Promise 实例的状态变更(.then()调用)，然后再将结果放在 result 里面\",\"如果不是，那么直接放在 result 里面\",\"记录一个count，用来记录Promise实例的数量，当count等于promises的长度时，说明所有的Promise实例都已经执行完毕，那么就可以调用resolve了\"]},\"86\":{\"title\":\"Promise.all手写实现\",\"header\":\"参考\",\"text\":[\"字节飞书面试——请实现promise.all\",\"09-手写Promise-Promise.all方法的实现\"]},\"87\":{\"title\":\"Promise.all手写实现\",\"customFields\":{\"0\":[\"Handwrite\"],\"1\":[\"Promise\"]}},\"88\":{\"title\":\"listToTree 将列表转换为树形结构\",\"header\":\"题目要求\",\"text\":[\"let arr = [ { id: 1, name: \\\"部门1\\\", pid: 0 }, { id: 2, name: \\\"部门2\\\", pid: 1 }, { id: 3, name: \\\"部门3\\\", pid: 1 }, { id: 4, name: \\\"部门4\\\", pid: 3 }, { id: 5, name: \\\"部门5\\\", pid: 4 }, { id: 6, name: \\\"部门6\\\", pid: 0 }, ]; \",\"将上述数组转换成下面的树形结构\",\"let result = [ { id: 1, name: \\\"部门1\\\", pid: 0, children: [ { id: 2, name: \\\"部门2\\\", pid: 1, children: [], }, { id: 3, name: \\\"部门3\\\", pid: 1, children: [ { id: 4, name: \\\"部门4\\\", pid: 3, children: [ { id: 5, name: \\\"部门5\\\", pid: 4, children: [], }, ], }, ], }, ], }, { id: 6, name: \\\"部门6\\\", pid: 0, children: [], }, ]; \"]},\"89\":{\"title\":\"listToTree 将列表转换为树形结构\",\"header\":\"思路\",\"text\":[\"这道题目其实就是和上面一题类似，就是将他反过来\",\"注意 pid 是用来表示父亲节点的\",\"其实我们我们可以利用深拷贝这一个特质，将他们的引用关系给打破，然后再去组装他们的关系\"]},\"90\":{\"title\":\"listToTree 将列表转换为树形结构\",\"header\":\"代码实现\",\"text\":[\"function listToTree(list) { // 结果res let res = []; // 使用一个队列来记录待处理的数据 let queue = []; // 首先将list的所有节点入队 queue.push(...list); // 然后依次处理队列中的数据 while (queue.length) { // 设置当前处理节点 // let curr = constructorListToTree(queue.shift()); let curr = queue.shift(); // 如果当前节点id === 子节点的parentId，则将子节点入队 let children = list.filter((item) => item.parentId === curr.id); if (children.length) { curr.children = children; } // 将curr放入res中 // 只有当curr的parentId为0时，才将curr放入res中 if (curr.parentId === 0) { res.push(curr); } } return res; } \"]},\"91\":{\"title\":\"listToTree 将列表转换为树形结构\",\"customFields\":{\"0\":[\"handwrite\"],\"1\":[\"树形结构\"]}},\"92\":{\"title\":\"JSON2DOM = react的render函数\",\"header\":\"题目要求\",\"text\":[\"{ \\\"tag\\\": \\\"DIV\\\", \\\"attrs\\\": { \\\"id\\\": \\\"app\\\" }, \\\"children\\\": [ { \\\"tag\\\": \\\"SPAN\\\", \\\"children\\\": [{ \\\"tag\\\": \\\"A\\\", \\\"children\\\": [] }] }, { \\\"tag\\\": \\\"SPAN\\\", \\\"children\\\": [ { \\\"tag\\\": \\\"A\\\", \\\"children\\\": [] }, { \\\"tag\\\": \\\"A\\\", \\\"children\\\": [] } ] } ] } \",\"把上面的 json 转换成下面的 dom 结构\",\"<div id=\\\"app\\\"> <span> <a></a> </span> <span> <a></a> <a></a> </span> </div> \"]},\"93\":{\"title\":\"JSON2DOM = react的render函数\",\"header\":\"思路\",\"text\":[\"像这种层层嵌套的，一般都是使用递归来做\",\"每层解构出来的对象都是一个 dom 节点\",\"tag: 节点的标签名\",\"attrs: 节点的属性\",\"children: 节点的子节点 \",\"类型为数组，说明有多个子节点，数组里面又是一个个对象\",\"类型为对象，说明只有一个子节点\"]},\"94\":{\"title\":\"JSON2DOM = react的render函数\",\"header\":\"实现\",\"text\":[\"function json2html(json) { // 首先解构出json中的tag和attrs和children,可能attrs和children没有 const { tag, attrs, children } = json; // 创建DOM节点 const element = document.createElement(tag); // 设置属性 if (attrs) { for (let key in attrs) { element.setAttribute(key, attrs[key]); } } // 设置子节点 if (children) { // 如果有一个子节点，那么children就是一个对象，如果有多个子节点，那么children就是一个数组 if (children instanceof Array) { if (children.length !== 0) { children.forEach((value) => { element.appendChild(json2html(value)); }); } } else if (children instanceof Object) { // 说明只有一个子节点 element.appendChild(json2html(children)); } } return element; } \"]},\"95\":{\"title\":\"JSON2DOM = react的render函数\",\"customFields\":{\"0\":[\"Handwrite\"],\"1\":[\"react\",\"render\",\"dom\",\"json\"]}},\"96\":{\"title\":\"treeToList将树转换为列表\",\"header\":\"题目要求\",\"text\":[\"const data = [ { id: 1, text: \\\"节点1\\\", parentId: 0, children: [ { id: 2, text: \\\"节点1_1\\\", parentId: 1, }, ], }, ]; \",\"将上面这个树结构的数据转换成下面这种列表结构\",\"const list = [ { id: 1, text: \\\"节点1\\\", parentId: 0, }, { id: 2, text: \\\"节点1_1\\\", parentId: 1, }, ]; \"]},\"97\":{\"title\":\"treeToList将树转换为列表\",\"header\":\"思路\",\"text\":[\"类似的像这种层层嵌套的，一般都是使用递归来做\",\"首先我们需要一个函数，这个函数接收一个参数，这个参数就是我们的树结构数据\",\"其次我们需要对children，也就是子节点进行遍历，遍历的同时，我们需要把每个子节点的children也进行遍历，这样就可以把所有的节点都遍历到了\",\"我们维护一个队列，将需要访问的节点放在队列里面\"]},\"98\":{\"title\":\"treeToList将树转换为列表\",\"header\":\"代码实现\",\"text\":[\"/** * @description 将树型结构转换为列表 * @param {Object} object 树型结构 * @returns {Array} 列表 */ interface TreeToList { id: string; text: string; parentId: string; children?: TreeToList[]; } interface TreeToListResult { id: string; text: string; parentId: string; } function treeToList(object: TreeToList[]): TreeToListResult[] { // 返回结果 let result: TreeToListResult[] = []; // 设置一个队列，用于存放待处理的数据 let queue: TreeToList[] = []; // 首先让树型结构入队 queue.push(...object); // 然后依次处理队列中的数据 while (queue.length) { // 取出队列中的第一个数据 let curr = queue.shift()!; // 将当前数据放入返回结果中 result.push(constructorTreeToList(curr)); // 如果当前数据有子节点，则将子节点入队 if (curr.children) { queue.push(...curr.children); } } return result; } function constructorTreeToList(node: TreeToList): TreeToListResult { return { id: node.id, text: node.text, parentId: node.parentId }; } \"]},\"99\":{\"title\":\"treeToList将树转换为列表\",\"customFields\":{\"0\":[\"handwrite\"],\"1\":[\"树\"]}},\"100\":{\"title\":\"7.17星星充电\",\"text\":[\"自我介绍\",\"介绍一下项目，这个低代码项目\",\"使用的什么库 =＞react-dnd\",\"页面是如何缓存的？如何做到的？=＞直接存在了缓存中\",\"Localstore和sessionstore的区别？\",\"Div元素垂直居中\",\"px，em，rem区别\",\"如何适配移动端？\",\"viewport是什么\",\"Meta，html里面的Meta有什么作用\",\"diff算法是怎样的？怎样执行的？怎么比较的\",\"http和https\",\"useEffect\",\"JavaScript的基本类型\",\"Typeof null =object的原因是什么？\",\"深拷贝和浅拷贝，基本类型怎么进行拷贝的？他复制的就不是地址吗？\",\"节流和防抖，项目中你如何做的？\",\"css盒模型=＞Box它是几部分组成的？\",\"你对MVVM的理解\",\"多个请求同时进行，用什么？=＞promise.all（），他返回的是一个还是多个？\",\"Premise all遇到错误的时候是怎么做的？\",\"数组是怎么遍历的？map和foreach区别？map返回的是啥？\",\"JavaScript的作用域\",\"闭包\",\"继承=＞call，this指向谁\",\"将两个数组合并并且去重\"],\"customFields\":{\"0\":[\"InterviewRecord\"]}},\"101\":{\"title\":\"Javascript数据类型\",\"header\":\"基本数据类型\",\"text\":[]},\"102\":{\"title\":\"Javascript数据类型\",\"header\":\"Number\",\"text\":[\"转化为数字的方法parseInt()和Number() 有什么区别？\",\"Number()只可以转化纯数字字符串或者空字符串，长度为 1/0 的数组，布尔值，null\",\"ParseInt()只能将字符串转化为数字，遇到不可以转化的就截断，返回已经转化的数字，如果第一个字符就不可以转化，返回NaN\",\"value\",\"Number()\",\"parseInt()\",\"'123'\",\"123\",\"123\",\"'123a'\",\"NaN\",\"123\",\"'a123'\",\"NaN\",\"NaN\",\"true/false\",\"1/0\",\"NaN\",\"null\",\"0\",\"NaN\",\"[] / [1]\",\"0/1\",\"NaN\",\"\\\"\\\"\",\"0\",\"NaN\"]},\"103\":{\"title\":\"Javascript数据类型\",\"header\":\"String\",\"text\":[]},\"104\":{\"title\":\"Javascript数据类型\",\"header\":\"Boolean\",\"text\":[\"转化为布尔值的方法：Boolean()和!!\",\"Boolean()\",\"!!:双重非运算符\",\"布尔值转化为false的情况：\",\"0(数字 0)\",\"null\",\"undefined\",\"NaN\",\"''(空字符串)其他情况都是转化为true，比如[],{}等\"]},\"105\":{\"title\":\"Javascript数据类型\",\"header\":\"Null\",\"text\":[\"typeof null会返回object\"]},\"106\":{\"title\":\"Javascript数据类型\",\"header\":\"Undefined\",\"text\":[\"undefined是一个全局变量，它的值就是undefined，一般typeof undefined会返回undefined,它其实就是变量声明，但是没有赋值的情况下的默认值\",\"undefined和null的区别：\",\"undefined是一个变量，而null是一个关键字\",\"undefined是变量声明，但是没有赋值的情况下的默认值，而null是一个空对象指针(Object)\",\"undefined的类型是undefined，而null的类型是object\",\"undefined转化为数字是NaN，而null转化为数字是0\",\"null == undefined // true\"]},\"107\":{\"title\":\"Javascript数据类型\",\"header\":\"Symbol\",\"text\":[]},\"108\":{\"title\":\"Javascript数据类型\",\"header\":\"引用数据类型\",\"text\":[]},\"109\":{\"title\":\"Javascript数据类型\",\"header\":\"Object\",\"text\":[]},\"110\":{\"title\":\"Javascript数据类型\",\"header\":\"Array\",\"text\":[]},\"111\":{\"title\":\"Javascript数据类型\",\"header\":\"Function\",\"text\":[]},\"112\":{\"title\":\"Javascript数据类型\",\"header\":\"Date\",\"text\":[]},\"113\":{\"title\":\"Javascript数据类型\",\"header\":\"RegExp\",\"text\":[]},\"114\":{\"title\":\"Javascript数据类型\",\"header\":\"存储位置\",\"text\":[\"基本数据类型的值是存储在栈内存中的，每个变量都有自己的内存空间，互不影响\",\"引用数据类型的值是存储在堆内存中的，每个变量存储的是一个指针，指向存储在堆内存中的对象，这个对象包含了实际的值\",\"数据类型的存储位置\"]},\"115\":{\"title\":\"Javascript数据类型\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"116\":{\"title\":\"数组常用方法\",\"header\":\"操作方法\",\"text\":[\"操作方法我们可以从CRUD(增删改查)四个方面来进行分类\"]},\"117\":{\"title\":\"数组常用方法\",\"header\":\"增加元素\",\"text\":[\"不会改变数组本身 \",\"concat():连接两个或多个数组，返回新数组\",\"会改变数组本身 \",\"push():在数组末尾添加元素，返回数组长度\",\"shift():在数组开头添加元素，返回数组长度\",\"splice(start,deleteCount,item1,item2...):在数组中间添加元素，返回删除的元素组成的数组\"]},\"118\":{\"title\":\"数组常用方法\",\"header\":\"删除元素\",\"text\":[\"不会改变数组本身 \",\"slice(start,end):返回一个新数组，包含从start到end(不包括end)的元素\",\"会改变数组本身 \",\"pop():删除数组末尾的元素，返回删除的元素\",\"unshift():删除数组开头的元素，返回删除的元素\",\"splice(start,deleteCount,item1,item2...):从start位置开始删除deleteCount个，返回删除的元素组成的数组\"]},\"119\":{\"title\":\"数组常用方法\",\"header\":\"修改元素\",\"text\":[\"修改数组，一般使用slice()和splice()方法\"]},\"120\":{\"title\":\"数组常用方法\",\"header\":\"查找元素\",\"text\":[\"ES6之前 \",\"indexOf()/lastIndexOf():返回元素在数组中的位置，如果不存在，返回-1\",\"ES6之后 \",\"find():返回第一个符合条件的元素\",\"includes():返回布尔值，表示是否找到了元素\"]},\"121\":{\"title\":\"数组常用方法\",\"header\":\"排序方法\",\"text\":[\"sort()，可以传入一个比较函数，比较函数返回值为-1，0，1，分别表示小于，等于，大于，会改变数组本身\",\"reverse(),将数组进行反转，会改变数组本身\"]},\"122\":{\"title\":\"数组常用方法\",\"header\":\"迭代方法\",\"text\":[\"所有的迭代方法都不会改变数组本身\",\"forEach((item,index,array)=>{}):遍历数组，对每个元素进行操作，没有返回值\",\"map((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个新数组\",\"filter((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个新数组，新数组中的元素是通过测试的元素\",\"some((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个布尔值，只要有一个元素通过测试，就返回true\",\"every((item,index,array)=>{}):遍历数组，对每个元素进行操作，返回一个布尔值，只有所有元素都通过测试，才返回true\",\"reduce((prev,cur,index,array)=>{},initValue):遍历数组，对每个元素进行操作，返回一个值，该值会作为下一次迭代的prev，initValue为初始值，如果没有初始值，那么第一次迭代的prev为数组的第一个元素，cur为数组的第二个元素\"]},\"123\":{\"title\":\"数组常用方法\",\"header\":\"转化方法\",\"text\":[\"数组转化为字符串\",\"toString():将数组转化为字符串，每个元素用,隔开\",\"join():将数组转化为字符串，每个元素用指定的字符串隔开\"]},\"124\":{\"title\":\"数组常用方法\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"125\":{\"title\":\"字符串常用方法\",\"header\":\"操作方法\",\"text\":[\"操作方法我们也是从CRUD(增删改查)的角度来看待的 其实可以将字符串看作是一种string[],只是这种数组，不可以修改，只读\"]},\"126\":{\"title\":\"字符串常用方法\",\"header\":\"增加元素\",\"text\":[\"concat():连接字符串\",\"模板字符串:ES6新增的字符串拼接方法，使用反引号(``)来标识，变量使用${}来标识\",\"+(加号)：字符串拼接\"]},\"127\":{\"title\":\"字符串常用方法\",\"header\":\"删除元素\",\"text\":[\"slice(start,end):截取字符串,[start,end)\",\"substr(start,length):截取字符串,[start,start+length)\",\"substring(start,end):截取字符串,[start,end)\",\"返回的都是一个新的string\"]},\"128\":{\"title\":\"字符串常用方法\",\"header\":\"修改元素\",\"text\":[\"trim()/trimLeft()/trimRight():去除字符串两端的空格\",\"repeat(count):重复字符串，返回一个新的字符串\",\"toLowerCase()/toUpperCase():将字符串转化为小写/大写\",\"padStart(targetLength,padString)/padEnd(targetLength,padString):用padString填充字符串，使其长度为targetLength\"]},\"129\":{\"title\":\"字符串常用方法\",\"header\":\"查找元素\",\"text\":[\"indexOf():查找字符串中是否包含searchValue,如果包含，返回第一次出现的位置，否则返回-1\",\"includes():查找字符串中是否包含searchValue,如果包含，返回true，否则返回false\",\"charAt(index):返回指定位置的字符\"]},\"130\":{\"title\":\"字符串常用方法\",\"header\":\"转换方法\",\"text\":[\"将字符串转化为数组的方法：\",\"split(separator,limit):将字符串按照separator分割成数组，limit表示最大分割次数\"]},\"131\":{\"title\":\"字符串常用方法\",\"header\":\"模板匹配方法\",\"text\":[\"其实就是进行正则匹配的方法\",\"match():返回匹配到的字符串数组\",\"search():返回匹配到的第一个字符串的位置\",\"replace():返回替换后的字符串\"]},\"132\":{\"title\":\"字符串常用方法\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"133\":{\"title\":\"类型转化机制\",\"header\":\"显示类型转化\",\"text\":[\"转化为Number的方法: parseInt()和Number()\",\"转化为String的方法: toString()和String()\",\"转化为Boolean的方法: Boolean()和!!\",\"具体可以参考JavaScript 数据类型\"]},\"134\":{\"title\":\"类型转化机制\",\"header\":\"隐式类型转化\",\"text\":[\"隐式类型转化发生的场景：\",\"比较运算符(==,!=,===,!==,>,<,>=,<=),if,while 这种需要转化为boolean的场景，会将其他类型转化为boolean，然后再进行比较\",\"算术运算符(+,-,*,/,%)\",\"自动转化为字符串一般遇到+,并且有字符串，那么就会转化为字符串\",\"\\\"5\\\" + 1; // '51' \\\"5\\\" + true; // \\\"5true\\\" \\\"5\\\" + false; // \\\"5false\\\" \\\"5\\\" + {}; // \\\"5[object Object]\\\" \\\"5\\\" + []; // \\\"5\\\" \\\"5\\\" + function () {}; // \\\"5function (){}\\\" \\\"5\\\" + undefined; // \\\"5undefined\\\" \\\"5\\\" + null; // \\\"5null\\\" \",\"自动转化为数字除了+会转化为字符串，其他都是转为数字\\n转化应该调用的是Number()方法，将undefined转化为NaN，将null转化为0\"]},\"135\":{\"title\":\"类型转化机制\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"136\":{\"title\":\"等于vs完全等于\",\"header\":\"等于\",\"text\":[\"等于==属于比较运算符，会进行隐式类型转换，转换规则如下： 笼统的说，就是如果两个值类型不同，那么就会进行类型转换，转换成相同的类型，再进行比较。\",\"如果一方是布尔值或者是字符串，那么会将布尔值/字符串转换为数字，再进行比较\",\"null == undefined //true\",\"NaN和任何值都不相等，包括自己：NaN == NaN //false\",\"如果一方是Object(对象)，一方是String、Number或者Symbol，那么会将对象转换为原始类型的值(obj.valueOf())，再进行比较\",\"如果两方都是Object(对象)，那么比较的是两个对象的引用是否相等 意思就是：比较这两个对象是不是同一个对象(栈内存里面的地址必须相同)\"]},\"137\":{\"title\":\"等于vs完全等于\",\"header\":\"完全等于\",\"text\":[\"完全等于===属于比较运算符，不会进行隐式类型转换，如果类型不同，直接返回false，如果类型相同，再进行值的比较。\",\"下面给出一些例子：\",\"compare\",\"==\",\"===\",\"\\\"55\\\"和 55\",\"true\",\"false\",\"null 和 undefined\",\"true\",\"false\",\"NaN 和 NaN\",\"false\",\"false\",\"null 和 null\",\"true\",\"true\",\"undefined 和 undefined\",\"true\",\"true\",\"{a:1}和{a:1}\",\"false\",\"false\"]},\"138\":{\"title\":\"等于vs完全等于\",\"header\":\"总结\",\"text\":[\"==会进行隐式类型转换，转换成相同的类型，再进行比较\",\"===不会进行隐式类型转换，如果类型不同，直接返回false，如果类型相同，再进行值的比较\",\"null == undefined //true\",\"null === undefined //false\"]},\"139\":{\"title\":\"等于vs完全等于\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"数据类型\"]}},\"140\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"浅拷贝\",\"text\":[\"浅拷贝只是复制了一层对象的属性，如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。笼统来说，就是它只管一层\",\"代码实现\"]},\"141\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"常见的浅拷贝方法\",\"text\":[\"Object.assign()\",\"Array.prototype.concat()\",\"拓展运算符([...obj])\"]},\"142\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"深拷贝\",\"text\":[\"深拷贝就是能够实现真正意义上的对象拷贝。深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。\",\"代码实现\",\"但是这个深拷贝没有考虑到数组的情况,只考虑了普通Object情况，所以还需要对数组进行判断\",\"但是这个深拷贝还有一个问题，就是循环引用的问题，比如：\",\"let obj = { a: 1, b: { c: 2, }, }; obj.b.d = obj.b; \",\"这样的话，就会造成死循环，所以我们需要一个容器来存储已经拷贝过的对象，如果已经拷贝过了，就直接返回，不需要再次拷贝。\",\"接着我们可以参考，js 的垃圾回收机制，把map换为WeakMap，这样的话，当obj被回收的时候，WeakMap也会被回收，这样就不会造成内存泄漏了。\",\"补充WeakMap\",\"WeakMap只接受对象作为键名（null除外），不接受其他类型的值作为键名\",\"WeakMap属于弱引用，当WeakMap的键名所指向的对象被回收，那么WeakMap的键名和键值也会被回收\",\"但是即使这样，这个深拷贝还是有问题的，就是对于Date、RegExp、Error、Function等特殊对象，还是没有考虑到，所以我们需要对这些特殊对象进行判断,这边就不写了，有兴趣的可以自己写一下。\"]},\"143\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"常见的深拷贝方法\",\"text\":[\"JSON.parse(JSON.stringify(obj)):将对象转换为字符串，再将字符串转换为对象\",\"lodash.cloneDeep(obj)\"]},\"144\":{\"title\":\"深拷贝vs浅拷贝\",\"header\":\"参考文章\",\"text\":[\"如何写出一个惊艳面试官的深拷贝\"]},\"145\":{\"title\":\"深拷贝vs浅拷贝\",\"customFields\":{\"0\":[\"Javascript篇\"],\"1\":[\"Javascript\",\"手写题\"]}},\"146\":{\"title\":\"JavaScript篇\",\"customFields\":{\"0\":[\"JavaScript篇\"]}},\"147\":{\"title\":\"null和undefined的区别\",\"header\":\"undefined\",\"text\":[\"在javascript中，undefined是一个全局变量，它的值是undefined，当一个变量声明了但是没有赋值时，它的值就是undefined，或者当一个对象没有赋值的属性时，它的值也是undefined。\",\"// 没有赋值的变量，默认为undefined let a; console.log(a); // undefined // 没有赋值的对象属性，默认为undefined let obj = {}; console.log(obj.a); // undefined \"]},\"148\":{\"title\":\"null和undefined的区别\",\"header\":\"null\",\"text\":[\"null表示当前这个值，已经赋值为null了，它是一个空对象指针，表示一个空对象，所以typeof null的值是object。\",\"// 赋值为null let a = null; console.log(a); // null // 赋值为null的对象，typeof的值是object let obj = { a: null, }; console.log(obj.a); // null console.log(typeof obj.a); // object \"]},\"149\":{\"title\":\"null和undefined的区别\",\"header\":\"null 和 undefined 的相同点\",\"text\":[\"条件判断的时候，undefined和null都会转换为false。\",\"if (!undefined) { console.log(\\\"undefined is false\\\"); } // undefined is false if (!null) { console.log(\\\"null is false\\\"); } // null is false \",\"使用==进行比较的时候，null和undefined是相等的。\",\"这是因为==他会进行类型转换，null和undefined都会转换为false，所以他们是相等的。\",\"console.log(null == undefined); // true \"]},\"150\":{\"title\":\"null和undefined的区别\",\"header\":\"null 和 undefined 的不同点\",\"text\":[\"Number()转化为数字的时候，undefined转化为NaN，null转化为0。\",\"这是因为null是一个空对象，转化为数字的时候，就是0，而undefined是一个未定义的值，转化为数字的时候，就是NaN。\",\" console.log(Number(undefined)); // NaN console.log(Number(null)); // 0 \"]},\"151\":{\"title\":\"null和undefined的区别\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"JavaScript\",\"数据结构\"]}},\"152\":{\"title\":\"事件循环\",\"header\":\"产生的原因\",\"text\":[\"JavaScript 是单线程的，也就是说，JavaScript 只能同时执行一个任务，而其他任务都必须在后面排队等待。但是这不代表，JavaScript 就会导致任务堵塞，因为 JavaScript 还有一个特性，就是异步执行。\"]},\"153\":{\"title\":\"事件循环\",\"header\":\"任务队列\",\"text\":[\"JavaScript 引擎会维护一个任务队列，任务队列中的任务分为两种，一种是同步任务，一种是异步任务。\",\"同步任务会在主线程上排队执行，前一个任务执行完毕，才会执行后一个任务。\",\"异步任务则会在异步任务有了结果后，将注册的回调函数放入任务队列中，等待主线程的空闲时间来执行。\"]},\"154\":{\"title\":\"事件循环\",\"header\":\"事件循环\",\"text\":[\"事件循环是指，主线程不断从任务队列中读取任务，只要主线程空闲，就会去读取任务队列，这个过程是循环不断的，所以叫做事件循环。\"]},\"155\":{\"title\":\"事件循环\",\"header\":\"宏任务和微任务\",\"text\":[\"但是如果只将任务划分为同步任务和异步任务，那么异步任务又分为很多种，比如setTimeout、setInterval、Promise、async/await等等，这些异步任务又有什么区别呢？\",\"其实，JavaScript将异步任务分为了两种，一种是宏任务，一种是微任务。\",\"宏任务：setTimeout、setInterval、setImmediate、I/O、UI rendering等等。\",\"微任务：Promise.then()、process.nextTick等等。\",\"执行顺序：当主线程空闲时，会先执行微任务队列中的任务，然后再执行宏任务队列中的任务。\",\"引申：宏任务和微任务有哪些区别？\",\"宏任务和微任务都是异步任务，但是宏任务的优先级要低于微任务。\"]},\"156\":{\"title\":\"事件循环\",\"header\":\"代码示例\",\"text\":[\"console.log(\\\"script start\\\"); setTimeout(function () { console.log(\\\"setTimeout\\\"); }, 0); Promise.resolve() .then(function () { console.log(\\\"promise1\\\"); }) .then(function () { console.log(\\\"promise2\\\"); }); console.log(\\\"script end\\\"); \",\"代码分析：\",\"首先执行同步任务，输出script start\",\"遇到setTimeout，将其放入宏任务队列中\",\"遇到了Promise，将其放入微任务队列中\",\"执行同步任务，输出script end\",\"这时候主线程空闲，开始执行微任务队列中的任务，输出promise1，promise2\",\"微任务队列中的任务执行完毕，开始执行宏任务队列中的任务，输出setTimeout\",\"console.log(\\\"1\\\"); setTimeout(function () { console.log(\\\"2\\\"); Promise.resolve().then(function () { console.log(\\\"3\\\"); }); }); Promise.resolve().then(function () { console.log(\\\"4\\\"); setTimeout(function () { console.log(\\\"5\\\"); }); }); \",\"代码分析：\",\"同步任务，输出1\",\"setTimeout放入宏任务队列\",\"Promise放入微任务队列\",\"主线程空闲，执行微任务队列中的任务，输出4\",\"在微任务队列中，遇到setTimeout，将其放入宏任务队列\",\"此时微任务队列中的任务执行完毕，开始执行宏任务队列中的任务，输出2\",\"在宏任务队列中，遇到Promise，将其放入微任务队列\",\"执行微任务队列中的任务，输出3\",\"微任务队列中的任务执行完毕，开始执行宏任务队列中的任务，输出5\",\"console.log(\\\"1\\\"); setTimeout(function () { console.log(\\\"2\\\"); Promise.resolve().then(function () { console.log(\\\"3\\\"); }); }); Promise.resolve().then(function () { console.log(\\\"4\\\"); setTimeout(function () { console.log(\\\"5\\\"); Promise.resolve().then(function () { console.log(\\\"6\\\"); }); }); }); \",\"代码分析：\",\"同步任务，输出1\",\"setTimeout放入宏任务队列\",\"Promise放入微任务队列\",\"同步任务执行完毕，执行微任务队列中的任务，输出4\",\"在微任务队列中，遇到setTimeout，将其放入宏任务队列\",\"微任务队列空闲，执行宏任务队列中的任务，输出2\",\"在宏任务队列中，遇到Promise，将其放入微任务队列\",\"执行微任务队列中的任务，输出3\",\"此时微任务队列中的任务执行完毕，开始执行宏任务队列中的任务，输出5\",\"在宏任务队列中，遇到Promise，将其放入微任务队列\",\"去执行微任务队列中的任务，输出6\",\"console.log(\\\"1\\\"); setTimeout(function () { console.log(\\\"2\\\"); Promise.resolve().then(function () { console.log(\\\"3\\\"); }); }); Promise.resolve().then(function () { console.log(\\\"4\\\"); setTimeout(function () { console.log(\\\"5\\\"); Promise.resolve().then(function () { console.log(\\\"6\\\"); }); }); }); setTimeout(function () { console.log(\\\"7\\\"); Promise.resolve().then(function () { console.log(\\\"8\\\"); }); }); // 1 4 2 3 5 6 7 8 \",\"console.log('1'); setTimeout(function() { console.log('2'); Promise.resolve().then(function() { console.log('3'); }); process.nextTick(function() { console.log('4'); }); setImmediate(function() { console.log('5'); }); }); Promise.resolve().then(function() { console.log('6'); process.nextTick(function() { console.log('7'); }); setImmediate(function() { console.log('8'); }); }); // 1 6 7 2 4 3 8 5 \",\"这边出现了process.nextTick和setImmediate。记一下，process.nextTick属于微任务，而setTmmdiate属于宏任务\",\"代码分析：\",\"首先进行同步任务，输出1\",\"setTimeout放入宏任务队列\",\"Promise放入微任务队列\",\"此时主线程空闲，执行微任务队列中的任务，输出6\",\"遇到了process.nextTick，将其放入微任务队列\",\"遇到了setImmediate，将其放入宏任务队列\",\"接着执行微任务队列中的任务(nextTick)，输出7\",\"此时宏任务队列中的任务执行完毕，开始执行微任务队列中的任务，输出2\",\"遇到了Promise，将其放入微任务队列\",\"遇到了process.nextTick，将其放入微任务队列\",\"遇到了setImmediate，将其放入宏任务队列\",\"当前宏任务队列中的任务执行完毕，开始执行微任务队列中的任务\",\"因为process.nextTick的优先级比Promise高，所以先执行process.nextTick，输出4\",\"接着执行微任务队列中的任务，输出3\",\"微任务队列中的任务执行完毕，开始执行宏任务队列中的任务，输出8\",\"继续执行宏任务队列中的任务，输出5\",\"console.log('start'); setTimeout(() => { console.log('children2'); Promise.resolve().then(() => { console.log('children3'); }) }, 0); new Promise(function(resolve, reject) { console.log('children4'); setTimeout(function() { console.log('children5'); resolve('children6') // 这里的resolve，会调用那个then函数 }, 0) }).then((res) => { console.log('children7'); setTimeout(() => { console.log(res); }, 0) }) // start children4 children2 children3 children5 children7 children6 \",\"注意：async和await\",\"async函数返回的是一个Promise对象(同步执行)\",\"await后面跟着的是一个Promise对象，如果不是，会被转换成一个立即resolve的Promise对象(异步执行)\",\"参考文档：\",\"深入浅出浏览器事件循环\"]},\"157\":{\"title\":\"事件循环\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"JavaScript\",\"Event Loop\"]}},\"158\":{\"title\":\"作用域链\",\"header\":\"作用域链分类\",\"text\":[\"块级作用域\",\"函数作用域\",\"全局作用域\"]},\"159\":{\"title\":\"作用域链\",\"header\":\"作用域链\",\"text\":[\"当访问一个变量时，会先从当前作用域查找，如果没有找到，就会从父级作用域查找，直到找到该变量或者到全局作用域，如果全局作用域也没有找到，就会报错(TypeError)。\"]},\"160\":{\"title\":\"作用域链\",\"header\":\"词法作用域\",\"text\":[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的，所以词法作用域是静态的作用域，因为它的作用域在函数定义的时候就决定了。并不是在调用的地方，只有箭头函数，确认 this 才是，在那里调用，this 指向谁\",\"var value = 1; function foo() { console.log(value); } function bar() { var value = 2; foo(); // 调用的地方，不是作用域的地方 } bar(); // 1 \",\"分析词法作用域：\",\"函数foo的作用域是全局作用域，所以foo的作用域链是foo -> 全局作用域\",\"函数bar的作用域是全局作用域，所以bar的作用域链是bar -> 全局作用域\",\"Q：为什么结果输出为 1？\",\"A：因为foo的作用域链是foo -> 全局作用域，所以在foo中查找value时，会先从foo的作用域中查找，如果没有找到，就会从父级作用域中查找，直到找到该变量或者到全局作用域，如果全局作用域也没有找到，就会报错(TypeError)。\",\"可以这么说，闭包就是在作用域链中查找变量的一种机制。\"]},\"161\":{\"title\":\"作用域链\",\"header\":\"作用域链的场景\",\"text\":[]},\"162\":{\"title\":\"作用域链\",\"header\":\"闭包\",\"text\":[\"function foo() { var value = 1; let fn1 = function () { console.log(value); }; return fn1; } foo()(); // 1 \",\"我们可以分析出：\",\"函数foo的作用域是全局作用域，所以foo的作用域链是foo -> 全局作用域\",\"函数fn1的作用域是foo的作用域，所以fn1的作用域链是fn1 -> foo -> 全局作用域\",\"这也就是我们说的，闭包中内部函数可以访问外部变量的原因\"]},\"163\":{\"title\":\"作用域链\",\"header\":\"事件委托\",\"text\":[\"补充：\",\"什么是事件委托？\",\"事件委托就是利用事件冒泡(由内到外)，只指定一个事件处理程序，就可以管理某一类型的所有事件。\",\"事件委托适用于那些场景？\",\"一个大量数据的列表，需要对列表的每一项都能进行一些相同的事件。假如我们为每一个列表项都增加点击事件，那么工作量很大。这样我们就可以直接在ul上增加点击事件，等待事件冒泡，执行操作。\",\"还有一种常见场景，列表不是很大，但是需要动态的增加item,并且增加的item还会绑定事件,这时候哦我们可以使用事件委托。\",\"一般情况下，适合事件委托的事件有：\",\"click，点击事件这类\",\"mousedown,对于鼠标操作这类\",\"keydown，keypress,keyup,对于键盘操作这类\",\"举例：\",\"<ul id=\\\"ul\\\"> <li>1</li> <li>2</li> <li>3</li> </ul> \",\"let ul = document.getElementById(\\\"ul\\\"); ul.addEventListener(\\\"click\\\", function (e) { console.log(e.target.innerHTML); }); \",\"当用户点击ul的子元素时，事件处理程序就会创建一个执行上下文，并将这个上下文添加到执行环境中。在这个执行环境中，可以通过作用域链来访问属性和方法和e事件对象。\",\"既然提到事件委托，那么我们就来谈谈 Javascript 的事件模型\"]},\"164\":{\"title\":\"作用域链\",\"header\":\"引申：事件模型\",\"text\":[]},\"165\":{\"title\":\"作用域链\",\"header\":\"事件和事件流\",\"text\":[\"产生原因： 因为DOM是一个树形结构，所以当父子元素都绑定了事件的时候，就会出现，事件的执行的先后顺序问题。\",\"事件流阶段：\",\"捕获阶段(从根元素开始往下寻找，一直找到目标元素，然后执行)\",\"目标阶段\",\"冒泡阶段(从当前元素开始往外查找，一直找到根元素为止)\"]},\"166\":{\"title\":\"作用域链\",\"header\":\"事件模型\",\"text\":[\"事件模型分为两种：\",\"原始事件模型\",\"标准事件模型\"]},\"167\":{\"title\":\"作用域链\",\"header\":\"原始事件模型\",\"text\":[\"原始事件模型就是指在IE8及其以下版本中使用的事件模型，这种事件模型只支持冒泡阶段，不支持捕获阶段。使用的是onCLick这种方式绑定事件。\",\"<div id=\\\"div1\\\"> <div id=\\\"div2\\\"> <div id=\\\"div3\\\"></div> </div> <div id=\\\"div4\\\"></div> </div> \",\"let div1 = document.getElementById(\\\"div1\\\"); let div2 = document.getElementById(\\\"div2\\\"); let div3 = document.getElementById(\\\"div3\\\"); let div4 = document.getElementById(\\\"div4\\\"); div1.onclick = function () { console.log(\\\"div1\\\"); }; div2.onclick = function () { console.log(\\\"div2\\\"); }; div3.onclick = function () { console.log(\\\"div3\\\"); }; div4.onclick = function () { console.log(\\\"div4\\\"); }; \",\"当我们点击div3时，会依次输出div3,div2,div1。\",\"这是因为，原始事件模型，只支持冒泡阶段，所以当我们点击div3时，会从div3开始，一直往外查找，直到根元素div1，然后执行事件处理程序。\"]},\"168\":{\"title\":\"作用域链\",\"header\":\"标准事件模型\",\"text\":[\"标准事件模型就是指在IE9及其以上版本中使用的事件模型，这种事件模型同时支持冒泡阶段和捕获阶段。使用的是addEventListener这种方式绑定事件。\",\"<div id=\\\"div1\\\"> <div id=\\\"div2\\\"> <div id=\\\"div3\\\"></div> </div> <div id=\\\"div4\\\"></div> </div> \",\"let div1 = document.getElementById(\\\"div1\\\"); let div2 = document.getElementById(\\\"div2\\\"); let div3 = document.getElementById(\\\"div3\\\"); let div4 = document.getElementById(\\\"div4\\\"); div1.addEventListener(\\\"click\\\", function () { console.log(\\\"div1\\\"); }); div2.addEventListener(\\\"click\\\", function () { console.log(\\\"div2\\\"); }); div3.addEventListener(\\\"click\\\", function () { console.log(\\\"div3\\\"); }); div4.addEventListener(\\\"click\\\", function () { console.log(\\\"div4\\\"); }); \",\"addEventListener接收三个参数：\",\"第一个参数：事件类型\",\"第二个参数: 事件处理程序\",\"第三个参数：是否在捕获阶段执行事件处理程序，默认为false，即在冒泡阶段执行事件处理程序。\",\"这是因为，现代浏览器的事件模型，同时支持冒泡阶段和捕获阶段，所以当我们点击div3时，会从div1开始，一直往下查找，直到div3，然后执行事件处理程序。\",\"现在我们可以分析上述代码：点击div3时，会依次输出div3,div2,div1。\"]},\"169\":{\"title\":\"作用域链\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"作用域链\"]}},\"170\":{\"title\":\"数组的原型链\",\"header\":\"原型\",\"text\":[\"每个函数都有一个 prototype 属性，这个属性指向函数的原型对象。原型对象中有一个 constructor 属性，指向函数本身。\"]},\"171\":{\"title\":\"数组的原型链\",\"header\":\"原型链\",\"text\":[\"每个对象都有一个 proto 属性，指向创建它的构造函数的原型对象。 原型对象也是对象，也有 proto 属性，指向创建它的构造函数的原型对象。这样一层一层，就形成了原型链。\"]},\"172\":{\"title\":\"数组的原型链\",\"header\":\"数组的原型链\",\"text\":[\"数组本身就是一个特殊的对象，所以数组的原型链和对象的原型链是一样的。\"]},\"173\":{\"title\":\"数组的原型链\",\"text\":[\"首先先来介绍一下原型和原型链\"],\"customFields\":{\"0\":[\"JavaScript\",\"数组\"],\"1\":[\"数组\",\"原型链\"]}},\"174\":{\"title\":\"类的继承\",\"header\":\"ES5 的继承\",\"text\":[\"基于原型链的继承\",\"// 定义父类 function Person{ this.name = name; this.age = age; } // 定义父类的方法 Person.prototype.say = function(){ console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } // 定义子类 function Student(grade){ this.grade = grade; } // 继承父类 Student.prototype = new Person(\\\"summer\\\",12); // 实例化 const s1 = new Student(1); s1.say(); // My name is summer, I'm 12 years old. \",\"基于构造函数继承\",\"在子类中，使用call()调用父类的构造函数，这样就可以实现继承，将父类的属性添加到子类的实例上，将属性变为实例属性\",\"// 构造函数 function Person(name, age) { this.name = name; this.age = age; } // 定义方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 定义子类 function Student(name, age, grade) { Person.call(this, name, age); // 相当于将父类的实例复制了一份给了子类 this.grade = grade; } // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // 报错 \",\"但是如果是基于构造函数的继承，子类无法获取到父类原型上的方法\",\"组合继承(构造函数继承+原型链继承)\",\"// 构造函数 function Person(name, age) { this.name = name; this.age = age; } // 实现方法 Person.prototype.say = function () { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); }; // 定义子类 function Student(name, age, grade) { Person.call(this, name, age); // 构造函数继承获取到父类的属性 this.grade = grade; } // 原型链继承 Student.prototype = new Person(); // 原型链继承获取到父类的方法 // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // My name is summer, I'm 12 years old. \"]},\"175\":{\"title\":\"类的继承\",\"header\":\"ES6 的继承\",\"text\":[\"// 定义父类 class Person { constructor(name, age) { this.name = name; this.age = age; } say() { console.log(`My name is ${this.name}, I'm ${this.age} years old.`); } } // 定义子类 class Student extends Person { constructor(name, age, grade) { super(name, age); // 调用父类的构造函数 this.grade = grade; } } // 实例化 const s1 = new Student(\\\"summer\\\", 12, 1); s1.say(); // My name is summer, I'm 12 years old. \",\"super关键字的作用：\",\"通过调用super可以让子类访问到父类的方法和属性\",\"可以使用super调用父类的构造函数，super()相当于Person.call(this, name, age)\",\"super可以调用原型方法和静态方法\",\"class Person{ constructor(name,age){ this.name = name; this.age = age } // 添加原型方法 say(){ console.log(\\\"hello,\\\"+this.name) } // 添加静态方法 static sayHi(){ console.log(\\\"hi,\\\"+this.name) } } // 子类 class Student{ // 继承属性 constructor(name,age,grade){ // 调用父类的构造函数 super(name,age) this.grade = grade } // 继承方法，对方法进行重写 say(){ console.log(\\\"hello,\\\"+this.name+\\\",I'm \\\"+this.age+\\\" years old.\\\") } } \"]},\"176\":{\"title\":\"类的继承\",\"customFields\":{\"0\":[\"JavaScript\"],\"1\":[\"继承\",\"类\"]}},\"177\":{\"title\":\"HTTP基本概念\",\"customFields\":{\"0\":[\"Network 篇\",\"HTTP\"],\"1\":[\"Network\",\"HTTP\",\"basic\"]}},\"178\":{\"title\":\"TCP/IP网络模型\",\"header\":\"应用层\",\"text\":[\"应用层是网络应用程序及它们的应用层协议存留的地方，例如HTTP、FTP、SMTP、DNS等。\",\"我们手机上的APP，电脑上的软件，都是应用层的东西。\",\"应用层不关心数据传输的细节，传输层会帮我们处理数据传输的细节。\",\"应用层是工作在操作系统的用户态，传输层及以下是工作在操作系统的内核态。\"]},\"179\":{\"title\":\"TCP/IP网络模型\",\"header\":\"传输层\",\"text\":[\"传输层为两台主机上的应用程序提供端到端的通信，例如TCP、UDP等。\",\"传输层有两个协议：TCP和UDP。\",\"TCP提供面向连接的、可靠的数据传输服务，它能够保证数据从一端传到另一端，而且不会丢失，不会乱序，不会重复，而且还能够保证数据的顺序。\",\"UDP提供无连接的、尽最大努力的数据传输服务，它不保证数据传输的可靠性，也就是说，当数据传到另一端时，我们并不能确定数据是否传输成功，也不能确定数据是否乱序，是否重复，是否丢失，也不能确定数据的顺序。\"]},\"180\":{\"title\":\"TCP/IP网络模型\",\"header\":\"TCP段的由来\",\"text\":[\"当应用层需要传递的数据非常大,超过了输出层的数据包大小的时候，这时候就会把数据分成多个小的数据包，每个小的数据包都会被封装成一个TCP段，然后再传输到传输层。\"]},\"181\":{\"title\":\"TCP/IP网络模型\",\"header\":\"网络层\",\"text\":[\"应用层将数据交给传输层，传输层只是为应用层提供了端到端的通信，但是传输层并不知道数据是如何从一端传到另一端的，这就需要网络层来帮助传输层完成这个工作。\",\"网络层使用协议：IP协议。\",\"IP协议定义了一种寻址方式，可以借助子网掩码就可以计算出网络号和主机号。 在寻址过程中，一般都是先匹配网络号，再匹配主机号。 \",\"IPV4：32位寻址方式\",\"IPV6：128位寻址方式\",\"IP协议还定义了一种路由选择协议，可以根据IP地址的不同，选择不同的路由，从而实现数据从一端传到另一端。 在实际生活，两个主机并不是直接通过一条链路相连的，而是通过一些路由器相连的，所以，当数据从一端传到另一端的时候，数据会经过很多的路由器，这就需要路由器来帮助我们选择路由，从而实现数据从一端传到另一端。\",\"路由器寻址工作中，就是要找到目标地址的子网，找到后进而把数据包转发给对应的网络内。IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘。\"]},\"182\":{\"title\":\"TCP/IP网络模型\",\"header\":\"链路层\",\"text\":[\"链路层是网络层的下一层，它的作用是将网络层传下来的IP数据报封装成帧，然后再通过物理层进行传输。\"]},\"183\":{\"title\":\"TCP/IP网络模型\",\"header\":\"物理层\",\"text\":[\"物理层是整个网络模型的最底层，它的作用是将数据从一台主机传输到另一台主机，它传输的单位是比特，也就是0和1。\",\"每一层的封装格式：\"]},\"184\":{\"title\":\"TCP/IP网络模型\",\"customFields\":{\"0\":[\"Network篇\"],\"1\":[\"Network\",\"basic\"]}},\"185\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"浏览器解析\",\"text\":[\"浏览器会判断输入的网址是搜索内容还是网址，如果是搜索内容，浏览器会将其转换为https://www.baidu.com/s?wd=搜索内容的形式，然后再发送请求。 这边我们考虑的都是键入网址内容\",\"浏览器会先检查本地缓存中是否有该网址对应的资源，如果有，就直接从缓存中获取资源，如果没有，就发送请求到服务器。\",\"浏览器会解析网址，获取协议、域名、端口号、路径、查询字符串、锚点等信息。\"]},\"186\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"DNS解析\",\"text\":[\"浏览器会先检查本地缓存中是否有该网址对应的IP地址，如果有，就直接从缓存中获取，如果没有，就发送请求到DNS服务器。\",\"向DNS发送请求采用的是迭代查询，即先向根域名服务器发送请求，根域名服务器会返回一个IP地址，然后再向该IP地址对应的服务器发送请求，该服务器会返回一个IP地址，然后再向该IP地址对应的服务器发送请求，直到最后返回一个IP地址。\",\"在DNS解析完成以后，就可以获取到目的网络的IP地址，这时候应用层就会生成相应的Http报文，然后从上往下传输到传输层\"]},\"187\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"TCP连接\",\"text\":[\"TCP在传输数据之前，要先进行三次握手，建立连接。\",\"双方建立好连接以后，就可以进行数据传输了。如果HTTP请求的消息体较大，TCP会将消息体分成多个数据包，然后在接收端再将其组装起来。\",\"将封装好的数据包传输到网络层。\"]},\"188\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"IP协议\",\"text\":[\"IP协议需要将数据封装为数据包，然后发送到数据链路层。\",\"IP协议需要知道源地址IP和目的地址IP，这两个地址都是IP地址，而不是域名。\"]},\"189\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"MAC地址\",\"text\":[\"IP头部生成后，还需要在数据链路层生成MAC头部，MAC头部包含源MAC地址和目的MAC地址。\",\"发送方的MAC在网卡生产的时候就已经固定了，而接收方的MAC地址是通过ARP协议获取的。\",\"ARP获取MAC地址的方式，是一种广播的方式，即发送方会向网络中的所有主机发送请求，询问目的主机的MAC地址，然后目的主机会向发送方回复MAC地址。ARP为了提高效率，会有一个缓存\",\"在数据链路层，数据包会被封装为帧吗，帧里面包含了MAC头部和IP头部，然后再发送到物理层。\"]},\"190\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"网卡\",\"text\":[\"网卡会将数据包转换为电信号，然后通过网线发送出去，发送到路由器上。也就是说，这才是真正的数据发送过程\"]},\"191\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"交换机\",\"text\":[\"交换机的端口因为无法获取到MAC地址，所以会将数据包转发到所有的端口，但是交换机会记录下数据包的源MAC地址和端口号，然后将其存储到MAC地址表中。\",\"所以交换机会根据MAC地址表，将数据包转发到目的主机。\"]},\"192\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"header\":\"路由器\",\"text\":[\"网络包经过交换机转发到路由器上，路由器会根据IP头部的目的IP地址，查找路由表，然后将数据包转发到下一个路由器。\"]},\"193\":{\"title\":\"键入网址到页面显示，发生了什么？\",\"customFields\":{\"0\":[\"Network 篇\"],\"1\":[\"Network\",\"basic\"]}},\"194\":{\"title\":\"系统加载\",\"header\":\"场景\",\"text\":[\"在项目中，因为首页的一些数据需要在用户登录后才能获取，所以需要在用户登录后，再加载首页的数据。假如我们在登录成功后，直接跳转到首页，那么首页的数据还未加载，会导致页面显示不全，所以需要在首页加载完成后，再跳转到首页。这时候我们就需要一个系统加载的功能(Loading)。\"]},\"195\":{\"title\":\"系统加载\",\"header\":\"实现\",\"text\":[]},\"196\":{\"title\":\"系统加载\",\"header\":\"1. 使用 createApp 创建了两个 vue 实例\",\"text\":[\"// main.js import { createApp } from \\\"vue\\\"; import App from \\\"./App.vue\\\"; const loading = createApp(App); loading.mount(\\\"#loading\\\"); const app = createApp(App); app.mount(\\\"#app\\\"); // 当`app`组件加载好了之后，就可以销毁`loading`组件了。 loading.unmount(); \",\"先挂载 loading 实例，再挂载 app 实例，这样就可以保证 loading 实例先加载，app 实例后加载。\"]},\"197\":{\"title\":\"系统加载\",\"customFields\":{\"0\":[\"项目复盘\"],\"1\":[\"soybean admin\",\"项目复盘\"]}},\"198\":{\"title\":\"jsx转化过程\",\"header\":\"什么是 jsx？\",\"text\":[\"jsxjsx 可以生成 React 元素，它是 React 的一种语法糖。\"]},\"199\":{\"title\":\"jsx转化过程\",\"header\":\"jsx 转化过程\",\"text\":[]},\"200\":{\"title\":\"jsx转化过程\",\"header\":\"1. 转化为 React 元素\",\"text\":[\"首先jsx会被babel转化成React.createElement的形式(React16),在React17以后,JSX不会将JSX转化为React.createElement的形式,而是直接从React的包中引入JSX的运行时,这样就不需要引入React了,这样就减少了打包的体积。\",\"举一个例子：\",\"<div id=\\\"app\\\" className=\\\"app\\\"> <span>hello</span> <Hello>hello</Hello> </div> \"]},\"201\":{\"title\":\"jsx转化过程\",\"header\":\"在 React16 中，会被转化成：\",\"text\":[\"/*#__PURE__*/ React.createElement( \\\"div\\\", { id: \\\"app\\\", className: \\\"app\\\", }, /*#__PURE__*/ React.createElement(\\\"span\\\", null, \\\"hello\\\"), /*#__PURE__*/ React.createElement(Hello, null, \\\"hello\\\") ); \",\"createElement(type, [props], [...children])\",\"接受三个参数：\",\"type：表示元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。\",\"props：表示元素的属性，比如 id、className、style 等。\",\"children：表示当前元素的子元素。\",\"返回类型：ReactElement\",\"ReactElement\",\"ReactElement 是 React 元素的类型，它是一个对象，它的结构如下：\",\"const ReactElement = function (type, key, ref, self, source, owner, props) { const element = { // 用于标识这是一个 React 元素 $typeof: REACT_ELEMENT_TYPE, // 用于标识这个元素的类型 type: type, key: key, ref: ref, props: props, // 记录创建这个元素的组件 _owner: owner, }; return element; }; \",\"$typeof：用于标识这是一个 React 元素。他是一个 Symbol 类型的值，值为 Symbol.for('react.element')。\",\"type: 用于标识这个元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。\",\"ref: 用于标识这个元素的 ref 属性。\",\"props: 用于标识这个元素的属性(class等)。\",\"key: 用于标识这个元素或者组件的 key 属性。\"]},\"202\":{\"title\":\"jsx转化过程\",\"header\":\"在 React17 中，会被转化成：\",\"text\":[\"import { jsx as _jsx } from \\\"react/jsx-runtime\\\"; import { jsxs as _jsxs } from \\\"react/jsx-runtime\\\"; /*#__PURE__*/ _jsxs(\\\"div\\\", { id: \\\"app\\\", className: \\\"app\\\", children: [ /*#__PURE__*/ _jsx(\\\"span\\\", { children: \\\"hello\\\", }), /*#__PURE__*/ _jsx(Hello, { children: \\\"hello\\\", }), ], }); \",\"jsx(type, props, children)\",\"接受三个参数：\",\"type：表示元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。\",\"props：表示元素的属性，比如 id、className、style 等。\",\"children：表示当前元素的子元素。\",\"返回类型：ReactElement\",\"引申：为什么在 React 老版本中，使用 jsx 语法时，需要引入 React，而在 React17 中，不需要引入 React？\",\"因为在 React16 中，jsx 会被转化成 React.createElement 的形式，而 React.createElement 是一个函数，所以在使用 jsx 语法时，需要引入 React。但是在 React17 中，jsx 会被转化成 React.js 中的 jsx 函数，而 jsx 函数是一个 import 导入的函数，所以不需要引入 React。\"]},\"203\":{\"title\":\"jsx转化过程\",\"header\":\"2. React 元素转化为 Fiber\",\"text\":[\"在ReactElement被创建完以后，它就会被调度器Scheduler接管，Scheduler会将这个ReactElement放到Fiber中。\",\"Filber对应的是React中的Fiber，Fiber是React中的一个核心算法，它是一个链表结构，它的结构如下：\",\"type Fiber = { // 用于标识这个 Fiber 对应的组件 type: any; // 用于标识这个 Fiber 对应的 DOM 元素 key: null | string; // 用于标识这个 Fiber 对应的 DOM 元素 elementType: any; // 用于标识这个 Fiber 对应的 DOM 元素 ref: null | (((handle: any) => void) & { _stringRef: ?string }) | RefObject; // 用于标识这个 Fiber 对应的 DOM 元素 source: null | Source; // 用于标识这个 Fiber 对应的 DOM 元素 return: Fiber | null; // 用于标识这个 Fiber 的子 Fiber child: Fiber | null; // 用于标识这个 Fiber 的兄弟 Fiber sibling: Fiber | null; // 用于标识这个 Fiber 对应的组件的状态 stateNode: any; // 任务优先级 memoizedState: any; // 任务阶段 memoizedProps: any; }; \",\"它对应三种关系：\",\"return：用于标识这个 Fiber 的父 Fiber。\",\"child：用于标识这个 Fiber 的子 Fiber。\",\"siblings：用于标识这个 Fiber 的兄弟 Fiber。\",\"并且Filber中还存在任务优先级属性，用于标识这个任务的优先级，优先级越高，越先执行。\"]},\"204\":{\"title\":\"jsx转化过程\",\"header\":\"3. Fiber 转化为 DOM\",\"text\":[\"在Fiber被创建完以后，它就会被Renderer接管，Renderer会将这个Fiber转化成DOM。\"]},\"205\":{\"title\":\"jsx转化过程\",\"customFields\":{\"0\":[\"React\"],\"1\":[\"React\",\"jsx\"]}},\"206\":{\"title\":\"React Hooks\",\"header\":\"React Hooks\",\"text\":[]},\"207\":{\"title\":\"React Hooks\",\"header\":\"类组件和函数组件\",\"text\":[]},\"208\":{\"title\":\"React Hooks\",\"header\":\"类组件\",\"text\":[\"类组件使用class,类组件时继承React.Component。 类组件具有自己的状态(state),可以在constructor中初始化state,直接使用this.state来进行修改状态。\",\"import React from \\\"react\\\"; class App extends React.Component { constructor(props) { super(props); this.state = { count: 0, }; } render() { return ( <div> <h1>{this.state.count}</h1> <button onClick={() => this.setState({ count: this.state.count + 1 })}> +1 </button> </div> ); } } \"]},\"209\":{\"title\":\"React Hooks\",\"header\":\"函数组件\",\"text\":[\"函数组件是一个函数，函数组件没有自己的状态(state)，函数组件只能接收props，不能修改props。\",\"import React from \\\"react\\\"; function App(props) { return ( <div> <h1>{props.count}</h1> <button onClick={() => props.setCount(props.count + 1)}>+1</button> </div> ); } \"]},\"210\":{\"title\":\"React Hooks\",\"header\":\"类组件和函数组件的区别\",\"text\":[\"类组件有自己的状态(state)，函数组件没有自己的状态(state)。\",\"但是函数组件可以通过useState来使用状态(state)。\",\"类组件有生命周期钩子，函数组件没有生命周期钩子。\",\"但是函数组件可以通过useEffect来模拟生命周期钩子。useEffect其实就可以用来模拟componentDidMount、componentDidUpdate和componentWillUnmount这三个生命周期钩子。\",\"类组件可以使用this关键字，函数组件不能使用this关键字。\"]},\"211\":{\"title\":\"React Hooks\",\"header\":\"Hooks 种类\",\"text\":[]},\"212\":{\"title\":\"React Hooks\",\"header\":\"useState 函数\",\"text\":[\"useState函数可以让我们在函数组件中使用状态对象(this.state)，useState函数接收一个参数，这个参数就是状态对象(this.state)的初始值，useState函数返回一个数组，这个数组的第一个元素就是状态对象(this.state)，第二个元素是一个函数，这个函数可以用来修改状态对象(this.state)。\",\"import React, { useState } from \\\"react\\\"; export default function App() { const [count, setCount] = useState(0); return ( <div> <h1>{count}</h1> <button onClick={() => setCount(count + 1)}>+1</button> </div> ); } \"]},\"213\":{\"title\":\"React Hooks\",\"header\":\"useEffect 函数\",\"text\":[\"useEffect函数可以让我们在函数组件中使用生命周期钩子，useEffect函数接收一个函数作为参数，这个函数就相当于componentDidMount、componentDidUpdate和componentWillUnmount这三个生命周期钩子的集合体，这个函数会在组件初始化渲染之后执行，也会在组件更新之后执行，也会在组件卸载之前执行。\",\"import React, { useState, useEffect } from \\\"react\\\"; export default function App() { const [count, setCount] = useState(0); useEffect(() => { console.log(\\\"组件初始化渲染之后执行\\\"); return () => { console.log(\\\"组件即将被卸载之前执行\\\"); }; }, [count]); // 数组中传入的值，只有在这些值发生改变的时候，才会执行useEffect函数中的函数 return ( <div> <h1>{count}</h1> <button onClick={() => setCount(count + 1)}>+1</button> </div> ); } \",\"react18以后，useEffect会被执行两次，这是为了模拟立即卸载组件和重新挂载组件的情况。\"]},\"214\":{\"title\":\"React Hooks\",\"header\":\"useContext 函数\",\"text\":[\"useContext函数可以让我们在函数组件中使用React的上下文对象。\",\"场景： 有一个父组件，父组件中有一个状态对象(this.state)，父组件中有一个子组件，子组件中需要使用到父组件中的状态对象(this.state)，这个时候就可以使用React的上下文对象来实现。\",\"import React, { useState, useContext } from \\\"react\\\"; // 创建一个上下文对象 const MyContext = React.createContext(); export default function App() { const [count, setCount] = useState(0); return ( <MyContext.Provider value={{ count, setCount }}> <Child /> </MyContext.Provider> ); } function Child() { const { count, setCount } = useContext(MyContext); return ( <div> <h1>{count}</h1> <button onClick={() => setCount(count + 1)}>+1</button> </div> ); } \",\"需要特别注意，常见的上下文，如果不在一个文件里面，那么就需要将这个上下文暴露出去，并且在子组件里面应用，并且访问\",\"useContext进行传递参数和Props父子传参的区别：useContext可以跨越多层组件传递参数，而Props只能在父子组件之间传递参数。\",\"引申：React 之间组件通信的方式有哪些？\",\"参考链接：组件通信方式\"]},\"215\":{\"title\":\"React Hooks\",\"header\":\"useReducer 函数\",\"text\":[\"useReducer函数可以让我们在函数组件中使用Redux的reducer函数。\",\"import React, { useReducer } from \\\"react\\\"; export default function App() { const [count, dispatch] = useReducer((state, action) => { switch (action.type) { case \\\"add\\\": return state + 1; case \\\"sub\\\": return state - 1; default: return state; } }, 0); return ( <div> <h1>{count}</h1> <button onClick={() => dispatch({ type: \\\"add\\\" })}>+1</button> <button onClick={() => dispatch({ type: \\\"sub\\\" })}>-1</button> </div> ); } \"]},\"216\":{\"title\":\"React Hooks\",\"header\":\"useMemo 函数\",\"text\":[\"useMemo函数可以让我们在函数组件中缓存一些数据，这些数据只有在依赖的值发生改变的时候，他才会重新计算。\",\"import React, { useState, useMemo } from \\\"react\\\"; export default function App() { const [count, setCount] = useState(0); const [name, setName] = useState(\\\"张三\\\"); const double = useMemo(() => { console.log(\\\"计算double\\\"); return count * 2; }, [count]); return ( <div> <h1>{count}</h1> <h1>{name}</h1> <h1>{double}</h1> <button onClick={() => setCount(count + 1)}>+1</button> <button onClick={() => setName(\\\"李四\\\")}>改名</button> </div> ); } \",\"我们可以这么理解useMemo和useState的关系：\",\"我们可以将useState设置出来的状态理解为自变量，只要自变量改变(state)，那么视图就会发生变化。\",\"同样的，useMemo用来缓存因变量，只要因变量改变(count)，那么因变量就会重新计算(double)，而double的重新计算，会导致视图的重新渲染。\",\"其实可以将useMemo理解为Vue中的计算属性。\"]},\"217\":{\"title\":\"React Hooks\",\"header\":\"useCallback 函数\",\"text\":[\"useCallback函数可以让我们在函数组件中缓存一些函数，这些函数只有在依赖的值发生改变的时候，他才会重新创建。\",\"import React, { useState, useCallback } from \\\"react\\\"; export default function App() { const [count, setCount] = useState(0); const [name, setName] = useState(\\\"张三\\\"); const handleClick = useCallback(() => { console.log(\\\"handleClick\\\"); }, [count]); return ( <div> <h1>{count}</h1> <h1>{name}</h1> <button onClick={() => setCount(count + 1)}>+1</button> <button onClick={() => setName(\\\"李四\\\")}>改名</button> <button onClick={handleClick}>点击</button> </div> ); } \",\"我们可以这么理解useCallback和useState的关系：\",\"我们可以将useState设置出来的状态理解为自变量，只要自变量改变(state)，那么视图就会发生变化。\",\"同样的，useCallback用来缓存因变量函数，只要因变量改变(count)，那么因变量就会重新创建(handleClick)，而handleClick的重新创建，会导致视图的重新渲染。\",\"其实useCallback函数和useMemo函数的实现原理是一样的，只不过useCallback函数返回的是一个函数，而useMemo函数返回的是一个值。\"]},\"218\":{\"title\":\"React Hooks\",\"header\":\"useRef 函数\",\"text\":[\"useRef函数可以让我们在函数组件创建引用对象，这些数据不会导致视图的重新渲染。\",\"useRef函数它会返回一个refObj对象，这个对象有一个current属性，这个属性可以用来存储数据。 特点：更新 ref 数据，不会导致视图重新渲染\",\"一般我们会将useRef和ref结合使用，来获取DOM元素。\",\"import React, { useState, useRef } from \\\"react\\\"; export default function App() { // 创建ref对象 const inputRef = useRef(); // 获取input输入内容 const changeData = () => { console.log(inputRef.current.value); }; return ( <div> <input type=\\\"text\\\" ref={inputRef} @change=\\\"changeData\\\"/> </div> ); } \",\"useRef 可以用来引用任何类型的对象，React ref 只是一个用于引用 DOM 元素的 DOM 属性\",\"import { useState, useRef } from \\\"react\\\"; export default function Stopwatch() { const [startTime, setStartTime] = useState(null); const [now, setNow] = useState(null); // let timmer = null const timmer = useRef(null); function handleStart() { // 开始计时。 setStartTime(Date.now()); setNow(Date.now()); timmer.current = setInterval(() => { // 每 10ms 更新一次当前时间。 setNow(Date.now()); }, 10); } function handleStop() { clearInterval(timmer.current); // 这时候timmer是undefined，获取不到的，所以需要在外面定义 // timmer在外边定义，确实可以获取到，但是无法清除，因为timmer是一个局部变量，每次执行handleStart的时候，都会重新定义一个timmer，所以无法清除 // 这时候就只能用useRef了 } let secondsPassed = 0; if (startTime != null && now != null) { secondsPassed = (now - startTime) / 1000; } return ( <> <h1>时间过去了： {secondsPassed.toFixed(3)}</h1> <button onClick={handleStart}>开始</button> <button onClick={handleStop}>停止</button> </> ); } \",\"react官网也表达，当你的组件需要保存一些不需要导致视图更新的数据时，可以使用useRef。比如上面的例子，我们需要保存一个定时器，这个定时器不需要导致视图的更新，所以我们可以使用useRef。\"]},\"219\":{\"title\":\"React Hooks\",\"customFields\":{\"0\":[\"React\"],\"1\":[\"React\",\"Hooks\"]}},\"220\":{\"title\":\"React生命周期\",\"header\":\"什么是生命周期\",\"text\":[\"生命周期是组件从实例化到销毁的过程，也就是组件从生成到消亡的过程，这个过程中会伴随着一些事件，这些事件就是生命周期函数。\",\"生命周期分为三个状态：挂载(Mounting)、更新(Updating)、卸载(Unmounting)。\",\"组件的生命周期分为三个阶段：\",\"render阶段：从组件实例化到组件渲染完成的过程,用于计算当前的状态/更新信息，会根据产生的任务的优先级来决定是否执行，安排任务的调度\",\"pre-commit阶段：从组件开始渲染到组件渲染完成的过程\",\"commit阶段：从组件渲染完成到组件卸载的过程\",\"但是在React17之后，render阶段和pre-commit阶段合并为一个阶段，也就是说React17之后只有两个阶段：render阶段和commit阶段。\",\"因为react在 16.3 版本之后，推出了Fiber架构，Fiber架构的目的是为了解决react在渲染过程中，如果渲染任务过多，会造成页面卡顿，用户体验不好的问题，所以Fiber架构的目的就是为了解决这个问题，Fiber架构的核心就是render阶段和commit阶段的分离，render阶段负责计算任务，commit阶段负责执行任务，这样就可以根据任务的优先级来安排任务的调度，从而解决了react在渲染过程中，导致页面卡顿的问题。这就带来了一些生命周期钩子被废弃。\"]},\"221\":{\"title\":\"React生命周期\",\"header\":\"生命周期的分类\",\"text\":[]},\"222\":{\"title\":\"React生命周期\",\"header\":\"16.3 版本之前的生命周期\",\"text\":[]},\"223\":{\"title\":\"React生命周期\",\"header\":\"挂载阶段\",\"text\":[\"constructor：构造函数，最先被执行，我们通常在构造函数里初始化组件的状态对象(this.state)或者给自定义方法绑定this。\",\"componentWillMount：组件即将被挂载到页面上之前执行，也就是在组件即将被渲染到页面之前执行，此时可以修改组件的状态对象(this.state)，这个方法在服务端渲染中也会被调用。\",\"render: 渲染函数，它是一个纯函数，只负责渲染组件。它具有以下特性： \",\"不能修改组件的状态对象(this.state)，可能会导致组件一直被重新渲染。\",\"不能和浏览器进行交互，不能获取 DOM 元素。\",\"只能通过this.props和this.state来获取数据。\",\"只能返回一个顶级元素，不能返回多个顶级元素。\",\"componentDidMount(preProps,preState)：组件已经被挂载到页面上之后执行，也就是在组件已经被渲染到页面之后执行，此时可以获取到真实的 DOM 元素。它具有以下特性： \",\"最早可以获取到真实 DOM 元素的钩子。\"]},\"224\":{\"title\":\"React生命周期\",\"header\":\"更新阶段\",\"text\":[\"componentWillReceiveProps(nextProps)：组件即将接收到新的props之前执行，也就是说，当一个组件从父组件接收到新的props之前执行，此时可以根据新的props来修改组件的状态对象(this.state)。 特性：\",\"在组件初始化渲染的时候不会执行，父组件被重新渲染(state发生变化)，这个方法也会被执行，即使父组件传递给子组件的props没有发生改变，这个方法也会被执行。\",\"在这个钩子里面可以最早拿到新的props(父组件传递给子组件)，但是不能获取到组件之前的props。\",\"shouldComponentUpdate(nextProps,nextState)：组件是否要被更新，也就是说，当一个组件接收到新的props或者state之后，shouldComponentUpdate会在组件重新渲染之前执行，此时我们可以根据新的props或者state来判断组件是否需要重新渲染，默认返回true，如果返回false，那么这个组件就不会被重新渲染，这个生命周期函数主要用于性能优化。\",\"我们可以使用Json.stringify()来比较两个对象(this.state和nextState)是否相等，如果两个对象相等，那么就返回false，如果两个对象不相等，那么就返回true。\",\"componentWillUpdate(nextProps,nextState)：组件即将被更新之前执行，也就是说，当一个组件要被重新渲染之前执行，此时可以根据新的props或者state来修改组件的状态对象(this.state)。\",\"componentDidUpdate(preProps,preState)：组件已经被更新之后执行，也就是说，当一个组件被重新渲染之后执行，此时可以获取到真实的 DOM 元素，比如：获取到真实的 DOM元素之后，可以使用第三方库来操作这个 DOM 元素。\"]},\"225\":{\"title\":\"React生命周期\",\"header\":\"卸载阶段\",\"text\":[\"componentWillUnmount：组件即将被卸载之前执行，也就是说，当一个组件从页面上被移除之前执行，此时可以做一些清理工作，比如：清除定时器、取消网络请求、清除组件中的缓存等。\",\"但是上面的生命周期都是在react16.3之前的生命周期，react16.3之后的生命周期有所改变，react16.3之后的生命周期有以下几个：\"]},\"226\":{\"title\":\"React生命周期\",\"header\":\"16.3 版本之后的生命周期\",\"text\":[]},\"227\":{\"title\":\"React生命周期\",\"header\":\"挂载阶段\",\"text\":[\"constructor：构造函数，最先被执行，我们通常在构造函数里初始化组件的状态对象(this.state)或者给自定义方法绑定this。\",\"static getDerivedStateFromProps(props, state)：这是一个静态方法，也就是说，这个方法不能访问到组件实例(this)，这个方法在组件实例化之后和接收到新的props之后执行，这个方法的返回值会被添加到组件的状态对象(this.state)中,用于性能优化。\",\"简单来说，这个方法的作用就是根据新的props来更新组件的状态对象(this.state)，这个方法的返回值会被添加到组件的状态对象(this.state)中，如果返回null，则不会更新组件的状态对象(this.state)，就是将return到的对象替换当前的state。\",\"他在第一次渲染的时候被调用，以后每次接收到新的props之后都会被调用。\",\"render: 渲染函数，它是一个纯函数，只负责渲染组件。他和react16.3之前的render函数没有什么区别。\"]},\"228\":{\"title\":\"React生命周期\",\"header\":\"更新阶段\",\"text\":[\"getSnapshotBeforeUpdate(preProps,preState):这个方法在组件更新之前执行，此时可以获取到最新的 DOM 数据，在这个方法中返回的任何值都会作为参数传递给componentDidUpdate的第三个参数。\",\"简单来说，这个方法的作用就是在组件更新之前获取到最新的 DOM 数据，然后在componentDidUpdate中获取到这个方法的返回值。\",\"这个方法的返回值会作为参数传递给componentDidUpdate的第三个参数。\",\"这个方法在组件初始化渲染的时候不会被调用，只有在组件更新的时候才会被调用。\",\"shouldComponentUpdate(nextProps,nextState)：组件是否要被更新,用于性能优化。和react16.3之前的shouldComponentUpdate没有什么区别。\",\"componentDidUpdate(preProps,preState,snapshot)：组件已经被更新之后执行，也就是说，当一个组件被重新渲染之后执行，此时可以获取到真实的 DOM 元素。也可以在这个钩子里面根据preProps和preState来做一些性能优化。但是如果你要在这个钩子里面使用this.setState来修改状态的话，必须要有一个条件限制（判断 props），否则会导致组件陷入死循环。\"]},\"229\":{\"title\":\"React生命周期\",\"header\":\"卸载阶段\",\"text\":[\"componentWillUnmount：组件即将被卸载之前执行，也就是说，当一个组件从页面上被移除之前执行，此时可以做一些清理工作，比如：清除定时器、取消网络请求、清除组件中的缓存等。\",\"上述介绍的所有生命周期钩子，都是借助React的class组件来实现的，但是在React16.8之后，新增了一个hook函数，可以让我们在不使用class组件的情况下使用生命周期钩子。\"]},\"230\":{\"title\":\"React生命周期\",\"header\":\"hook 函数\",\"text\":[\"hook函数是React16.8之后新增的一个函数，可以让我们在不使用class组件的情况下使用生命周期钩子。\",\"其实严格来说，hook函数并不是生命周期钩子，它只是模拟了生命周期钩子的功能，因为，生命周期函数都是react.component的方法，函数组件并没有继承，所以也不会拥有\",\"useEffect: 这个函数的作用就相当于componentDidMount、componentDidUpdate和componentWillUnmount这三个生命周期函数的集合。\",\"import React, { useState, useEffect } from \\\"react\\\"; function App() { const [count, setCount] = useState(0); useEffect(() => { console.log(\\\"组件挂载完成\\\"); return () => { console.log(\\\"组件即将被卸载\\\"); }; }, []); return ( <div> <p>你点击了{count}次</p> <button onClick={() => setCount(count + 1)}>点击</button> </div> ); } \"]},\"231\":{\"title\":\"React生命周期\",\"customFields\":{\"0\":[\"React\"],\"1\":[\"生命周期\"]}},\"232\":{\"title\":\"react组件通信方式\",\"header\":\"父子组件通信\",\"text\":[]},\"233\":{\"title\":\"react组件通信方式\",\"header\":\"父传子\",\"text\":[\"使用场景: 子组件需要使用父组件的参数，这个时候我们就需要使用到父传子的方式，传递参数给子组件。一般都是使用 Props\",\"// 父组件 import React, { Component } from \\\"react\\\"; function Child(props) { console.log(props); // {name: \\\"summer\\\",children: \\\"hello,summer\\\"} return <div>{props.name}</div>; } export default function Parent() { return <Child name=\\\"summer\\\">hello,summer</Child>; } \",\"当然我们通过props不仅只能获取到参数，其实对于函数组件来说，props就是一个对象，我们可以通过props.children获取到子组件(文本或者是节点)。\"]},\"234\":{\"title\":\"react组件通信方式\",\"header\":\"子传父\",\"text\":[\"使用场景： 在子组件可能会需要修改父组件传递过来的参数，但是我们是无法直接修改 props 的，这个时候我们就需要使用到子传父的方式，通过回调函数的方式，将子组件的参数传递给父组件，然后在父组件内部修改参数。\",\"// 子组件 import React from \\\"react\\\"; export default function Child(props) { return ( <div> <button onClick={() => props.changeName(\\\"summer\\\")}>修改父组件的name</button> </div> ); } // 父组件 import React, { Component } from \\\"react\\\"; import Child from \\\"./Child\\\"; export default function Parent() { const [name, setName] = useState(\\\"summer\\\"); const changeName = (name) => { setName(name); }; return ( <div> <Child changeName={changeName} /> <div>{name}</div> </div> ); } \",\"这时候姐可以在子组件内部通过props.changeName修改父组件的 name 了。\",\"引申：传递给事件处理函数的函数，应该是直接传递的，而不是调用\",\"// 错误 <button onClick={props.changeName(\\\"summer\\\")}>修改父组件的name</button> // 这个就是直接在调用它，而不是传递给onClick // 这样只要每次渲染子组件，都会调用changeName函数，导致无限循环 // 正确 <button onClick={() => props.changeName(\\\"summer\\\")}>修改父组件的name</button> \",\"具体参考： 响应事件\",\"总结来说：事件名要么就只写时间名字，如果需要加参数(chengName(name)这种，就需要用箭头函数包裹)\",\"父子组件通信\"]},\"235\":{\"title\":\"react组件通信方式\",\"header\":\"兄弟组件通信\",\"text\":[\"一般我们会使用变量提升\",\"Q:什么是变量提升呢？ A:其实就是,如果不借助任何外力，兄弟组件是无法通信的，但是如果我们把兄弟组件的数据提升到父组件，那么兄弟组件就可以通过父组件来通信了。\",\"// 父组件 import React, { Component } from \\\"react\\\"; import Child1 from \\\"./Child1\\\"; import Child2 from \\\"./Child2\\\"; export default function Parent() { const [name, setName] = useState(\\\"summer\\\"); const changeName = (name) => { setName(name); }; return ( <div> <Child1 name={name} /> <Child2 changeName={changeName} /> </div> ); } // 子组件1 import React from \\\"react\\\"; export default function Child1(props) { return <div>{props.name}</div>; } // 子组件2 import React from \\\"react\\\"; export default function Child2(props) { return ( <div> <button onClick={() => props.changeName(\\\"alex\\\")}>修改父组件的name</button> </div> ); } \",\"在兄弟组件通信中，如果你使用的是利用变量提升的方式\",\"那么你的组件的层级是不能太深的，因为如果层级太深，那么你就需要一层一层的传递参数，这样就会导致代码的可读性变差。\",\"兄弟组件需要用到的参数，都需要提升到父组件，这样会导致父组件的参数变多，也会导致父组件的可读性变差。\",\"兄弟组件通信\"]},\"236\":{\"title\":\"react组件通信方式\",\"header\":\"跨级组件通信\",\"text\":[\"正如上面所说的，要想实现跨级的组件通信，我们就需要使用到变量提升的方式，将参数提升到父组件，然后再通过父组件来传递参数，但是这样会带来很多问题，比如说：父组件的状态会非常多以及组件的层级会非常深，这样会导致代码的可读性变差,这时候我们需要使用Context来解决这个问题。\"]},\"237\":{\"title\":\"react组件通信方式\",\"header\":\"Context\",\"text\":[\"Context是 React 提供的一种跨组件传递参数的方式，它可以让我们在不需要一层一层的传递参数的情况下，就可以实现跨组件传递参数。\",\"Context的使用分为三步：\",\"创建 Context\",\"const MyContext = React.createContext(); \",\"如果创建的 Context,子组件获取不到，这时候需要暴露\",\"使用 Context.Provider 组件包裹需要传递参数的组件\",\"<MyContext.Provider value={contextValue}> <Child /> </MyContext.Provider> \",\"在需要使用参数的组件中，使用 Context.Consumer 组件来获取参数\",\"let contextValue = React.useContext(MyContext); \",\"任意组件通信\"]},\"238\":{\"title\":\"react组件通信方式\",\"header\":\"任意组件通信\",\"text\":[\"我可以使用redux实现任意组件通信\",\"引申： Redux 是什么？\"]},\"239\":{\"title\":\"react组件通信方式\",\"customFields\":{\"0\":[\"React\"],\"1\":[\"React\",\"组件通信\"]}},\"240\":{\"title\":\"受控组件和非受控组件\",\"header\":\"受控组件\",\"text\":[\"受控组件是指表单数据由 React 组件来管理的组件。表单元素的值被 React 的 state 所控制，React 的 state 是唯一数据源，所以 React 的 state 变化时，表单元素的值也会跟着变化。由于表单元素的值由 React 的 state 所控制，所以我们称这种组件为受控组件。\",\"简单来说，受控组件就是表单数据被 React 组件所控制的组件。数据使用State或者Redux来管理。\",\"export default function App() { const [name, setName] = useState(\\\"summer\\\"); return ( <div> <input value={name} onChange={(e) => setName(e.target.value)} /> </div> ); } \"]},\"241\":{\"title\":\"受控组件和非受控组件\",\"header\":\"非受控组件\",\"text\":[\"非受控组件是指表单数据由 DOM 元素本身来管理的组件。表单元素的值被 DOM 元素本身所控制，React 的 state 并不参与管理。由于表单元素的值由 DOM 元素本身所控制，所以我们称这种组件为非受控组件。\",\"简单来说，就是这个表单数据不受React的state控制，使用的ref从DOM中获取元素的值。\",\"export default function App() { const inputRef = useRef(null); const handleClick = () => { console.log(inputRef.current.value); }; return ( <div> <input ref={inputRef} /> <button onClick={handleClick}>获取</button> </div> ); } \"]},\"242\":{\"title\":\"受控组件和非受控组件\",\"customFields\":{\"0\":[\"React\"],\"1\":[\"React\",\"状态\"]}},\"243\":{\"title\":\"记录上次浏览的位置\",\"header\":\"场景\",\"text\":[\"Question：打开一个页面浏览后，关闭页面，再次打开页面时，能够记录上次浏览的位置。\"]},\"244\":{\"title\":\"记录上次浏览的位置\",\"header\":\"解决方案\",\"text\":[]},\"245\":{\"title\":\"记录上次浏览的位置\",\"header\":\"方案一：使用 localStorage\",\"text\":[\"利用localStorage来记录上次浏览的位置，当再次打开页面时，从localStorage中读取上次浏览的位置，然后跳转到该位置。\",\"// 读取上次浏览的位置 const lastScrollTop = localStorage.getItem(\\\"lastScrollTop\\\"); // 跳转到上次浏览的位置 window.scrollTo(0, lastScrollTop); // 监听滚动事件，记录滚动位置 window.addEventListener(\\\"scroll\\\", () => { localStorage.setItem(\\\"lastScrollTop\\\", window.scrollY); }); \",\"我们主要利用的就是window.scrollTo和window.scrollY这两个方法，window.scrollTo可以跳转到指定位置，window.scrollY可以获取当前滚动的位置(文档从顶部开始滚动的像素值)。\",\"在React中，我们可以使用useEffect来监听滚动事件，记录滚动位置。\",\"import React, { useEffect, useRef } from \\\"react\\\"; const Post = () => { const scrollRef = useRef(null); // 读取上次浏览的位置 useEffect(() => { const scrollPosition = localStorage.getItem(\\\"scrollPosition\\\"); // 跳转到上次浏览的位置 if (scrollPosition) { window.scrollTo(0, scrollPosition); } }, []); // 组件将要销毁时，监听滚动事件，记录滚动位置 useEffect(() => { return () => { localStorage.setItem(\\\"scrollPosition\\\", window.scrollY); }; }, []); return ( <div ref={scrollRef}> <h1>Post</h1> <p>Content...</p> </div> ); }; \"]},\"246\":{\"title\":\"记录上次浏览的位置\",\"header\":\"方案二：使用路由参数\",\"text\":[\"利用路由参数来记录上次浏览的位置，当再次打开页面时，从路由参数中读取上次浏览的位置，然后跳转到该位置。\",\"// 从路由中获取到上次浏览的位置 const lastScrollTop = this.$route.query.lastScrollTop; // 跳转到上次浏览的位置 window.scrollTo(0, lastScrollTop); // 监听滚动事件，记录滚动位置 window.addEventListener(\\\"scroll\\\", () => { this.$router.replace({ query: { lastScrollTop: window.scrollY, }, }); }); \",\"假如在React项目中，我们可以使用useParams来获取路由参数，然后利用useEffect来监听滚动事件，记录滚动位置。\",\"import React, { useEffect, useRef } from \\\"react\\\"; import { useParams } from \\\"react-router-dom\\\"; const Post = () => { const { id } = useParams(); const scrollRef = useRef(null); useEffect(() => { const scrollPosition = localStorage.getItem(`scrollPosition-${id}`); if (scrollPosition) { scrollRef.current.scrollTo(0, scrollPosition); } }, [id]); useEffect(() => { return () => { localStorage.setItem(`scrollPosition-${id}`, scrollRef.current.scrollTop); }; }, [id]); return ( <div ref={scrollRef}> <h1>Post {id}</h1> <p>Content...</p> </div> ); }; export default Post; \",\"代码逻辑：\",\"首先，我们使用useParams来获取路由参数id，然后使用useRef来获取div元素的引用。\",\"然后，我们使用useEffect来监听路由参数id的变化，当路由参数id发生变化时，我们就从localStorage中读取上次浏览的位置，然后跳转到该位置。\",\"最后，我们使用useEffect来监听滚动事件，当滚动事件触发时，我们就将滚动位置记录到localStorage中。\"]},\"247\":{\"title\":\"记录上次浏览的位置\",\"customFields\":{\"0\":[\"场景题\"],\"1\":[\"场景题\",\"项目\"]}},\"248\":{\"title\":\"首屏加载慢\",\"header\":\"场景\",\"text\":[\"Question：首页有很多文章数目，每篇文章都有很多内容，当用户打开首页时，会加载所有文章，导致首页加载很慢，用户体验不好。如何优化首页加载速度？\"]},\"249\":{\"title\":\"首屏加载慢\",\"header\":\"解决方案\",\"text\":[]},\"250\":{\"title\":\"首屏加载慢\",\"header\":\"方案一：分页加载\",\"text\":[\"对于数据，我们采用分批次加载的方式，每次加载一定数量的数据，当用户滚动到页面底部时，再加载下一批数据。\",\"// 当用户滚动到页面底部时，加载下一批数据 window.addEventListener(\\\"scroll\\\", () => { if (window.scrollY + window.innerHeight >= document.body.scrollHeight) { // 加载下一批数据 } }); \",\"这边我们来解释一下window.scrollY、window.innerHeight和document.body.scrollHeight这三个属性的含义：\",\"window.scrollY：文档从顶部开始滚动的像素值,就是滚动条滚动的距离。\",\"window.innerHeight：浏览器窗口的视口（viewport）高度。（100vh）\",\"document.body.scrollHeight：文档的高度。（文档的高度 = 视口高度 + 滚动条滚动的距离）\",\"我们将window.scrollY和window.innerHeight相加，就可以得到滚动条滚动到底部时，文档的高度，当这个值等于document.body.scrollHeight时，就说明滚动条滚动到底部了。\",\"我们这个其实也可以使用IntersectionObserver来实现，当用户滚动到页面底部时，加载下一批数据。\",\"const observer = new IntersectionObserver((entries) => { if (entries[0].isIntersecting) { // 加载下一批数据 } }); observer.observe(document.querySelector(\\\"#loadMore\\\")); \"]},\"251\":{\"title\":\"首屏加载慢\",\"header\":\"方案二：图片懒加载\",\"text\":[\"对于图片，我们采用懒加载的方式，当用户滚动到图片位置时，再加载图片。\",\"// 当用户滚动到图片位置时，加载图片 window.addEventListener(\\\"scroll\\\", () => { const images = document.querySelectorAll(\\\"img\\\"); images.forEach((image) => { if (image.offsetTop < window.scrollY + window.innerHeight) { // 加载图片 } }); }); \",\"在React中，我们可以借助React.lazy和Suspense来实现图片懒加载。\",\"import React, { Suspense } from \\\"react\\\"; // LazyImage组件会被动态加载 const LazyImage = React.lazy(() => import(\\\"./LazyImage\\\")); const App = () => { return ( <Suspense fallback={<div>Loading...</div>}> <LazyImage /> </Suspense> ); }; \",\"当然你也可以使用IntersectionObserver来实现图片懒加载。 IntersectionObserver是浏览器提供的一个API，可以用来监听元素是否进入可视区域。\",\"const images = document.querySelectorAll(\\\"img\\\"); // 为什么是entries，因为可能同时监听多个元素,监听到的元素会放到entries数组中 const observer = new IntersectionObserver((entries) => { entries.forEach((entry) => { if (entry.isIntersecting) { // 加载图片 } }); }); images.forEach((image) => { // 监听，图片列表中的图片，是不是进入可视区域，进入可视区域就会触发回调函数 observer.observe(image); }); \"]},\"252\":{\"title\":\"首屏加载慢\",\"header\":\"方案三：前端缓存\",\"text\":[\"对于静态资源，我们可以利用浏览器的缓存机制，将静态资源缓存到浏览器中，当用户再次访问时，直接从缓存中读取，不需要再次请求服务器。 将一些幂等性的请求数据缓存到浏览器中，当用户再次访问时，直接从缓存中读取，不需要再次请求服务器。\"]},\"253\":{\"title\":\"首屏加载慢\",\"header\":\"方案四：虚拟列表\",\"text\":[\"对于文章列表，我们可以采用虚拟列表的方式，只渲染可视区域的文章，当用户滚动时，再渲染可视区域的文章。\",\"// 当用户滚动时，渲染可视区域的文章 window.addEventListener(\\\"scroll\\\", () => { const articles = document.querySelectorAll(\\\"article\\\"); articles.forEach((article) => { // 当文章在可视区域时，渲染文章 if (article.offsetTop < window.scrollY + window.innerHeight) { // 渲染文章 } }); }); \",\"在React中，我们可以借助react-window来实现虚拟列表。\",\"import React from \\\"react\\\"; import { FixedSizeList as List } from \\\"react-window\\\"; const App = () => { return ( <List height={window.innerHeight} // 列表可视区域的高度 itemCount={1000} // 列表项的数量 itemSize={35} // 列表项的高度 width={300} // 列表可视区域的宽度 > {({ index, style }) => <div style={style}>Row {index}</div>} </List> ); }; \"]},\"254\":{\"title\":\"首屏加载慢\",\"header\":\"方案五：骨架屏\",\"text\":[\"对于文章列表，我们可以采用骨架屏的方式，先渲染骨架屏，当文章加载完成后，再渲染文章。\",\"其实我们可以设置一个loading状态，当文章加载完成后，再将loading状态设置为false，这样就可以实现骨架屏的效果。\",\"import React, { useState, useEffect } from \\\"react\\\"; const App = () => { const [loading, setLoading] = useState(true); const [articles, setArticles] = useState([]); useEffect(() => { fetchArticles().then((articles) => { setArticles(articles); setLoading(false); }); }, []); return ( <div> {loading ? ( <div>loading...</div> ) : ( <ul> {articles.map((article) => ( <li>{article.title}</li> ))} </ul> )} </div> ); }; \"]},\"255\":{\"title\":\"首屏加载慢\",\"customFields\":{\"0\":[\"场景题\"],\"1\":[\"首屏加载慢\",\"性能优化\"]}},\"256\":{\"title\":\"泛型理解\",\"header\":\"什么是泛型\",\"text\":[\"泛型就是在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。\",\"我们可以这么理解，TS的泛型使得TS,更加像一个面向对象的语言，因为我们可以在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型。\",\"而且泛型帮助我们在代码编译的时候就知道我们传入的参数类型，从而提前发现错误。\"]},\"257\":{\"title\":\"泛型理解\",\"header\":\"泛型使用方式\",\"text\":[\"泛型分类为：泛型函数、泛型接口、泛型类\"]},\"258\":{\"title\":\"泛型理解\",\"header\":\"泛型函数\",\"text\":[\"应用场景： 有时候我们定义的函数，需要传入的参数和返回的参数是一致的，这时候我们就可以使用泛型来解决这个问题。\",\"function fn<T>(arg: T): T { return arg; } \"]},\"259\":{\"title\":\"泛型理解\",\"header\":\"泛型接口\",\"text\":[\"interface IBase<T, U> { name: T; age: T; sex: U; } \"]},\"260\":{\"title\":\"泛型理解\",\"header\":\"泛型类\",\"text\":[\"class Base<T> { name: T; age: T; constructor(name: T, age: T) { this.name = name; this.age = age; } } \"]},\"261\":{\"title\":\"泛型理解\",\"header\":\"泛型约束\",\"text\":[\"泛型约束就是指定泛型的类型，这样我们就可以在函数内部使用泛型的属性和方法了。\",\"interface IBase { length: number; } function fn<T extends IBase>(arg: T): T { console.log(arg.length); return arg; } \"]},\"262\":{\"title\":\"泛型理解\",\"header\":\"泛型别名\",\"text\":[\"泛型别名就是给泛型起一个别名，这样我们就可以在别的地方使用这个别名了。\",\"type IBase<T> = { name: T; age: T; }; function fn<T>(arg: IBase<T>): IBase<T> { return arg; } \",\"泛型约束和泛型别名的区别：\",\"泛型约束：\",\"约束泛型的类型，这样我们就可以在函数内部使用泛型的属性和方法了\",\"语法：<T extends IBase>，一般需要使用extends\",\"泛型别名：\",\"给泛型起一个别名，这样我们就可以在别的地方使用这个别名了。\",\"语法：arg: IBase<T>，一般不需要使用extends\",\"泛型约束是为了更加安全的访问属性或者方法(保证了这个对象必须存在某个属性或者方法)，但是泛型别名，是为了更好的复用\"]},\"263\":{\"title\":\"泛型理解\",\"header\":\"索引类型\",\"text\":[\"索引类型是指我们可以通过索引的方式访问对象的属性，Keyof T将传入的对象的属性名联合成一个联合类型。\",\"interface IBase { name: string; age: number; } function fn<T extends keyof IBase>(arg: T): T { return arg; } \"]},\"264\":{\"title\":\"泛型理解\",\"customFields\":{\"0\":[\"TypeScript\"],\"1\":[\"泛型\"]}},\"265\":{\"title\":\"v-show vs v-if\",\"header\":\"相同点\",\"text\":[\"都能够达到控制元素显示隐藏的效果\",\"<template> <div> <div v-show=\\\"isShow\\\">v-show</div> <div v-if=\\\"isShow\\\">v-if</div> </div> </template> \"]},\"266\":{\"title\":\"v-show vs v-if\",\"header\":\"不同点\",\"text\":[\"但是他们达到效果的方式不同\"]},\"267\":{\"title\":\"v-show vs v-if\",\"header\":\"方式\",\"text\":[\"v-show 是通过控制元素的 display 属性来实现的\",\"假如 isShow 为 false，那么 v-show 会将元素的 display 属性设置为 none\",\"假如isShow 为 true，那么 v-show 会将元素的 display 属性设置为 block\",\"v-if 是通过控制元素的 DOM 结构来实现的\",\"假如 isShow 为 false，那么 v-if 会将元素从 DOM 结构中移除\",\"假如 isShow 为 true，那么 v-if 会将元素添加到 DOM 结构中\",\"同样的当DOM结构中的元素被移除后，那么该元素的事件监听器也会被移除\"]},\"268\":{\"title\":\"v-show vs v-if\",\"header\":\"编译过程\",\"text\":[\"v-show: 在编译过程中，会在元素上添加一个 style 属性，用来控制元素的 display 属性,只涉及CSS的变化，不会涉及到DOM结构的变化\",\"v-if：在编译过程中，会在元素上添加一个 ifConditions 属性，用来控制元素的 DOM 结构，涉及到DOM结构的变化\"]},\"269\":{\"title\":\"v-show vs v-if\",\"header\":\"触发生命周期\",\"text\":[\"v-show: 不会触发任何生命周期，因为只涉及到CSS的变化，不会涉及到DOM结构的变化\",\"v-if: 会触发元素的生命周期，因为涉及到DOM结构的变化 \",\"当isShow从false变为true时，会触发元素的beforeCreate、created、beforeMount、mounted生命周期\",\"当isShow从true变为false时，会触发元素的beforeUnmount、unmounted生命周期\"]},\"270\":{\"title\":\"v-show vs v-if\",\"header\":\"性能\",\"text\":[\"v-show: 由于只涉及到CSS的变化，所以性能比较好\",\"v-if: 由于涉及到DOM结构的变化，所以性能比较差\"]},\"271\":{\"title\":\"v-show vs v-if\",\"customFields\":{\"0\":[\"Vue\"],\"1\":[\"v-show\",\"v-if\"]}},\"272\":{\"title\":\"生命周期\",\"header\":\"Vue2\",\"text\":[\"生命周期包括：创建前后，挂载前后，更新前后，销毁前后\"]},\"273\":{\"title\":\"生命周期\",\"header\":\"创建前后\",\"text\":[\"beforeCreate: 在实例初始化之后，数据观测和事件配置之前被调用 \",\"在这个阶段，实例的属性和方法的运算都不能访问到data、props、computed、watch上的数据和方法，因为这些数据和方法都还没有初始化\",\"一般我们会进行一些全局的配置，例如Vue-router、Vuex、axios等\",\"Created: 在实例创建完成后被立即调用 \",\"在这个阶段已经完成init Option的初始化，此时我们可以访问到data、props、computed、watch上的数据和方法，建议在这个时候进行一些 fetch 数据操作\",\"在这个阶段，不能进行DOM操作，因为还没有进行模板编译(compile)，所以DOM还没有挂载，如果需要进行DOM操作，可以在mounted中进行\"]},\"274\":{\"title\":\"生命周期\",\"header\":\"挂载前后\",\"text\":[\"beforeMount: 在挂载开始之前被调用，相关的render函数首次被调用\",\"mounted: 在挂载完成后被调用，此时DOM节点已经生成，$el属性可以访问 \",\"在这个钩子里，我们可以进行一些DOM操作，例如获取DOM、操作DOM、获取DOM的尺寸等，但是这些操作最好放在nextTick中，因为这个时候DOM并不是一定渲染完成了，所以如果直接操作DOM，可能会出现问题\"]},\"275\":{\"title\":\"生命周期\",\"header\":\"更新前后\",\"text\":[\"beforeUpdate: 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在这个钩子中进一步地更改状态，不会触发附加的重渲染过程\",\"updated: 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后被调用，调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作，但是注意不要在这个钩子函数中操作数据，这可能会导致无限循环的更新，如果需要修改数据，可以使用watch监听数据的变化，然后在watch中修改数据\"]},\"276\":{\"title\":\"生命周期\",\"header\":\"销毁前后\",\"text\":[\"beforeDestroy: 在实例销毁之前调用，实例仍然完全可用\",\"destroyed: 在实例销毁之后调用，调用后，所有的事件监听器会被移除，所有的子实例也会被销毁\"]},\"277\":{\"title\":\"生命周期\",\"header\":\"其他\",\"text\":[\"activated: 在组件章节被激活时调用，这里的激活指的是keep-alive中组件被激活时调用\",\"devtivated: 在组件章节被移除时调用，这里的移除指的是keep-alive中组件被移除时调用\",\"errorCaptured: 当捕获一个来自子孙组件的错误时被调用，此时，错误可以被阻止向上传播\"]},\"278\":{\"title\":\"生命周期\",\"header\":\"Vue3\",\"text\":[\"生命周期其实并没有特别大的变化\"]},\"279\":{\"title\":\"生命周期\",\"header\":\"创建前后\",\"text\":[\"setup: 在组件实例创建之后，但是在组件实例创建之前被调用，此时，props和context都已经解析完成，但是setup中的props属性是reactive的，而不是ref的，所以不能直接使用props，而是需要使用toRefs将其转换为ref的形式 \",\"我们可以认为setup是beforeCreate和created的结合体\"]},\"280\":{\"title\":\"生命周期\",\"header\":\"挂载前后\",\"text\":[\"onBeforeMount: 在挂载开始之前被调用，相关的render函数首次被调用\",\"mounted: 在挂载完成后被调用，此时DOM节点已经生成，$el属性可以访问\"]},\"281\":{\"title\":\"生命周期\",\"header\":\"更新前后\",\"text\":[\"onBeforeUpdate: 在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在这个钩子中进一步地更改状态，不会触发附加的重渲染过程\",\"updated: 在由于数据更改导致的虚拟DOM重新渲染和打补丁之后被调用，调用时，组件 DOM 已经更新，所以可以执行依赖于 DOM 的操作，但是注意不要在这个钩子函数中操作数据，这可能会导致无限循环的更新，如果需要修改数据，可以使用watch监听数据的变化，然后在watch中修改数据\"]},\"282\":{\"title\":\"生命周期\",\"header\":\"销毁前后\",\"text\":[\"onBeforeUnmount: 在实例销毁之前调用，实例仍然完全可用\",\"unmounted: 在实例销毁之后调用，调用后，所有的事件监听器会被移除，所有的子实例也会被销毁\"]},\"283\":{\"title\":\"生命周期\",\"header\":\"其他\",\"text\":[\"onActivated: 在组件章节被激活时调用，这里的激活指的是keep-alive中组件被激活时调用\",\"deactivated: 在组件章节被移除时调用，这里的移除指的是keep-alive中组件被移除时调用\",\"这边附上 vue 的生命周期图\",\"vue生命周期图\"]},\"284\":{\"title\":\"生命周期\",\"header\":\"引申 1： keep-alive 的是什么？\",\"text\":[\"定义：keep-alive是Vue内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染，keep-alive包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们，可以通过include和exclude属性来指定缓存哪些组件，哪些组件不缓存，keep-alive是惰性的，只有在组件切换时才会触发activated和deactivated这两个生命周期钩子函数\",\"例子：\",\"keep-alive可以接受三个属性(只能三选一)：\",\"include: 字符串或正则表达式，只有匹配的组件会被缓存\",\"exclude: 字符串或正则表达式，任何匹配的组件都不会被缓存\",\"is: 字符串,如果组件的名字和is匹配，那么这个组件会被缓存\"]},\"285\":{\"title\":\"生命周期\",\"header\":\"引申 2：当父组件发生更新，那么子组件的生命周期会发生怎么样的变化？\",\"text\":[\"假如父组件的状态更新，但是子组件的状态并没有更新，那么子组件的生命周期同样也会发生更新，子组件只会调用onBeforeUpdate和updated和render()这两个生命周期函数和render函数\",\"但是如果父组件的状态更新，子组件的状态也更新了，那么子组件会调用上面三个函数，然后继续调用这三个函数，直到子组件的状态不再发生变化，这时，子组件的生命周期就会停止更新\"]},\"286\":{\"title\":\"生命周期\",\"header\":\"引申 3： keep-alive 是否类似于 React 中的 memo ？\",\"text\":[\"相同点：\",\"keep-alive和memo都是用来优化性能的，都是用来缓存组件的\",\"不同点：\",\"keep-alive是将组件缓存起来，当组件被激活时，才会重新渲染组件\",\"而memo是将组件的props缓存起来，当props发生变化时，才会重新渲染组件\"]},\"287\":{\"title\":\"生命周期\",\"header\":\"引申 4： keep-alive 下的组件生命周期\",\"text\":[\"被keep-alive组件包裹的组件，他们的生命周期函数会增加两个activated和deactivated，这两个生命周期函数只有在组件被激活时才会被调用。\"]},\"288\":{\"title\":\"生命周期\",\"header\":\"第一次渲染\",\"text\":[\"组件的create和mounted生命周期函数会被正常调用\"]},\"289\":{\"title\":\"生命周期\",\"header\":\"组件被激活\",\"text\":[\"组件的activated生命周期函数会被调用，在这个生命周期中我们可以重新激活组件，比如重新发送请求，重新获取数据等等\"]},\"290\":{\"title\":\"生命周期\",\"header\":\"组件被移除\",\"text\":[\"组件的deactivated生命周期函数会被调用，在这个生命周期中我们可以将组件的状态保存起来，比如保存组件的滚动位置，停止定时器等等\"]},\"291\":{\"title\":\"生命周期\",\"header\":\"组件被销毁\",\"text\":[\"组件的unmounted和beforeUnmount生命周期函数会被正常调用\"]},\"292\":{\"title\":\"生命周期\",\"text\":[\"其实Vue2和Vue3的生命周期并没有太大的区别，除了将beforeCreated和created合并为setUp\"],\"customFields\":{\"0\":[\"Vue\"],\"1\":[\"生命周期\"]}},\"293\":{\"title\":\"ACM模式-Javascript\",\"header\":\"ACM 模式获取输入\",\"text\":[]},\"294\":{\"title\":\"ACM模式-Javascript\",\"header\":\"单行输入\",\"text\":[\"输入只有一行，包含两个整数 n 和 m，用空格隔开。\",\"输入示例\",\"3 4 \",\"现在我需要获取这两个整数，用两个变量表示\"]},\"295\":{\"title\":\"ACM模式-Javascript\",\"header\":\"多行输入\",\"text\":[\"输入有 m+1 行，第一行包含一个整数 n，表示接下来有 m 行，每行有一个整数。\",\"输入示例\",\"3 1 2 3 \",\"现在我需要获取所有的输入，用一个数组表示\",\"由上面两个例子,我们可以总结出来：\",\"每次想要获取一行输入的时候，都需要使用 readline() 方法,这个方法会返回一个字符串，如果没有输入，那么返回的是null\",\"获取多行输入的时候，都是使用while(line = readline())循环，每次循环都会获取一行输入，直到获取到所有的输入\"]},\"296\":{\"title\":\"ACM模式-Javascript\",\"header\":\"输入多组数据\",\"text\":[\"输入 k+1 行数据，第一行包含一个整数 n，表示接下来有 m 行，每行有两个整数。\",\"输入示例\",\"4 1 2 3 4 5 6 7 8 \",\"现在我需要获取所有的输入，每一行用一个数组表示，所有的行用一个数组表示\",\"意外发现：\\n我在牛客 ACM 模式下进行测试的时候，如果使用Javascript V8，打印一个数组([[1,2],[3,4]])的时候，打印出来的是1,2,3,4，而不是[[1,2],[3,4]]，但是在Javascript Node下打印的是[[1,2],[3,4]]。很奇怪，但是如果你是要arr.length的时候，他出来的长度是正确的。\"]},\"297\":{\"title\":\"ACM模式-Javascript\",\"text\":[\"和普通力扣的区别：\",\"力扣都会直接将参数传入函数中，而 ACM 模式则是通过输入输出的方式来获取参数和返回结果\",\"力扣的函数都是必须要return的，而 ACM 模式则是直接输出结果print或者console.log()即可\"],\"customFields\":{\"0\":[\"笔试\"],\"1\":[\"ACM模式\"]}}},\"dirtCount\":0,\"index\":[[\"力扣的函数都是必须要return的\",{\"3\":{\"297\":1}}],[\"力扣都会直接将参数传入函数中\",{\"3\":{\"297\":1}}],[\"很奇怪\",{\"3\":{\"296\":1}}],[\"打印出来的是1\",{\"3\":{\"296\":1}}],[\"打印一个数组\",{\"3\":{\"296\":1}}],[\"打开一个页面浏览后\",{\"3\":{\"243\":1}}],[\"循环\",{\"3\":{\"295\":1}}],[\"循环引用\",{\"3\":{\"1\":1}}],[\"行数据\",{\"3\":{\"296\":1}}],[\"行\",{\"3\":{\"295\":2,\"296\":1}}],[\"输入\",{\"3\":{\"296\":1}}],[\"输入多组数据\",{\"0\":{\"296\":1},\"2\":{\"296\":1}}],[\"输入有\",{\"3\":{\"295\":1}}],[\"输入示例\",{\"3\":{\"294\":1,\"295\":1,\"296\":1}}],[\"输入只有一行\",{\"3\":{\"294\":1}}],[\"输出8\",{\"3\":{\"156\":1}}],[\"输出7\",{\"3\":{\"156\":1}}],[\"输出6\",{\"3\":{\"156\":2}}],[\"输出5\",{\"3\":{\"156\":3}}],[\"输出3\",{\"3\":{\"156\":3}}],[\"输出2\",{\"3\":{\"156\":3}}],[\"输出4\",{\"3\":{\"156\":3}}],[\"输出1\",{\"3\":{\"156\":3}}],[\"输出settimeout\",{\"3\":{\"156\":1}}],[\"输出script\",{\"3\":{\"156\":2}}],[\"输出promise1\",{\"3\":{\"156\":1}}],[\"单行输入\",{\"0\":{\"294\":1},\"2\":{\"294\":1}}],[\"单位\",{\"0\":{\"26\":1},\"2\":{\"26\":1}}],[\"单位是秒\",{\"3\":{\"7\":1}}],[\"除了将beforecreated和created合并为setup\",{\"3\":{\"292\":1}}],[\"停止定时器等等\",{\"3\":{\"290\":1}}],[\"被keep\",{\"3\":{\"287\":1}}],[\"被赋值为\",{\"3\":{\"3\":1}}],[\"哪些组件不缓存\",{\"3\":{\"284\":1}}],[\"或避免重新渲染\",{\"3\":{\"284\":1}}],[\"或者给自定义方法绑定this\",{\"3\":{\"223\":1,\"227\":1}}],[\"或者当一个对象没有赋值的属性时\",{\"3\":{\"147\":1}}],[\"或者在字符串中嵌入变量\",{\"3\":{\"60\":1}}],[\"操作dom\",{\"3\":{\"274\":1}}],[\"操作方法我们也是从crud\",{\"3\":{\"125\":1}}],[\"操作方法我们可以从crud\",{\"3\":{\"116\":1}}],[\"操作方法\",{\"0\":{\"116\":1,\"125\":1},\"2\":{\"116\":1,\"125\":1}}],[\"建议在这个时候进行一些\",{\"3\":{\"273\":1}}],[\"建立连接\",{\"3\":{\"187\":1}}],[\"销毁前后\",{\"0\":{\"276\":1,\"282\":1},\"2\":{\"276\":1,\"282\":1},\"3\":{\"272\":1}}],[\"性能\",{\"0\":{\"270\":1},\"2\":{\"270\":1}}],[\"触发生命周期\",{\"0\":{\"269\":1},\"2\":{\"269\":1}}],[\"涉及到dom结构的变化\",{\"3\":{\"268\":1}}],[\"编译过程\",{\"0\":{\"268\":1},\"2\":{\"268\":1}}],[\"为\",{\"3\":{\"267\":4}}],[\"为什么是entries\",{\"3\":{\"251\":1}}],[\"为什么在\",{\"3\":{\"202\":1}}],[\"为什么结果输出为\",{\"3\":{\"160\":1}}],[\"为什么会有\",{\"0\":{\"36\":1},\"2\":{\"36\":1}}],[\"为什么会导致内存泄漏\",{\"0\":{\"1\":1},\"2\":{\"1\":1}}],[\"为什么不是直接使用settimeout来延迟函数的执行呢\",{\"3\":{\"4\":1}}],[\"为什么要使用闭包来延迟函数的执行呢\",{\"3\":{\"4\":1}}],[\"索引类型是指我们可以通过索引的方式访问对象的属性\",{\"3\":{\"263\":1}}],[\"索引类型\",{\"0\":{\"263\":1},\"2\":{\"263\":1}}],[\"保证了这个对象必须存在某个属性或者方法\",{\"3\":{\"262\":1}}],[\"给泛型起一个别名\",{\"3\":{\"262\":1}}],[\"约束泛型的类型\",{\"3\":{\"262\":1}}],[\"更加像一个面向对象的语言\",{\"3\":{\"256\":1}}],[\"更新前后\",{\"0\":{\"275\":1,\"281\":1},\"2\":{\"275\":1,\"281\":1},\"3\":{\"272\":1}}],[\"更新阶段\",{\"0\":{\"224\":1,\"228\":1},\"2\":{\"224\":1,\"228\":1}}],[\"更新信息\",{\"3\":{\"220\":1}}],[\"更新一次当前时间\",{\"3\":{\"218\":1}}],[\"更新\",{\"3\":{\"218\":1,\"220\":1}}],[\"泛型别名就是给泛型起一个别名\",{\"3\":{\"262\":1}}],[\"泛型别名\",{\"0\":{\"262\":1},\"2\":{\"262\":1},\"3\":{\"262\":1}}],[\"泛型约束是为了更加安全的访问属性或者方法\",{\"3\":{\"262\":1}}],[\"泛型约束和泛型别名的区别\",{\"3\":{\"262\":1}}],[\"泛型约束就是指定泛型的类型\",{\"3\":{\"261\":1}}],[\"泛型约束\",{\"0\":{\"261\":1},\"2\":{\"261\":1},\"3\":{\"262\":1}}],[\"泛型类\",{\"0\":{\"260\":1},\"2\":{\"260\":1},\"3\":{\"257\":1}}],[\"泛型接口\",{\"0\":{\"259\":1},\"2\":{\"259\":1},\"3\":{\"257\":1}}],[\"泛型函数\",{\"0\":{\"258\":1},\"2\":{\"258\":1},\"3\":{\"257\":1}}],[\"泛型分类为\",{\"3\":{\"257\":1}}],[\"泛型使用方式\",{\"0\":{\"257\":1},\"2\":{\"257\":1}}],[\"泛型就是在定义函数\",{\"3\":{\"256\":1}}],[\"泛型理解\",{\"1\":{\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":1}}],[\"先渲染骨架屏\",{\"3\":{\"254\":1}}],[\"先挂载\",{\"3\":{\"196\":1}}],[\"骨架屏\",{\"0\":{\"254\":1},\"2\":{\"254\":1}}],[\"虚拟列表\",{\"0\":{\"253\":1},\"2\":{\"253\":1}}],[\"前端缓存\",{\"0\":{\"252\":1},\"2\":{\"252\":1}}],[\"前一个任务执行完毕\",{\"3\":{\"153\":1}}],[\"监听\",{\"3\":{\"251\":1}}],[\"监听到的元素会放到entries数组中\",{\"3\":{\"251\":1}}],[\"监听滚动事件\",{\"3\":{\"245\":2,\"246\":1}}],[\"图片列表中的图片\",{\"3\":{\"251\":1}}],[\"图片懒加载\",{\"0\":{\"251\":1},\"2\":{\"251\":1}}],[\"图片优化\",{\"3\":{\"41\":1}}],[\"滚动条滚动的距离\",{\"3\":{\"250\":1}}],[\"视口高度\",{\"3\":{\"250\":1}}],[\"视窗高度和视窗宽度\",{\"3\":{\"26\":1}}],[\"利用路由参数来记录上次浏览的位置\",{\"3\":{\"246\":1}}],[\"利用localstorage来记录上次浏览的位置\",{\"3\":{\"245\":1}}],[\"文档的高度\",{\"3\":{\"250\":3}}],[\"文档从顶部开始滚动的像素值\",{\"3\":{\"245\":1,\"250\":1}}],[\"文本或者是节点\",{\"3\":{\"233\":1}}],[\"文本装饰\",{\"3\":{\"24\":1}}],[\"文本对齐方式\",{\"3\":{\"24\":1}}],[\"文本颜色\",{\"3\":{\"24\":1}}],[\"文本类\",{\"3\":{\"24\":2}}],[\"跳转到上次浏览的位置\",{\"3\":{\"245\":2,\"246\":1}}],[\"读取上次浏览的位置\",{\"3\":{\"245\":2}}],[\"方式\",{\"0\":{\"267\":1},\"2\":{\"267\":1}}],[\"方案五\",{\"0\":{\"254\":1},\"2\":{\"254\":1}}],[\"方案四\",{\"0\":{\"253\":1},\"2\":{\"253\":1}}],[\"方案三\",{\"0\":{\"252\":1},\"2\":{\"252\":1}}],[\"方案二\",{\"0\":{\"246\":1,\"251\":1},\"2\":{\"246\":1,\"251\":1}}],[\"方案一\",{\"0\":{\"245\":1,\"250\":1},\"2\":{\"245\":1,\"250\":1}}],[\"方法返回的promise对象就会变为resolved状态\",{\"3\":{\"77\":1}}],[\"方法返回的promise对象就会变为rejected状态\",{\"3\":{\"77\":2}}],[\"方法返回的promise对象才会变为resolved状态\",{\"3\":{\"77\":1}}],[\"方法\",{\"3\":{\"28\":1,\"69\":1,\"70\":1,\"74\":1,\"77\":2,\"80\":2,\"119\":1,\"134\":1,\"295\":1}}],[\"能够记录上次浏览的位置\",{\"3\":{\"243\":1}}],[\"关闭页面\",{\"3\":{\"243\":1}}],[\"关于扩展运算符和解构赋值\",{\"3\":{\"65\":1}}],[\"非受控组件是指表单数据由\",{\"3\":{\"241\":1}}],[\"非受控组件\",{\"0\":{\"241\":1},\"2\":{\"241\":1}}],[\"变化时\",{\"3\":{\"240\":1}}],[\"变量使用$\",{\"3\":{\"126\":1}}],[\"变量的值就等于undefined\",{\"3\":{\"62\":1}}],[\"变量的值就等于\",{\"3\":{\"62\":1}}],[\"变量提升就是在代码执行之前\",{\"3\":{\"56\":1}}],[\"变量提升\",{\"0\":{\"56\":1},\"2\":{\"56\":1}}],[\"受控组件就是表单数据被\",{\"3\":{\"240\":1}}],[\"受控组件是指表单数据由\",{\"3\":{\"240\":1}}],[\"受控组件和非受控组件\",{\"1\":{\"240\":1,\"241\":1,\"242\":1}}],[\"受控组件\",{\"0\":{\"240\":1},\"2\":{\"240\":1}}],[\"任何匹配的组件都不会被缓存\",{\"3\":{\"284\":1}}],[\"任意组件通信\",{\"0\":{\"238\":1},\"2\":{\"238\":1},\"3\":{\"237\":1}}],[\"任务阶段\",{\"3\":{\"203\":1}}],[\"任务优先级\",{\"3\":{\"203\":1}}],[\"任务队列中的任务分为两种\",{\"3\":{\"153\":1}}],[\"任务队列\",{\"0\":{\"153\":1},\"2\":{\"153\":1}}],[\"提供的一种跨组件传递参数的方式\",{\"3\":{\"237\":1}}],[\"提前缓存\",{\"3\":{\"43\":1}}],[\"提前加载\",{\"3\":{\"43\":1}}],[\"要想实现跨级的组件通信\",{\"3\":{\"236\":1}}],[\"要先进行三次握手\",{\"3\":{\"187\":1}}],[\"跨级组件通信\",{\"0\":{\"236\":1},\"2\":{\"236\":1}}],[\"跨域\",{\"0\":{\"14\":1,\"15\":1},\"2\":{\"14\":1,\"15\":1}}],[\"跨域是指浏览器不能执行其他网站的脚本\",{\"3\":{\"11\":1}}],[\"跨域问腿\",{\"1\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1}}],[\"兄弟组件需要用到的参数\",{\"3\":{\"235\":1}}],[\"兄弟组件是无法通信的\",{\"3\":{\"235\":1}}],[\"兄弟组件通信\",{\"0\":{\"235\":1},\"2\":{\"235\":1},\"3\":{\"235\":1}}],[\"兄弟选择器\",{\"3\":{\"22\":2}}],[\"响应事件\",{\"3\":{\"234\":1}}],[\"响应式布局\",{\"3\":{\"41\":1}}],[\"正如上面所说的\",{\"3\":{\"236\":1}}],[\"正确\",{\"3\":{\"234\":1}}],[\"正常浏览器会存在垃圾回收机制\",{\"3\":{\"1\":1}}],[\"错误可以被阻止向上传播\",{\"3\":{\"277\":1}}],[\"错误\",{\"3\":{\"234\":1}}],[\"应该是直接传递的\",{\"3\":{\"234\":1}}],[\"应用层将数据交给传输层\",{\"3\":{\"181\":1}}],[\"应用层是工作在操作系统的用户态\",{\"3\":{\"178\":1}}],[\"应用层是网络应用程序及它们的应用层协议存留的地方\",{\"3\":{\"178\":1}}],[\"应用层不关心数据传输的细节\",{\"3\":{\"178\":1}}],[\"应用层\",{\"0\":{\"178\":1},\"2\":{\"178\":1}}],[\"应用场景\",{\"0\":{\"33\":1},\"2\":{\"33\":1},\"3\":{\"65\":1,\"258\":1}}],[\"了\",{\"3\":{\"234\":1}}],[\"父传子\",{\"0\":{\"233\":1},\"2\":{\"233\":1}}],[\"父子组件通信\",{\"0\":{\"232\":1},\"2\":{\"232\":1},\"3\":{\"234\":1}}],[\"父组件的状态会非常多以及组件的层级会非常深\",{\"3\":{\"236\":1}}],[\"父组件\",{\"3\":{\"233\":1,\"234\":1,\"235\":1}}],[\"父组件传递给子组件\",{\"3\":{\"224\":1}}],[\"父组件被重新渲染\",{\"3\":{\"224\":1}}],[\"父组件中有一个子组件\",{\"3\":{\"214\":1}}],[\"父组件中有一个状态对象\",{\"3\":{\"214\":1}}],[\"次<\",{\"3\":{\"230\":1}}],[\"必须要有一个条件限制\",{\"3\":{\"228\":1}}],[\"则不会更新组件的状态对象\",{\"3\":{\"227\":1}}],[\"则将子节点入队\",{\"3\":{\"90\":1,\"98\":1}}],[\"取消网络请求\",{\"3\":{\"225\":1,\"229\":1}}],[\"取出队列中的第一个数据\",{\"3\":{\"98\":1}}],[\"清除组件中的缓存等\",{\"3\":{\"225\":1,\"229\":1}}],[\"清除定时器\",{\"3\":{\"225\":1,\"229\":1}}],[\"清除浮动\",{\"3\":{\"33\":1}}],[\"特性\",{\"3\":{\"224\":1}}],[\"特点\",{\"3\":{\"59\":1,\"218\":1}}],[\"渲染文章\",{\"3\":{\"253\":2}}],[\"渲染可视区域的文章\",{\"3\":{\"253\":1}}],[\"渲染函数\",{\"3\":{\"223\":1,\"227\":1}}],[\"渲染阻塞会阻塞dom树的构建\",{\"3\":{\"35\":1}}],[\"渲染阻塞\",{\"0\":{\"35\":1,\"36\":1,\"37\":1},\"2\":{\"35\":1,\"36\":1,\"37\":1}}],[\"版本之前的生命周期\",{\"0\":{\"222\":1},\"2\":{\"222\":1}}],[\"版本之后的生命周期\",{\"0\":{\"226\":1},\"2\":{\"226\":1}}],[\"版本之后\",{\"3\":{\"220\":1}}],[\"推出了fiber架构\",{\"3\":{\"220\":1}}],[\"安排任务的调度\",{\"3\":{\"220\":1}}],[\"卸载阶段\",{\"0\":{\"225\":1,\"229\":1},\"2\":{\"225\":1,\"229\":1}}],[\"卸载\",{\"3\":{\"220\":1}}],[\"挂载前后\",{\"0\":{\"274\":1,\"280\":1},\"2\":{\"274\":1,\"280\":1},\"3\":{\"272\":1}}],[\"挂载阶段\",{\"0\":{\"223\":1,\"227\":1},\"2\":{\"223\":1,\"227\":1}}],[\"挂载\",{\"3\":{\"220\":1}}],[\"生命周期其实并没有特别大的变化\",{\"3\":{\"278\":1}}],[\"生命周期包括\",{\"3\":{\"272\":1}}],[\"生命周期\",{\"1\":{\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1}}],[\"生命周期函数都是react\",{\"3\":{\"230\":1}}],[\"生命周期的分类\",{\"0\":{\"221\":1},\"2\":{\"221\":1}}],[\"生命周期分为三个状态\",{\"3\":{\"220\":1}}],[\"生命周期是组件从实例化到销毁的过程\",{\"3\":{\"220\":1}}],[\"生效则返回\",{\"3\":{\"9\":1}}],[\"生效则直接使用缓存\",{\"3\":{\"9\":1}}],[\"确实可以获取到\",{\"3\":{\"218\":1}}],[\"确认\",{\"3\":{\"160\":1}}],[\"开始计时\",{\"3\":{\"218\":1}}],[\"开始执行宏任务队列中的任务\",{\"3\":{\"156\":5}}],[\"开始执行微任务队列中的任务\",{\"3\":{\"156\":3}}],[\"李四\",{\"3\":{\"216\":1,\"217\":1}}],[\"计算double\",{\"3\":{\"216\":1}}],[\"之间组件通信的方式有哪些\",{\"3\":{\"214\":1}}],[\"之类的\",{\"3\":{\"15\":1}}],[\"之类弱引用的数据结构\",{\"3\":{\"2\":1}}],[\"组件被销毁\",{\"0\":{\"291\":1},\"2\":{\"291\":1}}],[\"组件被移除\",{\"0\":{\"290\":1},\"2\":{\"290\":1}}],[\"组件被激活\",{\"0\":{\"289\":1},\"2\":{\"289\":1}}],[\"组件的unmounted和beforeunmount生命周期函数会被正常调用\",{\"3\":{\"291\":1}}],[\"组件的deactivated生命周期函数会被调用\",{\"3\":{\"290\":1}}],[\"组件的activated生命周期函数会被调用\",{\"3\":{\"289\":1}}],[\"组件的create和mounted生命周期函数会被正常调用\",{\"3\":{\"288\":1}}],[\"组件的生命周期分为三个阶段\",{\"3\":{\"220\":1}}],[\"组件\",{\"3\":{\"275\":1,\"281\":1}}],[\"组件将要销毁时\",{\"3\":{\"245\":1}}],[\"组件所控制的组件\",{\"3\":{\"240\":1}}],[\"组件来管理的组件\",{\"3\":{\"240\":1}}],[\"组件来获取参数\",{\"3\":{\"237\":1}}],[\"组件包裹需要传递参数的组件\",{\"3\":{\"237\":1}}],[\"组件挂载完成\",{\"3\":{\"230\":1}}],[\"组件已经被更新之后执行\",{\"3\":{\"224\":1,\"228\":1}}],[\"组件已经被挂载到页面上之后执行\",{\"3\":{\"223\":1}}],[\"组件是否要被更新\",{\"3\":{\"224\":1,\"228\":1}}],[\"组件即将接收到新的props之前执行\",{\"3\":{\"224\":1}}],[\"组件即将被卸载\",{\"3\":{\"230\":1}}],[\"组件即将被卸载之前执行\",{\"3\":{\"213\":1,\"225\":1,\"229\":1}}],[\"组件即将被更新之前执行\",{\"3\":{\"224\":1}}],[\"组件即将被挂载到页面上之前执行\",{\"3\":{\"223\":1}}],[\"组件通信方式\",{\"3\":{\"214\":1}}],[\"组件初始化渲染之后执行\",{\"3\":{\"213\":1}}],[\"组合继承\",{\"3\":{\"174\":1}}],[\"种类\",{\"0\":{\"211\":1},\"2\":{\"211\":1}}],[\"越先执行\",{\"3\":{\"203\":1}}],[\"|\",{\"3\":{\"203\":7}}],[\"导致首页加载很慢\",{\"3\":{\"248\":1}}],[\"导致无限循环\",{\"3\":{\"234\":1}}],[\"导致页面卡顿的问题\",{\"3\":{\"220\":1}}],[\"导致垃圾回收机制无法回收\",{\"3\":{\"1\":1}}],[\"导入的函数\",{\"3\":{\"202\":1}}],[\"需要传入的参数和返回的参数是一致的\",{\"3\":{\"258\":1}}],[\"需要特别注意\",{\"3\":{\"214\":1}}],[\"需要引入\",{\"3\":{\"202\":2}}],[\"需要对列表的每一项都能进行一些相同的事件\",{\"3\":{\"163\":1}}],[\"需要对传入的参数进行判断\",{\"3\":{\"85\":1}}],[\"语法\",{\"3\":{\"262\":2}}],[\"语法时\",{\"3\":{\"202\":2}}],[\"语法改进\",{\"3\":{\"40\":1}}],[\"老版本中\",{\"3\":{\"202\":1}}],[\"值为\",{\"3\":{\"201\":1}}],[\"值为5\",{\"3\":{\"4\":1}}],[\"举一个例子\",{\"3\":{\"200\":1}}],[\"举例\",{\"3\":{\"163\":1}}],[\"系统加载\",{\"1\":{\"194\":1,\"195\":1,\"196\":1,\"197\":1}}],[\"交换机的端口因为无法获取到mac地址\",{\"3\":{\"191\":1}}],[\"交换机\",{\"0\":{\"191\":1},\"2\":{\"191\":1}}],[\"帧里面包含了mac头部和ip头部\",{\"3\":{\"189\":1}}],[\"询问目的主机的mac地址\",{\"3\":{\"189\":1}}],[\"发生在虚拟dom重新渲染和打补丁之前\",{\"3\":{\"275\":1,\"281\":1}}],[\"发生了什么\",{\"1\":{\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"发送到路由器上\",{\"3\":{\"190\":1}}],[\"发送方的mac在网卡生产的时候就已经固定了\",{\"3\":{\"189\":1}}],[\"双方建立好连接以后\",{\"3\":{\"187\":1}}],[\"双重非运算符\",{\"3\":{\"104\":1}}],[\"向dns发送请求采用的是迭代查询\",{\"3\":{\"186\":1}}],[\"锚点等信息\",{\"3\":{\"185\":1}}],[\"查询字符串\",{\"3\":{\"185\":1}}],[\"查找路由表\",{\"3\":{\"192\":1}}],[\"查找字符串中是否包含searchvalue\",{\"3\":{\"129\":2}}],[\"查找元素\",{\"0\":{\"120\":1,\"129\":1},\"2\":{\"120\":1,\"129\":1}}],[\"路径\",{\"3\":{\"185\":1}}],[\"路由器会根据ip头部的目的ip地址\",{\"3\":{\"192\":1}}],[\"路由器\",{\"0\":{\"192\":1},\"2\":{\"192\":1}}],[\"路由器寻址工作中\",{\"3\":{\"181\":1}}],[\"路由更像在操作方向盘\",{\"3\":{\"181\":1}}],[\"路由则是根据\",{\"3\":{\"181\":1}}],[\"获取多行输入的时候\",{\"3\":{\"295\":1}}],[\"获取dom的尺寸等\",{\"3\":{\"274\":1}}],[\"获取到真实的\",{\"3\":{\"224\":1}}],[\"获取不到的\",{\"3\":{\"218\":1}}],[\"获取input输入内容\",{\"3\":{\"218\":1}}],[\"获取协议\",{\"3\":{\"185\":1}}],[\"获取数组的部分元素\",{\"3\":{\"65\":1}}],[\"键入网址到页面显示\",{\"1\":{\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"物理层是整个网络模型的最底层\",{\"3\":{\"183\":1}}],[\"物理层\",{\"0\":{\"183\":1},\"2\":{\"183\":1}}],[\"链路层是网络层的下一层\",{\"3\":{\"182\":1}}],[\"链路层\",{\"0\":{\"182\":1},\"2\":{\"182\":1}}],[\"寻址更像在导航\",{\"3\":{\"181\":1}}],[\"下的组件生命周期\",{\"2\":{\"287\":1}}],[\"下一个目的地\",{\"3\":{\"181\":1}}],[\"下面给出一些例子\",{\"3\":{\"137\":1}}],[\"找到后进而把数据包转发给对应的网络内\",{\"3\":{\"181\":1}}],[\"两个主机并不是直接通过一条链路相连的\",{\"3\":{\"181\":1}}],[\"选择路径\",{\"3\":{\"181\":1}}],[\"选择不同的路由\",{\"3\":{\"181\":1}}],[\"选择器+属性选择器\",{\"3\":{\"23\":1}}],[\"选择器\",{\"0\":{\"22\":1},\"2\":{\"22\":1},\"3\":{\"22\":1,\"23\":2}}],[\"网络包经过交换机转发到路由器上\",{\"3\":{\"192\":1}}],[\"网络层使用协议\",{\"3\":{\"181\":1}}],[\"网络层\",{\"0\":{\"181\":1},\"2\":{\"181\":1}}],[\"网卡会将数据包转换为电信号\",{\"3\":{\"190\":1}}],[\"网卡\",{\"0\":{\"190\":1},\"2\":{\"190\":1}}],[\"网页首次加载时\",{\"3\":{\"39\":1}}],[\"超过了输出层的数据包大小的时候\",{\"3\":{\"180\":1}}],[\"尽最大努力的数据传输服务\",{\"3\":{\"179\":1}}],[\"电脑上的软件\",{\"3\":{\"178\":1}}],[\"构造函数继承获取到父类的属性\",{\"3\":{\"174\":1}}],[\"构造函数继承+原型链继承\",{\"3\":{\"174\":1}}],[\"构造函数\",{\"3\":{\"174\":2,\"223\":1,\"227\":1}}],[\"构造函数方法\",{\"0\":{\"77\":1},\"2\":{\"77\":1}}],[\"点击div3时\",{\"3\":{\"168\":1}}],[\"点击事件这类\",{\"3\":{\"163\":1}}],[\"现在我需要获取所有的输入\",{\"3\":{\"295\":1,\"296\":1}}],[\"现在我需要获取这两个整数\",{\"3\":{\"294\":1}}],[\"现在我们可以分析上述代码\",{\"3\":{\"168\":1}}],[\"现在可以改写成\",{\"3\":{\"40\":2}}],[\"现代浏览器的事件模型\",{\"3\":{\"168\":1}}],[\"原型对象也是对象\",{\"3\":{\"171\":1}}],[\"原型对象中有一个\",{\"3\":{\"170\":1}}],[\"原型链继承获取到父类的方法\",{\"3\":{\"174\":1}}],[\"原型链继承\",{\"3\":{\"174\":1}}],[\"原型链\",{\"0\":{\"171\":1},\"2\":{\"171\":1}}],[\"原型\",{\"0\":{\"170\":1},\"2\":{\"170\":1}}],[\"原始事件模型就是指在ie8及其以下版本中使用的事件模型\",{\"3\":{\"167\":1}}],[\"原始事件模型\",{\"0\":{\"167\":1},\"2\":{\"167\":1},\"3\":{\"166\":1,\"167\":1}}],[\"原因\",{\"3\":{\"4\":1}}],[\"冒泡阶段\",{\"3\":{\"165\":1}}],[\"目标阶段\",{\"3\":{\"165\":1}}],[\"捕获阶段\",{\"3\":{\"165\":1}}],[\"既然提到事件委托\",{\"3\":{\"163\":1}}],[\"既不是成功也不是失败\",{\"3\":{\"75\":1}}],[\"适合事件委托的事件有\",{\"3\":{\"163\":1}}],[\"假如父组件的状态更新\",{\"3\":{\"285\":1}}],[\"假如isshow\",{\"3\":{\"267\":1}}],[\"假如\",{\"3\":{\"267\":3}}],[\"假如在react项目中\",{\"3\":{\"246\":1}}],[\"假如我们在登录成功后\",{\"3\":{\"194\":1}}],[\"假如我们为每一个列表项都增加点击事件\",{\"3\":{\"163\":1}}],[\"假如使用变量let\",{\"3\":{\"4\":1}}],[\"补充\",{\"3\":{\"163\":1}}],[\"补充weakmap\",{\"3\":{\"142\":1}}],[\"事件名要么就只写时间名字\",{\"3\":{\"234\":1}}],[\"事件处理程序\",{\"3\":{\"168\":1}}],[\"事件处理程序就会创建一个执行上下文\",{\"3\":{\"163\":1}}],[\"事件类型\",{\"3\":{\"168\":1}}],[\"事件流阶段\",{\"3\":{\"165\":1}}],[\"事件的执行的先后顺序问题\",{\"3\":{\"165\":1}}],[\"事件和事件流\",{\"0\":{\"165\":1},\"2\":{\"165\":1}}],[\"事件模型分为两种\",{\"3\":{\"166\":1}}],[\"事件模型\",{\"0\":{\"164\":1,\"166\":1},\"2\":{\"164\":1,\"166\":1}}],[\"事件委托适用于那些场景\",{\"3\":{\"163\":1}}],[\"事件委托就是利用事件冒泡\",{\"3\":{\"163\":1}}],[\"事件委托\",{\"0\":{\"163\":1},\"2\":{\"163\":1}}],[\"事件循环是指\",{\"3\":{\"154\":1}}],[\"事件循环\",{\"0\":{\"154\":1},\"1\":{\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1},\"2\":{\"154\":1}}],[\"q\",{\"3\":{\"160\":1,\"235\":1}}],[\"queryselector\",{\"3\":{\"250\":1}}],[\"queryselectorall\",{\"3\":{\"65\":1,\"251\":2,\"253\":1}}],[\"query\",{\"3\":{\"246\":2}}],[\"question\",{\"3\":{\"243\":1,\"248\":1}}],[\"queue\",{\"3\":{\"90\":5,\"98\":5}}],[\"词法作用域就是指作用域是由代码中函数声明的位置来决定的\",{\"3\":{\"160\":1}}],[\"词法作用域\",{\"0\":{\"160\":1},\"2\":{\"160\":1}}],[\"直接从缓存中读取\",{\"3\":{\"252\":2}}],[\"直接使用this\",{\"3\":{\"208\":1}}],[\"直接跳转到首页\",{\"3\":{\"194\":1}}],[\"直接返回false\",{\"3\":{\"137\":1,\"138\":1}}],[\"直到获取到所有的输入\",{\"3\":{\"295\":1}}],[\"直到子组件的状态不再发生变化\",{\"3\":{\"285\":1}}],[\"直到最后返回一个ip地址\",{\"3\":{\"186\":1}}],[\"直到div3\",{\"3\":{\"168\":1}}],[\"直到根元素div1\",{\"3\":{\"167\":1}}],[\"直到找到该变量或者到全局作用域\",{\"3\":{\"159\":1,\"160\":1}}],[\"深入浅出浏览器事件循环\",{\"3\":{\"156\":1}}],[\"深拷贝会拷贝所有的属性\",{\"3\":{\"142\":1}}],[\"深拷贝就是能够实现真正意义上的对象拷贝\",{\"3\":{\"142\":1}}],[\"深拷贝\",{\"0\":{\"142\":1},\"2\":{\"142\":1}}],[\"深拷贝vs浅拷贝\",{\"1\":{\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1}}],[\"深拷贝和浅拷贝\",{\"3\":{\"100\":1}}],[\"记录滚动位置\",{\"3\":{\"245\":3,\"246\":2}}],[\"记录上次浏览的位置\",{\"1\":{\"243\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1}}],[\"记录创建这个元素的组件\",{\"3\":{\"201\":1}}],[\"记录一个count\",{\"3\":{\"85\":1}}],[\"记一下\",{\"3\":{\"156\":1}}],[\"去执行微任务队列中的任务\",{\"3\":{\"156\":1}}],[\"去除字符串两端的空格\",{\"3\":{\"128\":1}}],[\"遇到了setimmediate\",{\"3\":{\"156\":2}}],[\"遇到了process\",{\"3\":{\"156\":2}}],[\"遇到了promise\",{\"3\":{\"156\":2}}],[\"遇到promise\",{\"3\":{\"156\":3}}],[\"遇到settimeout\",{\"3\":{\"156\":3}}],[\"遇到不可以转化的就截断\",{\"3\":{\"102\":1}}],[\"执行操作\",{\"3\":{\"163\":1}}],[\"执行宏任务队列中的任务\",{\"3\":{\"156\":1}}],[\"执行微任务队列中的任务\",{\"3\":{\"156\":5}}],[\"执行同步任务\",{\"3\":{\"156\":1}}],[\"执行顺序\",{\"3\":{\"155\":1}}],[\"执行到reject时\",{\"3\":{\"74\":1}}],[\"执行到resolve时\",{\"3\":{\"74\":1}}],[\"微任务队列空闲\",{\"3\":{\"156\":1}}],[\"微任务队列中的任务执行完毕\",{\"3\":{\"156\":3}}],[\"微任务\",{\"3\":{\"155\":1}}],[\"宏任务\",{\"3\":{\"155\":1}}],[\"宏任务和微任务都是异步任务\",{\"3\":{\"155\":1}}],[\"宏任务和微任务有哪些区别\",{\"3\":{\"155\":1}}],[\"宏任务和微任务\",{\"0\":{\"155\":1},\"2\":{\"155\":1}}],[\"主线程空闲\",{\"3\":{\"156\":1}}],[\"主线程不断从任务队列中读取任务\",{\"3\":{\"154\":1}}],[\"主要就是export和import两个关键字\",{\"3\":{\"72\":1}}],[\"主要原则就是\",{\"3\":{\"23\":1}}],[\"异步执行\",{\"3\":{\"156\":1}}],[\"异步任务则会在异步任务有了结果后\",{\"3\":{\"153\":1}}],[\"异步操作\",{\"3\":{\"74\":1,\"77\":7}}],[\"同样的当dom结构中的元素被移除后\",{\"3\":{\"267\":1}}],[\"同样的\",{\"3\":{\"216\":1,\"217\":1}}],[\"同时支持冒泡阶段和捕获阶段\",{\"3\":{\"168\":1}}],[\"同步执行\",{\"3\":{\"156\":1}}],[\"同步任务执行完毕\",{\"3\":{\"156\":1}}],[\"同步任务\",{\"3\":{\"156\":2}}],[\"同步任务会在主线程上排队执行\",{\"3\":{\"153\":1}}],[\"同源\",{\"3\":{\"12\":1}}],[\"同源策略是浏览器的安全策略\",{\"3\":{\"16\":1}}],[\"同源策略\",{\"0\":{\"12\":1},\"2\":{\"12\":1}}],[\"还需要在数据链路层生成mac头部\",{\"3\":{\"189\":1}}],[\"还有一种常见场景\",{\"3\":{\"163\":1}}],[\"还有一个特性\",{\"3\":{\"152\":1}}],[\"还是没有考虑到\",{\"3\":{\"142\":1}}],[\"还是一个普通的值\",{\"3\":{\"84\":1}}],[\"产生原因\",{\"3\":{\"165\":1}}],[\"产生的原因\",{\"0\":{\"152\":1},\"2\":{\"152\":1}}],[\"产生时间\",{\"0\":{\"53\":1},\"2\":{\"53\":1}}],[\"条件判断的时候\",{\"3\":{\"149\":1}}],[\"赋值为null的对象\",{\"3\":{\"148\":1}}],[\"赋值为null\",{\"3\":{\"148\":1}}],[\"赋值还是在后面\",{\"3\":{\"56\":1}}],[\"已经更新\",{\"3\":{\"275\":1,\"281\":1}}],[\"已经赋值为null了\",{\"3\":{\"148\":1}}],[\"已经被销毁\",{\"3\":{\"3\":1}}],[\"有时候我们定义的函数\",{\"3\":{\"258\":1}}],[\"有一个父组件\",{\"3\":{\"214\":1}}],[\"有兴趣的可以自己写一下\",{\"3\":{\"142\":1}}],[\"有什么区别\",{\"3\":{\"102\":1}}],[\"把map换为weakmap\",{\"3\":{\"142\":1}}],[\"把上面的\",{\"3\":{\"92\":1}}],[\"接口或类的时候\",{\"3\":{\"256\":2}}],[\"接受三个参数\",{\"3\":{\"201\":1,\"202\":1}}],[\"接着执行微任务队列中的任务\",{\"3\":{\"156\":2}}],[\"接着我们可以参考\",{\"3\":{\"142\":1}}],[\"接收一个具有iterator接口的对象\",{\"3\":{\"85\":1}}],[\"接收一个promise实例的数组或具有iterator接口的对象\",{\"3\":{\"82\":1}}],[\"接收一个数组\",{\"3\":{\"77\":2}}],[\"接收一个参数\",{\"3\":{\"76\":2,\"77\":2}}],[\"接收两个参数\",{\"3\":{\"76\":1}}],[\"拓展运算符\",{\"3\":{\"141\":1}}],[\"笼统来说\",{\"3\":{\"140\":1}}],[\"笼统的说\",{\"3\":{\"136\":1}}],[\"拷贝的就是内存地址\",{\"3\":{\"140\":1}}],[\"拷贝的就是基本类型的值\",{\"3\":{\"140\":1}}],[\"浅拷贝只是复制了一层对象的属性\",{\"3\":{\"140\":1}}],[\"浅拷贝\",{\"0\":{\"140\":1},\"2\":{\"140\":1}}],[\"完全等于===属于比较运算符\",{\"3\":{\"137\":1}}],[\"完全等于\",{\"0\":{\"137\":1},\"2\":{\"137\":1}}],[\"栈内存里面的地址必须相同\",{\"3\":{\"136\":1}}],[\"意外发现\",{\"3\":{\"296\":1}}],[\"意思就是\",{\"3\":{\"136\":1}}],[\"意味着对\",{\"3\":{\"3\":1}}],[\"算术运算符\",{\"3\":{\"134\":1}}],[\"隐式类型转化发生的场景\",{\"3\":{\"134\":1}}],[\"隐式类型转化\",{\"0\":{\"134\":1},\"2\":{\"134\":1}}],[\"隐式绑定\",{\"3\":{\"79\":1}}],[\"显示类型转化\",{\"0\":{\"133\":1},\"2\":{\"133\":1}}],[\"显示绑定\",{\"3\":{\"79\":1}}],[\"大写\",{\"3\":{\"128\":1}}],[\"大于\",{\"3\":{\"121\":1}}],[\"截取字符串\",{\"3\":{\"127\":3}}],[\"加载图片\",{\"3\":{\"251\":3}}],[\"加载下一批数据\",{\"3\":{\"250\":4}}],[\"加载不同的图片\",{\"3\":{\"41\":1}}],[\"加载不同的样式\",{\"3\":{\"41\":1}}],[\"加号\",{\"3\":{\"126\":1}}],[\"连接字符串\",{\"3\":{\"126\":1}}],[\"连接两个或多个数组\",{\"3\":{\"117\":1}}],[\"隔开\",{\"3\":{\"123\":1}}],[\"该服务器会返回一个ip地址\",{\"3\":{\"186\":1}}],[\"该值会作为下一次迭代的prev\",{\"3\":{\"122\":1}}],[\"该项目将缩小\",{\"3\":{\"48\":1}}],[\"没有赋值的对象属性\",{\"3\":{\"147\":1}}],[\"没有赋值的变量\",{\"3\":{\"147\":1}}],[\"没有返回值\",{\"3\":{\"122\":1}}],[\"没有被捕获\",{\"3\":{\"83\":1}}],[\"遍历数组\",{\"3\":{\"122\":6}}],[\"遍历的同时\",{\"3\":{\"97\":1}}],[\"迭代方法\",{\"0\":{\"122\":1},\"2\":{\"122\":1}}],[\"分页加载\",{\"0\":{\"250\":1},\"2\":{\"250\":1}}],[\"分析词法作用域\",{\"3\":{\"160\":1}}],[\"分析一下上述代码\",{\"3\":{\"4\":1}}],[\"分别表示小于\",{\"3\":{\"121\":1}}],[\"比较这两个对象是不是同一个对象\",{\"3\":{\"136\":1}}],[\"比较运算符\",{\"3\":{\"134\":1}}],[\"比较函数返回值为\",{\"3\":{\"121\":1}}],[\"比如保存组件的滚动位置\",{\"3\":{\"290\":1}}],[\"比如重新发送请求\",{\"3\":{\"289\":1}}],[\"比如说\",{\"3\":{\"236\":1}}],[\"比如上面的例子\",{\"3\":{\"218\":1}}],[\"比如settimeout\",{\"3\":{\"155\":1}}],[\"比如\",{\"3\":{\"104\":1,\"142\":1,\"201\":1,\"202\":1,\"224\":1,\"225\":1,\"229\":1}}],[\"比如你在请求一个跨域的接口\",{\"3\":{\"12\":1}}],[\"比如cdn\",{\"3\":{\"7\":1}}],[\"排序方法\",{\"0\":{\"121\":1},\"2\":{\"121\":1}}],[\"排列越靠前\",{\"3\":{\"48\":1}}],[\"修改数组\",{\"3\":{\"119\":1}}],[\"修改元素\",{\"0\":{\"119\":1,\"128\":1},\"2\":{\"119\":1,\"128\":1}}],[\"从路由中获取到上次浏览的位置\",{\"3\":{\"246\":1}}],[\"从路由参数中读取上次浏览的位置\",{\"3\":{\"246\":1}}],[\"从localstorage中读取上次浏览的位置\",{\"3\":{\"245\":1}}],[\"从而提前发现错误\",{\"3\":{\"256\":1}}],[\"从而解决了react在渲染过程中\",{\"3\":{\"220\":1}}],[\"从而实现数据从一端传到另一端\",{\"3\":{\"181\":2}}],[\"从组件渲染完成到组件卸载的过程\",{\"3\":{\"220\":1}}],[\"从组件开始渲染到组件渲染完成的过程\",{\"3\":{\"220\":1}}],[\"从组件实例化到组件渲染完成的过程\",{\"3\":{\"220\":1}}],[\"从当前元素开始往外查找\",{\"3\":{\"165\":1}}],[\"从根元素开始往下寻找\",{\"3\":{\"165\":1}}],[\"从start位置开始删除deletecount个\",{\"3\":{\"118\":1}}],[\"从上面的这些例子我们可以得出\",{\"3\":{\"83\":1}}],[\"从上面的代码可以看出\",{\"3\":{\"74\":1}}],[\"从上述代码我们可以知道\",{\"3\":{\"3\":1}}],[\"删除数组开头的元素\",{\"3\":{\"118\":1}}],[\"删除数组末尾的元素\",{\"3\":{\"118\":1}}],[\"删除元素\",{\"0\":{\"118\":1,\"127\":1},\"2\":{\"118\":1,\"127\":1}}],[\"删除线等\",{\"3\":{\"24\":1}}],[\"增加元素\",{\"0\":{\"117\":1,\"126\":1},\"2\":{\"117\":1,\"126\":1}}],[\"增删改查\",{\"3\":{\"116\":1,\"125\":1}}],[\"四个方面来进行分类\",{\"3\":{\"116\":1}}],[\"互不影响\",{\"3\":{\"114\":1}}],[\"每一行用一个数组表示\",{\"3\":{\"296\":1}}],[\"每一层的封装格式\",{\"3\":{\"183\":1}}],[\"每行有两个整数\",{\"3\":{\"296\":1}}],[\"每行有一个整数\",{\"3\":{\"295\":1}}],[\"每次循环都会获取一行输入\",{\"3\":{\"295\":1}}],[\"每次想要获取一行输入的时候\",{\"3\":{\"295\":1}}],[\"每次加载一定数量的数据\",{\"3\":{\"250\":1}}],[\"每次执行handlestart的时候\",{\"3\":{\"218\":1}}],[\"每篇文章都有很多内容\",{\"3\":{\"248\":1}}],[\"每\",{\"3\":{\"218\":1}}],[\"每个小的数据包都会被封装成一个tcp段\",{\"3\":{\"180\":1}}],[\"每个对象都有一个\",{\"3\":{\"171\":1}}],[\"每个函数都有一个\",{\"3\":{\"170\":1}}],[\"每个元素用指定的字符串隔开\",{\"3\":{\"123\":1}}],[\"每个元素用\",{\"3\":{\"123\":1}}],[\"每个变量存储的是一个指针\",{\"3\":{\"114\":1}}],[\"每个变量都有自己的内存空间\",{\"3\":{\"114\":1}}],[\"每层解构出来的对象都是一个\",{\"3\":{\"93\":1}}],[\"存储位置\",{\"0\":{\"114\":1},\"2\":{\"114\":1}}],[\"引擎会维护一个任务队列\",{\"3\":{\"153\":1}}],[\"引用数据类型的值是存储在堆内存中的\",{\"3\":{\"114\":1}}],[\"引用数据类型\",{\"0\":{\"108\":1},\"2\":{\"108\":1}}],[\"引申\",{\"0\":{\"164\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1},\"2\":{\"164\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1},\"3\":{\"2\":1,\"7\":1,\"11\":1,\"39\":1,\"59\":1,\"65\":1,\"155\":1,\"202\":1,\"214\":1,\"234\":1,\"238\":1}}],[\"空字符串\",{\"3\":{\"104\":1}}],[\"布尔值转化为false的情况\",{\"3\":{\"104\":1}}],[\"布尔值\",{\"3\":{\"102\":1}}],[\"布局的主要思想是让容器有能力让其子元素改变自身的宽度\",{\"3\":{\"45\":1}}],[\"布局是一种一维布局模型\",{\"3\":{\"45\":1}}],[\"长度为\",{\"3\":{\"102\":1}}],[\"转换成相同的类型\",{\"3\":{\"136\":1,\"138\":1}}],[\"转换成下面的\",{\"3\":{\"92\":1}}],[\"转换规则如下\",{\"3\":{\"136\":1}}],[\"转换方法\",{\"0\":{\"130\":1},\"2\":{\"130\":1}}],[\"转化过程\",{\"0\":{\"199\":1},\"2\":{\"199\":1}}],[\"转化应该调用的是number\",{\"3\":{\"134\":1}}],[\"转化方法\",{\"0\":{\"123\":1},\"2\":{\"123\":1}}],[\"转化为\",{\"0\":{\"200\":1,\"204\":1},\"2\":{\"200\":1,\"204\":1}}],[\"转化为数字的时候\",{\"3\":{\"150\":3}}],[\"转化为数字的方法parseint\",{\"3\":{\"102\":1}}],[\"转化为boolean的方法\",{\"3\":{\"133\":1}}],[\"转化为string的方法\",{\"3\":{\"133\":1}}],[\"转化为number的方法\",{\"3\":{\"133\":1}}],[\"转化为布尔值的方法\",{\"3\":{\"104\":1}}],[\"多行输入\",{\"0\":{\"295\":1},\"2\":{\"295\":1}}],[\"多个请求同时进行\",{\"3\":{\"100\":1}}],[\"多根轴线的对齐方式\",{\"3\":{\"47\":1}}],[\"你对mvvm的理解\",{\"3\":{\"100\":1}}],[\"你设置多大的width和height\",{\"3\":{\"20\":1}}],[\"节流和防抖\",{\"3\":{\"100\":1}}],[\"节点1\",{\"3\":{\"96\":4}}],[\"节点的子节点\",{\"3\":{\"93\":1}}],[\"节点的属性\",{\"3\":{\"93\":1}}],[\"节点的标签名\",{\"3\":{\"93\":1}}],[\"节点\",{\"3\":{\"93\":1}}],[\"怎么比较的\",{\"3\":{\"100\":1}}],[\"怎样执行的\",{\"3\":{\"100\":1}}],[\"页面是如何缓存的\",{\"3\":{\"100\":1}}],[\"介绍一下项目\",{\"3\":{\"100\":1}}],[\"自动转化为数字除了+会转化为字符串\",{\"3\":{\"134\":1}}],[\"自动转化为字符串一般遇到+\",{\"3\":{\"134\":1}}],[\"自我介绍\",{\"3\":{\"100\":1}}],[\"自适应两栏布局\",{\"3\":{\"33\":1}}],[\"树型结构\",{\"3\":{\"98\":1}}],[\"创建前后\",{\"0\":{\"273\":1,\"279\":1},\"2\":{\"273\":1,\"279\":1},\"3\":{\"272\":1}}],[\"创建\",{\"3\":{\"237\":1}}],[\"创建ref对象\",{\"3\":{\"218\":1}}],[\"创建一个上下文对象\",{\"3\":{\"214\":1}}],[\"创建了两个\",{\"0\":{\"196\":1},\"2\":{\"196\":1}}],[\"创建dom节点\",{\"3\":{\"94\":1}}],[\"创建闭包的最常见的方式就是在一个函数内创建另一个函数\",{\"3\":{\"3\":1}}],[\"说明只有一个子节点\",{\"3\":{\"93\":1,\"94\":1}}],[\"说明有多个子节点\",{\"3\":{\"93\":1}}],[\"说明所有的promise实例都已经执行完毕\",{\"3\":{\"85\":1}}],[\"像这种层层嵌套的\",{\"3\":{\"93\":1}}],[\"像素点\",{\"3\":{\"26\":1}}],[\"才会重新渲染组件\",{\"3\":{\"286\":2}}],[\"才会执行useeffect函数中的函数\",{\"3\":{\"213\":1}}],[\"才会执行后一个任务\",{\"3\":{\"153\":1}}],[\"才会执行任务队列中的代码\",{\"3\":{\"4\":1}}],[\"才是\",{\"3\":{\"160\":1}}],[\"才返回true\",{\"3\":{\"122\":1}}],[\"才将curr放入res中\",{\"3\":{\"90\":1}}],[\"子传父\",{\"0\":{\"234\":1},\"2\":{\"234\":1}}],[\"子组件的生命周期就会停止更新\",{\"3\":{\"285\":1}}],[\"子组件的状态也更新了\",{\"3\":{\"285\":1}}],[\"子组件只会调用onbeforeupdate和updated和render\",{\"3\":{\"285\":1}}],[\"子组件获取不到\",{\"3\":{\"237\":1}}],[\"子组件2\",{\"3\":{\"235\":1}}],[\"子组件1\",{\"3\":{\"235\":1}}],[\"子组件\",{\"3\":{\"234\":1}}],[\"子组件需要使用父组件的参数\",{\"3\":{\"233\":1}}],[\"子组件中需要使用到父组件中的状态对象\",{\"3\":{\"214\":1}}],[\"子类\",{\"3\":{\"175\":1}}],[\"子类无法获取到父类原型上的方法\",{\"3\":{\"174\":1}}],[\"子节点的parentid\",{\"3\":{\"90\":1}}],[\"子代选择器\",{\"3\":{\"22\":1}}],[\"首页有很多文章数目\",{\"3\":{\"248\":1}}],[\"首屏加载慢\",{\"1\":{\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1}}],[\"首先\",{\"3\":{\"246\":1}}],[\"首先jsx会被babel转化成react\",{\"3\":{\"200\":1}}],[\"首先先来介绍一下原型和原型链\",{\"3\":{\"173\":1}}],[\"首先进行同步任务\",{\"3\":{\"156\":1}}],[\"首先执行同步任务\",{\"3\":{\"156\":1}}],[\"首先让树型结构入队\",{\"3\":{\"98\":1}}],[\"首先我们需要一个函数\",{\"3\":{\"97\":1}}],[\"首先解构出json中的tag和attrs和children\",{\"3\":{\"94\":1}}],[\"首先将list的所有节点入队\",{\"3\":{\"90\":1}}],[\"首行缩进\",{\"3\":{\"24\":1}}],[\"结构中\",{\"3\":{\"267\":1}}],[\"结构中移除\",{\"3\":{\"267\":1}}],[\"结构来实现的\",{\"3\":{\"267\":1}}],[\"结构\",{\"3\":{\"92\":1,\"268\":1}}],[\"结果res\",{\"3\":{\"90\":1}}],[\"结合上面两个代码\",{\"3\":{\"69\":1}}],[\"思路\",{\"0\":{\"89\":1,\"93\":1,\"97\":1},\"2\":{\"89\":1,\"93\":1,\"97\":1}}],[\"部门6\",{\"3\":{\"88\":2}}],[\"部门5\",{\"3\":{\"88\":2}}],[\"部门4\",{\"3\":{\"88\":2}}],[\"部门3\",{\"3\":{\"88\":2}}],[\"部门2\",{\"3\":{\"88\":2}}],[\"部门1\",{\"3\":{\"88\":2}}],[\"题目要求\",{\"0\":{\"88\":1,\"92\":1,\"96\":1},\"2\":{\"88\":1,\"92\":1,\"96\":1}}],[\"手写promise\",{\"3\":{\"86\":1}}],[\"请实现promise\",{\"3\":{\"86\":1}}],[\"请求\",{\"3\":{\"14\":1}}],[\"参考链接\",{\"3\":{\"214\":1}}],[\"参考文档\",{\"3\":{\"156\":1}}],[\"参考文章\",{\"0\":{\"144\":1},\"2\":{\"144\":1}}],[\"参考\",{\"0\":{\"86\":1},\"2\":{\"86\":1}}],[\"参数列表\",{\"3\":{\"65\":1}}],[\"参数的逆运算\",{\"3\":{\"65\":1}}],[\"里面\",{\"3\":{\"85\":2}}],[\"判断\",{\"3\":{\"228\":1}}],[\"判断它到底是不是\",{\"3\":{\"85\":1}}],[\"判断是否是最后一个promise实例\",{\"3\":{\"84\":1}}],[\"判断当前遍历的promise是否是promise实例\",{\"3\":{\"84\":1}}],[\"返回类型\",{\"3\":{\"201\":1,\"202\":1}}],[\"返回替换后的字符串\",{\"3\":{\"131\":1}}],[\"返回匹配到的第一个字符串的位置\",{\"3\":{\"131\":1}}],[\"返回匹配到的字符串数组\",{\"3\":{\"131\":1}}],[\"返回指定位置的字符\",{\"3\":{\"129\":1}}],[\"返回true\",{\"3\":{\"129\":1}}],[\"返回第一次出现的位置\",{\"3\":{\"129\":1}}],[\"返回第一个符合条件的元素\",{\"3\":{\"120\":1}}],[\"返回布尔值\",{\"3\":{\"120\":1}}],[\"返回\",{\"3\":{\"120\":1}}],[\"返回元素在数组中的位置\",{\"3\":{\"120\":1}}],[\"返回删除的元素\",{\"3\":{\"118\":2}}],[\"返回删除的元素组成的数组\",{\"3\":{\"117\":1,\"118\":1}}],[\"返回一个新的字符串\",{\"3\":{\"128\":1}}],[\"返回一个新数组\",{\"3\":{\"118\":1,\"122\":2}}],[\"返回一个值\",{\"3\":{\"122\":1}}],[\"返回一个布尔值\",{\"3\":{\"122\":2}}],[\"返回一个promise实例\",{\"3\":{\"84\":2}}],[\"返回数组长度\",{\"3\":{\"117\":2}}],[\"返回新数组\",{\"3\":{\"117\":1}}],[\"返回nan\",{\"3\":{\"102\":1}}],[\"返回已经转化的数字\",{\"3\":{\"102\":1}}],[\"返回结果\",{\"3\":{\"98\":1}}],[\"返回的都是一个新的string\",{\"3\":{\"127\":1}}],[\"返回的promise对象就会变为rejected状态\",{\"3\":{\"77\":1}}],[\"返回的promise对象就会变为resolved状态\",{\"3\":{\"77\":1}}],[\"返回的promise对象的状态就会跟随参数的promise对象的状态\",{\"3\":{\"77\":1}}],[\"返回的是一个对象\",{\"3\":{\"63\":1}}],[\"返回的是一个数组\",{\"3\":{\"62\":1}}],[\"功能\",{\"0\":{\"82\":1},\"2\":{\"82\":1}}],[\"总的来说\",{\"3\":{\"81\":1}}],[\"总结来说\",{\"3\":{\"234\":1}}],[\"总结\",{\"0\":{\"9\":1,\"85\":1,\"138\":1},\"2\":{\"9\":1,\"85\":1,\"138\":1}}],[\"传递给事件处理函数的函数\",{\"3\":{\"234\":1}}],[\"传递参数给子组件\",{\"3\":{\"233\":1}}],[\"传递出去\",{\"3\":{\"80\":1}}],[\"传输层只是为应用层提供了端到端的通信\",{\"3\":{\"181\":1}}],[\"传输层有两个协议\",{\"3\":{\"179\":1}}],[\"传输层为两台主机上的应用程序提供端到端的通信\",{\"3\":{\"179\":1}}],[\"传输层\",{\"0\":{\"179\":1},\"2\":{\"179\":1}}],[\"传输层及以下是工作在操作系统的内核态\",{\"3\":{\"178\":1}}],[\"传输层会帮我们处理数据传输的细节\",{\"3\":{\"178\":1}}],[\"传入的promise中有reject的实例\",{\"3\":{\"83\":1}}],[\"传入的promise中都是resolve的实例\",{\"3\":{\"83\":1}}],[\"传参并指定回调执行函数为onback\",{\"3\":{\"14\":1}}],[\"虽然apply接受的参数是一个数组\",{\"3\":{\"80\":1}}],[\"虽然fn3被销毁了\",{\"3\":{\"3\":1}}],[\"我在牛客\",{\"3\":{\"296\":1}}],[\"我可以使用redux实现任意组件通信\",{\"3\":{\"238\":1}}],[\"我的理解是\",{\"3\":{\"80\":1}}],[\"我们采用懒加载的方式\",{\"3\":{\"251\":1}}],[\"我们采用分批次加载的方式\",{\"3\":{\"250\":1}}],[\"我们这个其实也可以使用intersectionobserver来实现\",{\"3\":{\"250\":1}}],[\"我们将window\",{\"3\":{\"250\":1}}],[\"我们就将滚动位置记录到localstorage中\",{\"3\":{\"246\":1}}],[\"我们就从localstorage中读取上次浏览的位置\",{\"3\":{\"246\":1}}],[\"我们就需要使用到变量提升的方式\",{\"3\":{\"236\":1}}],[\"我们使用useeffect来监听滚动事件\",{\"3\":{\"246\":1}}],[\"我们使用useeffect来监听路由参数id的变化\",{\"3\":{\"246\":1}}],[\"我们使用useparams来获取路由参数id\",{\"3\":{\"246\":1}}],[\"我们主要利用的就是window\",{\"3\":{\"245\":1}}],[\"我们通常在构造函数里初始化组件的状态对象\",{\"3\":{\"223\":1,\"227\":1}}],[\"我们并不能确定数据是否传输成功\",{\"3\":{\"179\":1}}],[\"我们手机上的app\",{\"3\":{\"178\":1}}],[\"我们维护一个队列\",{\"3\":{\"97\":1}}],[\"我们需要保存一个定时器\",{\"3\":{\"218\":1}}],[\"我们需要把每个子节点的children也进行遍历\",{\"3\":{\"97\":1}}],[\"我们需要使用其他的方法来隐藏元素\",{\"3\":{\"28\":1}}],[\"我们会使用遍历或者sort方法\",{\"3\":{\"80\":1}}],[\"我们也可以看一个稍微复杂一点的例子\",{\"3\":{\"79\":1}}],[\"我们可以总结出来\",{\"3\":{\"295\":1}}],[\"我们可以认为setup是beforecreate和created的结合体\",{\"3\":{\"279\":1}}],[\"我们可以进行一些dom操作\",{\"3\":{\"274\":1}}],[\"我们可以这么理解\",{\"3\":{\"256\":1}}],[\"我们可以这么理解usecallback和usestate的关系\",{\"3\":{\"217\":1}}],[\"我们可以这么理解usememo和usestate的关系\",{\"3\":{\"216\":1}}],[\"我们可以采用骨架屏的方式\",{\"3\":{\"254\":1}}],[\"我们可以采用虚拟列表的方式\",{\"3\":{\"253\":1}}],[\"我们可以利用浏览器的缓存机制\",{\"3\":{\"252\":1}}],[\"我们可以借助react\",{\"3\":{\"251\":1,\"253\":1}}],[\"我们可以通过props\",{\"3\":{\"233\":1}}],[\"我们可以使用useparams来获取路由参数\",{\"3\":{\"246\":1}}],[\"我们可以使用useeffect来监听滚动事件\",{\"3\":{\"245\":1}}],[\"我们可以使用json\",{\"3\":{\"224\":1}}],[\"我们可以使用媒体查询来指定css的加载时机\",{\"3\":{\"39\":1}}],[\"我们可以将usestate设置出来的状态理解为自变量\",{\"3\":{\"216\":1,\"217\":1}}],[\"我们可以分析出\",{\"3\":{\"162\":1}}],[\"我们可以看出\",{\"3\":{\"69\":1}}],[\"我们可以去配置nginx来做反向代理\",{\"3\":{\"16\":1}}],[\"我们一般使用display\",{\"3\":{\"28\":1}}],[\"我们在客户端提前设置好一个函数\",{\"3\":{\"14\":1}}],[\"运算符\",{\"3\":{\"80\":1}}],[\"求数组的最大值和最小值\",{\"3\":{\"80\":1}}],[\"新数组中的元素是通过测试的元素\",{\"3\":{\"122\":1}}],[\"新的函数的this指向的是bind的第一个参数\",{\"3\":{\"80\":1}}],[\"新增了一个hook函数\",{\"3\":{\"229\":1}}],[\"新增\",{\"3\":{\"65\":2}}],[\"来比较两个对象\",{\"3\":{\"224\":1}}],[\"来获取dom元素\",{\"3\":{\"218\":1}}],[\"来标识\",{\"3\":{\"126\":2}}],[\"来直接改变\",{\"3\":{\"79\":1}}],[\"来隐藏元素\",{\"3\":{\"28\":1}}],[\"采用一些方法\",{\"3\":{\"79\":1}}],[\"谁先来的就跟着谁变化\",{\"3\":{\"77\":1}}],[\"兜底的作用\",{\"3\":{\"76\":1}}],[\"第一行包含一个整数\",{\"3\":{\"295\":1,\"296\":1}}],[\"第一次渲染\",{\"0\":{\"288\":1},\"2\":{\"288\":1}}],[\"第一个参数\",{\"3\":{\"168\":1}}],[\"第一个参数是resolve的回调函数\",{\"3\":{\"74\":1,\"76\":1}}],[\"第二个元素是一个函数\",{\"3\":{\"212\":1}}],[\"第二个参数\",{\"3\":{\"168\":1}}],[\"第二个参数是reject的回调函数\",{\"3\":{\"74\":1,\"76\":1}}],[\"第三个参数\",{\"3\":{\"168\":1}}],[\"状态变为rejected\",{\"3\":{\"74\":1}}],[\"状态变为resolved\",{\"3\":{\"74\":1}}],[\"失败状态\",{\"3\":{\"75\":1}}],[\"失败\",{\"3\":{\"74\":1,\"77\":3}}],[\"失败的回调函数\",{\"3\":{\"74\":1,\"77\":7}}],[\"成功状态\",{\"3\":{\"75\":1}}],[\"成功\",{\"3\":{\"74\":1,\"77\":3}}],[\"成功的回调函数\",{\"3\":{\"74\":1,\"77\":7}}],[\"调用后\",{\"3\":{\"276\":1,\"282\":1}}],[\"调用时\",{\"3\":{\"275\":1,\"281\":1}}],[\"调用父类的构造函数\",{\"3\":{\"174\":1,\"175\":2}}],[\"调用的地方\",{\"3\":{\"160\":1}}],[\"调用race\",{\"3\":{\"77\":1}}],[\"调用\",{\"3\":{\"74\":1,\"77\":2,\"85\":1}}],[\"模式则是直接输出结果print或者console\",{\"3\":{\"297\":1}}],[\"模式则是通过输入输出的方式来获取参数和返回结果\",{\"3\":{\"297\":1}}],[\"模式下进行测试的时候\",{\"3\":{\"296\":1}}],[\"模式获取输入\",{\"0\":{\"293\":1},\"2\":{\"293\":1}}],[\"模板匹配方法\",{\"0\":{\"131\":1},\"2\":{\"131\":1}}],[\"模板字符串是增强版的字符串\",{\"3\":{\"60\":1}}],[\"模板字符串\",{\"0\":{\"60\":1},\"2\":{\"60\":1},\"3\":{\"126\":1}}],[\"模块化\",{\"0\":{\"72\":1},\"2\":{\"72\":1}}],[\"添加静态方法\",{\"3\":{\"175\":1}}],[\"添加原型方法\",{\"3\":{\"175\":1}}],[\"添加方法\",{\"3\":{\"70\":2}}],[\"添加下划线\",{\"3\":{\"24\":1}}],[\"本质上还是\",{\"3\":{\"69\":1}}],[\"实现方法\",{\"3\":{\"174\":1}}],[\"实现\",{\"0\":{\"94\":1,\"195\":1},\"2\":{\"94\":1,\"195\":1}}],[\"实现数组的拼接\",{\"3\":{\"80\":1}}],[\"实现http缓存的方式有很多\",{\"3\":{\"6\":1}}],[\"实例仍然完全可用\",{\"3\":{\"276\":1,\"282\":1}}],[\"实例的属性和方法的运算都不能访问到data\",{\"3\":{\"273\":1}}],[\"实例的状态变更\",{\"3\":{\"85\":1}}],[\"实例后加载\",{\"3\":{\"196\":1}}],[\"实例先加载\",{\"3\":{\"196\":1}}],[\"实例\",{\"0\":{\"196\":1},\"2\":{\"196\":1},\"3\":{\"85\":2,\"196\":2}}],[\"实例方法\",{\"0\":{\"76\":1},\"2\":{\"76\":1}}],[\"实例化\",{\"3\":{\"68\":1,\"69\":1,\"70\":2,\"174\":3,\"175\":1}}],[\"具有可迭代性的对象\",{\"3\":{\"65\":1}}],[\"具体可以参考javascript\",{\"3\":{\"133\":1}}],[\"具体参考\",{\"3\":{\"59\":1,\"71\":1,\"234\":1}}],[\"具体流程如下\",{\"3\":{\"8\":1,\"15\":1}}],[\"都能够达到控制元素显示隐藏的效果\",{\"3\":{\"265\":1}}],[\"都需要使用\",{\"3\":{\"295\":1}}],[\"都需要提升到父组件\",{\"3\":{\"235\":1}}],[\"都需要对象具有可迭代性\",{\"3\":{\"65\":1}}],[\"都是使用while\",{\"3\":{\"295\":1}}],[\"都是用来缓存组件的\",{\"3\":{\"286\":1}}],[\"都是借助react的class组件来实现的\",{\"3\":{\"229\":1}}],[\"都是应用层的东西\",{\"3\":{\"178\":1}}],[\"都当做一个参数\",{\"3\":{\"80\":1}}],[\"都会调用changename函数\",{\"3\":{\"234\":1}}],[\"都会执行\",{\"3\":{\"76\":1}}],[\"都会重新定义一个timmer\",{\"3\":{\"218\":1}}],[\"都会重新定义\",{\"3\":{\"4\":1}}],[\"进入可视区域就会触发回调函数\",{\"3\":{\"251\":1}}],[\"进行遍历\",{\"3\":{\"85\":1}}],[\"进行深拷贝\",{\"3\":{\"65\":1}}],[\"进程\",{\"3\":{\"7\":1}}],[\"字节飞书面试\",{\"3\":{\"86\":1}}],[\"字符串或正则表达式\",{\"3\":{\"284\":2}}],[\"字符串转换为数字\",{\"3\":{\"136\":1}}],[\"字符串转数组\",{\"3\":{\"65\":1}}],[\"字符串拼接\",{\"3\":{\"126\":1}}],[\"字符串常用方法\",{\"1\":{\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1}}],[\"字符串\",{\"3\":{\"65\":1,\"284\":1}}],[\"字体类\",{\"3\":{\"24\":1}}],[\"与解构赋值结合\",{\"3\":{\"65\":1}}],[\"扩展运算符以及for\",{\"3\":{\"65\":1}}],[\"扩展运算符是三个点\",{\"3\":{\"65\":1}}],[\"扩展运算符\",{\"0\":{\"65\":1},\"2\":{\"65\":1}}],[\"k+1\",{\"3\":{\"296\":1}}],[\"keep\",{\"0\":{\"284\":1,\"286\":1,\"287\":1},\"2\":{\"284\":1,\"286\":1,\"287\":1},\"3\":{\"284\":4,\"286\":2}}],[\"keyof\",{\"3\":{\"263\":2}}],[\"keyup\",{\"3\":{\"163\":1}}],[\"keypress\",{\"3\":{\"163\":1}}],[\"keydown\",{\"3\":{\"163\":1}}],[\"key\",{\"3\":{\"84\":3,\"94\":3,\"201\":5,\"203\":1}}],[\"k\",{\"3\":{\"62\":1}}],[\"剩余运算符只能放在最后一位\",{\"3\":{\"62\":1,\"63\":1}}],[\"剩余运算符\",{\"3\":{\"62\":1,\"63\":1}}],[\"数据操作\",{\"3\":{\"273\":1}}],[\"数据观测和事件配置之前被调用\",{\"3\":{\"273\":1}}],[\"数据使用state或者redux来管理\",{\"3\":{\"240\":1}}],[\"数据\",{\"3\":{\"218\":1,\"228\":2}}],[\"数据包会被封装为帧吗\",{\"3\":{\"189\":1}}],[\"数据会经过很多的路由器\",{\"3\":{\"181\":1}}],[\"数据类型\",{\"3\":{\"133\":1}}],[\"数据类型的存储位置\",{\"3\":{\"114\":1}}],[\"数字\",{\"3\":{\"104\":1}}],[\"数组中传入的值\",{\"3\":{\"213\":1}}],[\"数组中的每一项都是一个promise对象\",{\"3\":{\"77\":2}}],[\"数组本身就是一个特殊的对象\",{\"3\":{\"172\":1}}],[\"数组的原型链\",{\"0\":{\"172\":1},\"1\":{\"170\":1,\"171\":1,\"172\":1,\"173\":1},\"2\":{\"172\":1}}],[\"数组的解构赋值\",{\"0\":{\"62\":1},\"2\":{\"62\":1}}],[\"数组转化为字符串\",{\"3\":{\"123\":1}}],[\"数组常用方法\",{\"1\":{\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1}}],[\"数组是怎么遍历的\",{\"3\":{\"100\":1}}],[\"数组里面又是一个个对象\",{\"3\":{\"93\":1}}],[\"数组\",{\"3\":{\"65\":1}}],[\"数组合并\",{\"3\":{\"65\":1}}],[\"数值越小\",{\"3\":{\"48\":1}}],[\"解决方案\",{\"0\":{\"244\":1,\"249\":1},\"2\":{\"244\":1,\"249\":1}}],[\"解构不成功\",{\"3\":{\"62\":1}}],[\"解构赋值是对赋值运算符的扩展\",{\"3\":{\"61\":1}}],[\"解构赋值\",{\"0\":{\"61\":1},\"2\":{\"61\":1}}],[\"解析完毕后\",{\"3\":{\"36\":1}}],[\"years\",{\"3\":{\"60\":2,\"68\":2,\"69\":2,\"70\":4,\"174\":5,\"175\":3}}],[\"yellow\",{\"3\":{\"50\":1}}],[\"$el属性可以访问\",{\"3\":{\"274\":1,\"280\":1}}],[\"$router\",{\"3\":{\"246\":1}}],[\"$route\",{\"3\":{\"246\":1}}],[\"$typeof\",{\"3\":{\"201\":2}}],[\"$\",{\"3\":{\"60\":2,\"68\":2,\"69\":2,\"70\":4,\"174\":6,\"175\":2,\"246\":2}}],[\"`scrollposition\",{\"3\":{\"246\":2}}],[\"``\",{\"3\":{\"126\":1}}],[\"`my\",{\"3\":{\"60\":1,\"68\":1,\"69\":1,\"70\":2,\"174\":3,\"175\":1}}],[\"`\",{\"3\":{\"60\":2,\"68\":1,\"69\":1,\"70\":2,\"174\":3,\"175\":1,\"246\":2}}],[\"用一个数组表示\",{\"3\":{\"295\":1}}],[\"用两个变量表示\",{\"3\":{\"294\":1}}],[\"用空格隔开\",{\"3\":{\"294\":1}}],[\"用户体验不好\",{\"3\":{\"248\":1}}],[\"用户体验不好的问题\",{\"3\":{\"220\":1}}],[\"用于性能优化\",{\"3\":{\"227\":1,\"228\":1}}],[\"用于计算当前的状态\",{\"3\":{\"220\":1}}],[\"用于标识这个任务的优先级\",{\"3\":{\"203\":1}}],[\"用于标识这个\",{\"3\":{\"203\":12}}],[\"用于标识这个元素或者组件的\",{\"3\":{\"201\":1}}],[\"用于标识这个元素的属性\",{\"3\":{\"201\":1}}],[\"用于标识这个元素的\",{\"3\":{\"201\":1}}],[\"用于标识这个元素的类型\",{\"3\":{\"201\":2}}],[\"用于标识这是一个\",{\"3\":{\"201\":2}}],[\"用于存放待处理的数据\",{\"3\":{\"98\":1}}],[\"用padstring填充字符串\",{\"3\":{\"128\":1}}],[\"用什么\",{\"3\":{\"100\":1}}],[\"用反引号\",{\"3\":{\"60\":1}}],[\"用来控制元素的\",{\"3\":{\"268\":2}}],[\"用来记录promise实例的数量\",{\"3\":{\"85\":1}}],[\"用来接收参数\",{\"3\":{\"69\":1}}],[\"用来检测媒体类型的特性\",{\"3\":{\"40\":1}}],[\"用来指定资源的过期时间\",{\"3\":{\"7\":2}}],[\"包括自己\",{\"3\":{\"136\":1}}],[\"包括嵌套的p元素\",{\"3\":{\"22\":1}}],[\"包含两个整数\",{\"3\":{\"294\":1}}],[\"包含从start到end\",{\"3\":{\"118\":1}}],[\"包含了函数的所有参数\",{\"3\":{\"59\":1}}],[\"指向创建它的构造函数的原型对象\",{\"3\":{\"171\":2}}],[\"指向函数本身\",{\"3\":{\"170\":1}}],[\"指向谁\",{\"3\":{\"160\":1}}],[\"指向存储在堆内存中的对象\",{\"3\":{\"114\":1}}],[\"指向问题\",{\"3\":{\"59\":1}}],[\"指向的是函数使用时所在的对象\",{\"3\":{\"59\":1}}],[\"指定媒体类型\",{\"3\":{\"40\":1}}],[\"指定资源的过期时间\",{\"3\":{\"7\":1}}],[\"形式\",{\"3\":{\"59\":1}}],[\"箭头函数没有arguments\",{\"3\":{\"59\":1}}],[\"箭头函数没有this\",{\"3\":{\"59\":1}}],[\"箭头函数\",{\"0\":{\"59\":1},\"2\":{\"59\":1}}],[\"重新获取数据等等\",{\"3\":{\"289\":1}}],[\"重新获取请求结果\",{\"3\":{\"9\":1}}],[\"重复字符串\",{\"3\":{\"128\":1}}],[\"重复声明\",{\"0\":{\"57\":1},\"2\":{\"57\":1}}],[\"报错\",{\"3\":{\"56\":2,\"57\":2,\"58\":1,\"59\":1,\"174\":1}}],[\"上述介绍的所有生命周期钩子\",{\"3\":{\"229\":1}}],[\"上述代码表明\",{\"3\":{\"55\":1}}],[\"上面的代码表明\",{\"3\":{\"58\":1,\"79\":2}}],[\"上面这段代码表明\",{\"3\":{\"56\":3,\"57\":2}}],[\"临时死亡区就是代码块的起始位置到变量声明的位置\",{\"3\":{\"56\":1}}],[\"临时死亡区\",{\"0\":{\"56\":1},\"2\":{\"56\":1}}],[\"仅在当前这个作用域生效\",{\"3\":{\"55\":1}}],[\"9ec5e242\",{\"0\":{\"240\":1,\"241\":1,\"242\":1}}],[\"9\",{\"3\":{\"55\":2}}],[\"96英寸\",{\"3\":{\"26\":1}}],[\"7521bc0a\",{\"0\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"75c3ec6e\",{\"0\":{\"26\":1,\"27\":1}}],[\"7\",{\"1\":{\"100\":1},\"3\":{\"55\":2,\"77\":2,\"156\":4,\"296\":1}}],[\"函数组件并没有继承\",{\"3\":{\"230\":1}}],[\"函数组件不能使用this关键字\",{\"3\":{\"210\":1}}],[\"函数组件没有生命周期钩子\",{\"3\":{\"210\":1}}],[\"函数组件没有自己的状态\",{\"3\":{\"209\":1,\"210\":1}}],[\"函数组件只能接收props\",{\"3\":{\"209\":1}}],[\"函数组件是一个函数\",{\"3\":{\"209\":1}}],[\"函数组件\",{\"0\":{\"209\":1},\"2\":{\"209\":1}}],[\"函数是一个\",{\"3\":{\"202\":1}}],[\"函数\",{\"2\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"230\":1},\"3\":{\"202\":1}}],[\"函数fn1的作用域是foo的作用域\",{\"3\":{\"162\":1}}],[\"函数foo的作用域是全局作用域\",{\"3\":{\"160\":1,\"162\":1}}],[\"函数bar的作用域是全局作用域\",{\"3\":{\"160\":1}}],[\"函数的解构赋值其实是针对于函数的参数而言的\",{\"3\":{\"64\":1}}],[\"函数的解构赋值\",{\"0\":{\"64\":1},\"2\":{\"64\":1}}],[\"函数作用域\",{\"3\":{\"55\":2,\"158\":1}}],[\"函数可以访问其声明外部的函数的作用域\",{\"3\":{\"3\":1}}],[\"块级作用域\",{\"3\":{\"55\":2,\"158\":1}}],[\"全局作用域\",{\"3\":{\"55\":2,\"158\":1,\"160\":3,\"162\":2}}],[\"左右两边固定宽度\",{\"3\":{\"50\":1}}],[\"三栏布局\",{\"0\":{\"50\":1},\"2\":{\"50\":1},\"3\":{\"50\":1}}],[\"且会根据剩余空间的大小进行放大\",{\"3\":{\"48\":1}}],[\"且很重要\",{\"3\":{\"48\":1}}],[\"场景\",{\"0\":{\"194\":1,\"243\":1,\"248\":1},\"2\":{\"194\":1,\"243\":1,\"248\":1},\"3\":{\"48\":1,\"214\":1}}],[\"基于构造函数继承\",{\"3\":{\"174\":1}}],[\"基于原型链的继承\",{\"3\":{\"174\":1}}],[\"基本数据类型的值是存储在栈内存中的\",{\"3\":{\"114\":1}}],[\"基本数据类型\",{\"0\":{\"101\":1},\"2\":{\"101\":1}}],[\"基本类型怎么进行拷贝的\",{\"3\":{\"100\":1}}],[\"基准值为\",{\"3\":{\"48\":1}}],[\"基础概念\",{\"0\":{\"45\":1},\"2\":{\"45\":1}}],[\"缩小比例为\",{\"3\":{\"48\":1}}],[\"缩小\",{\"3\":{\"48\":1}}],[\"放大比例为\",{\"3\":{\"48\":1}}],[\"放大\",{\"3\":{\"48\":2}}],[\"放在\",{\"2\":{\"38\":1}}],[\"放在head标签中\",{\"0\":{\"38\":1}}],[\"相关的render函数首次被调用\",{\"3\":{\"274\":1,\"280\":1}}],[\"相同点\",{\"0\":{\"265\":1},\"2\":{\"265\":1},\"3\":{\"286\":1}}],[\"相当于person\",{\"3\":{\"175\":1}}],[\"相当于将父类的实例复制了一份给了子类\",{\"3\":{\"174\":1}}],[\"相当于flex\",{\"3\":{\"48\":3}}],[\"相对于显示器的分辨率\",{\"3\":{\"26\":1}}],[\"后两个属性可选\",{\"3\":{\"48\":1}}],[\"后代选择器\",{\"3\":{\"22\":2}}],[\"项目中你如何做的\",{\"3\":{\"100\":1}}],[\"项目占据的主轴空间\",{\"3\":{\"48\":1}}],[\"项目属性\",{\"0\":{\"48\":1},\"2\":{\"48\":1}}],[\"定义\",{\"3\":{\"284\":1}}],[\"定义子类\",{\"3\":{\"174\":3,\"175\":1}}],[\"定义父类的方法\",{\"3\":{\"174\":1}}],[\"定义父类\",{\"3\":{\"174\":1,\"175\":1}}],[\"定义一个\",{\"3\":{\"74\":1,\"77\":3}}],[\"定义方法\",{\"3\":{\"68\":1,\"174\":1}}],[\"定义构造函数\",{\"3\":{\"68\":1}}],[\"定义类\",{\"0\":{\"67\":1},\"2\":{\"67\":1}}],[\"定义在分配多余空间之前\",{\"3\":{\"48\":1}}],[\"定义项目的缩小比例\",{\"3\":{\"48\":1}}],[\"定义项目的放大比例\",{\"3\":{\"48\":1}}],[\"定义项目的排列顺序\",{\"3\":{\"48\":1}}],[\"决定元素是否换行\",{\"3\":{\"47\":1}}],[\"决定主轴的方向\",{\"3\":{\"47\":1}}],[\"容器属性\",{\"0\":{\"47\":1},\"2\":{\"47\":1}}],[\"属性设置为\",{\"3\":{\"267\":2}}],[\"属性来实现的\",{\"3\":{\"267\":1}}],[\"属性\",{\"0\":{\"46\":1},\"2\":{\"46\":1},\"3\":{\"170\":2,\"171\":2,\"201\":2,\"218\":1,\"268\":3}}],[\"属性选择器\",{\"3\":{\"22\":1,\"23\":1}}],[\"以后每次接收到新的props之后都会被调用\",{\"3\":{\"227\":1}}],[\"以最适合当前的显示环境\",{\"3\":{\"45\":1}}],[\"以及对齐方式等\",{\"3\":{\"45\":1}}],[\"顺序\",{\"3\":{\"45\":1}}],[\"高度\",{\"3\":{\"45\":1,\"250\":1}}],[\"预加载\",{\"3\":{\"43\":1}}],[\"作用域链的场景\",{\"0\":{\"161\":1},\"2\":{\"161\":1}}],[\"作用域链\",{\"0\":{\"159\":1},\"1\":{\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1},\"2\":{\"159\":1}}],[\"作用域链分类\",{\"0\":{\"158\":1},\"2\":{\"158\":1}}],[\"作用域分类\",{\"3\":{\"55\":1}}],[\"作用域就是变量和函数的可访问范围\",{\"3\":{\"55\":1}}],[\"作用域补充\",{\"0\":{\"55\":1},\"2\":{\"55\":1}}],[\"作用域\",{\"0\":{\"54\":1},\"2\":{\"54\":1}}],[\"作用就是\",{\"3\":{\"43\":1}}],[\"作为\",{\"3\":{\"3\":1}}],[\"动态样式\",{\"3\":{\"41\":1}}],[\"至多是60em\",{\"3\":{\"40\":2}}],[\"至多多少\",{\"3\":{\"40\":1}}],[\"至少多少\",{\"3\":{\"40\":1}}],[\"最后\",{\"3\":{\"246\":1}}],[\"最后一次修改时间\",{\"3\":{\"8\":1}}],[\"最早可以获取到真实\",{\"3\":{\"223\":1}}],[\"最先被执行\",{\"3\":{\"223\":1,\"227\":1}}],[\"最小宽度\",{\"3\":{\"40\":1}}],[\"最大宽度\",{\"3\":{\"40\":1}}],[\"简单理解为参数列表\",{\"3\":{\"59\":1}}],[\"简单来说\",{\"3\":{\"40\":1,\"77\":1,\"227\":1,\"228\":1,\"240\":1,\"241\":1}}],[\"简单易用\",{\"3\":{\"14\":1}}],[\"媒体查询的使用场景\",{\"0\":{\"41\":1},\"2\":{\"41\":1}}],[\"媒体查询的语法如下\",{\"3\":{\"40\":1}}],[\"媒体查询表达式\",{\"3\":{\"40\":1}}],[\"媒体查询就是一种检测浏览器或设备特性的方法\",{\"3\":{\"40\":1}}],[\"媒体查询\",{\"0\":{\"40\":1},\"2\":{\"40\":1},\"3\":{\"39\":1}}],[\"一直往下查找\",{\"3\":{\"168\":1}}],[\"一直往外查找\",{\"3\":{\"167\":1}}],[\"一直找到根元素为止\",{\"3\":{\"165\":1}}],[\"一直找到目标元素\",{\"3\":{\"165\":1}}],[\"一直会阻塞渲染\",{\"3\":{\"39\":1}}],[\"一个大量数据的列表\",{\"3\":{\"163\":1}}],[\"一种是微任务\",{\"3\":{\"155\":1}}],[\"一种是宏任务\",{\"3\":{\"155\":1}}],[\"一种是异步任务\",{\"3\":{\"153\":1}}],[\"一种是同步任务\",{\"3\":{\"153\":1}}],[\"一方是string\",{\"3\":{\"136\":1}}],[\"一一对应\",{\"3\":{\"62\":1,\"63\":1}}],[\"一般不需要使用extends\",{\"3\":{\"262\":1}}],[\"一般需要使用extends\",{\"3\":{\"262\":1}}],[\"一般我们会进行一些全局的配置\",{\"3\":{\"273\":1}}],[\"一般我们会使用变量提升\",{\"3\":{\"235\":1}}],[\"一般我们会将useref和ref结合使用\",{\"3\":{\"218\":1}}],[\"一般使用slice\",{\"3\":{\"119\":1}}],[\"一般typeof\",{\"3\":{\"106\":1}}],[\"一般都是使用\",{\"3\":{\"233\":1}}],[\"一般都是使用递归来做\",{\"3\":{\"93\":1,\"97\":1}}],[\"一般都是先匹配网络号\",{\"3\":{\"181\":1}}],[\"一般都是将他直接缓存在浏览器的缓存目录下\",{\"3\":{\"43\":1}}],[\"一般会简写\",{\"3\":{\"48\":1}}],[\"一般会在场景题里面出现\",{\"3\":{\"4\":1}}],[\"一般情况下\",{\"3\":{\"26\":2,\"163\":1}}],[\"一般在项目中\",{\"3\":{\"16\":1}}],[\"宽度至少是40em\",{\"3\":{\"39\":1,\"40\":4}}],[\"宽高度\",{\"3\":{\"24\":1}}],[\"只涉及css的变化\",{\"3\":{\"268\":1}}],[\"只渲染可视区域的文章\",{\"3\":{\"253\":1}}],[\"只负责渲染组件\",{\"3\":{\"223\":1,\"227\":1}}],[\"只是一个用于引用\",{\"3\":{\"218\":1}}],[\"只是这种数组\",{\"3\":{\"125\":1}}],[\"只不过usecallback函数返回的是一个函数\",{\"3\":{\"217\":1}}],[\"只指定一个事件处理程序\",{\"3\":{\"163\":1}}],[\"只能三选一\",{\"3\":{\"284\":1}}],[\"只能返回一个顶级元素\",{\"3\":{\"223\":1}}],[\"只能通过this\",{\"3\":{\"223\":1}}],[\"只能同时执行一个任务\",{\"3\":{\"152\":1}}],[\"只能将字符串转化为数字\",{\"3\":{\"102\":1}}],[\"只考虑了普通object情况\",{\"3\":{\"142\":1}}],[\"只读\",{\"3\":{\"125\":1}}],[\"只可以转化纯数字字符串或者空字符串\",{\"3\":{\"102\":1}}],[\"只有匹配的组件会被缓存\",{\"3\":{\"284\":1}}],[\"只有在组件切换时才会触发activated和deactivated这两个生命周期钩子函数\",{\"3\":{\"284\":1}}],[\"只有在组件更新的时候才会被调用\",{\"3\":{\"228\":1}}],[\"只有在这些值发生改变的时候\",{\"3\":{\"213\":1}}],[\"只有箭头函数\",{\"3\":{\"160\":1}}],[\"只有所有元素都通过测试\",{\"3\":{\"122\":1}}],[\"只有所有的promise实例状态都变成fulfilled\",{\"3\":{\"82\":1}}],[\"只有当curr的parentid为0时\",{\"3\":{\"90\":1}}],[\"只有当所有的promise实例状态都变成fulfilled\",{\"3\":{\"83\":1}}],[\"只要因变量改变\",{\"3\":{\"216\":1,\"217\":1}}],[\"只要自变量改变\",{\"3\":{\"216\":1,\"217\":1}}],[\"只要主线程空闲\",{\"3\":{\"154\":1}}],[\"只要有一个元素通过测试\",{\"3\":{\"122\":1}}],[\"只要有一个reject\",{\"3\":{\"83\":1}}],[\"只要有一个promise实例状态变成rejected\",{\"3\":{\"82\":1}}],[\"只要数组的某一个promise对象变为resolved状态\",{\"3\":{\"77\":1}}],[\"只要不在函数内部或者在大括号内的都是全局作用域\",{\"3\":{\"55\":1}}],[\"只在打印内容时适用\",{\"3\":{\"39\":1}}],[\"只支持冒泡阶段\",{\"3\":{\"167\":1}}],[\"只支持\",{\"3\":{\"14\":1}}],[\"再将loading状态设置为false\",{\"3\":{\"254\":1}}],[\"再将字符串转换为对象\",{\"3\":{\"143\":1}}],[\"再渲染文章\",{\"3\":{\"254\":1}}],[\"再渲染可视区域的文章\",{\"3\":{\"253\":1}}],[\"再加载图片\",{\"3\":{\"251\":1}}],[\"再加载下一批数据\",{\"3\":{\"250\":1}}],[\"再加载首页的数据\",{\"3\":{\"194\":1}}],[\"再次打开页面时\",{\"3\":{\"243\":1}}],[\"再挂载\",{\"3\":{\"196\":1}}],[\"再跳转到首页\",{\"3\":{\"194\":1}}],[\"再匹配主机号\",{\"3\":{\"181\":1}}],[\"再进行值的比较\",{\"3\":{\"137\":1,\"138\":1}}],[\"再进行比较\",{\"3\":{\"136\":3,\"138\":1}}],[\"再举一个例子\",{\"3\":{\"59\":1}}],[\"再去渲染dom树\",{\"3\":{\"36\":1}}],[\"再继续生成dom树\",{\"3\":{\"36\":1}}],[\"再继续解析html\",{\"3\":{\"35\":1}}],[\"再存入浏览器缓存中\",{\"3\":{\"9\":1}}],[\"等待事件冒泡\",{\"3\":{\"163\":1}}],[\"等待主线程的空闲时间来执行\",{\"3\":{\"153\":1}}],[\"等待状态\",{\"3\":{\"75\":1}}],[\"等于==属于比较运算符\",{\"3\":{\"136\":1}}],[\"等于vs完全等于\",{\"1\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"等于\",{\"0\":{\"136\":1},\"2\":{\"136\":1},\"3\":{\"121\":1}}],[\"等\",{\"3\":{\"104\":1,\"201\":1,\"202\":1}}],[\"等css加载完毕后\",{\"3\":{\"35\":1,\"36\":1}}],[\"等到执行栈中的代码执行完毕后\",{\"3\":{\"4\":1}}],[\"6c93545e\",{\"0\":{\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"6cfad872\",{\"0\":{\"177\":1}}],[\"66e2f8be\",{\"0\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1}}],[\"6b57fc0a\",{\"0\":{\"96\":1,\"97\":1,\"98\":1,\"99\":1}}],[\"6\",{\"3\":{\"55\":2,\"65\":2,\"80\":4,\"88\":2,\"156\":5,\"296\":1}}],[\"600px\",{\"3\":{\"50\":1}}],[\"60em\",{\"3\":{\"40\":2}}],[\"6237d1b1\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1}}],[\"6e32d892\",{\"0\":{\"28\":1,\"29\":1}}],[\"防止margin塌陷\",{\"3\":{\"33\":1}}],[\"浮动元素会参与高度计算\",{\"3\":{\"32\":1}}],[\"浮动元素\",{\"3\":{\"31\":1}}],[\"根域名服务器会返回一个ip地址\",{\"3\":{\"186\":1}}],[\"根元素或包含根元素的元素<html>\",{\"3\":{\"31\":1}}],[\"根据不同的设备\",{\"3\":{\"41\":1}}],[\"根据不同的设备特性\",{\"3\":{\"41\":1}}],[\"根据根元素html的font\",{\"3\":{\"26\":1}}],[\"根据当前盒子的父元素的font\",{\"3\":{\"26\":1}}],[\"根据上述代码进行分析\",{\"3\":{\"3\":1}}],[\"使其长度为targetlength\",{\"3\":{\"128\":1}}],[\"使内外元素的定位不会相互影响\",{\"3\":{\"30\":1}}],[\"使用路由参数\",{\"0\":{\"246\":1},\"2\":{\"246\":1}}],[\"使用场景\",{\"3\":{\"233\":1,\"234\":1}}],[\"使用call\",{\"3\":{\"174\":1}}],[\"使用的ref从dom中获取元素的值\",{\"3\":{\"241\":1}}],[\"使用的是addeventlistener这种方式绑定事件\",{\"3\":{\"168\":1}}],[\"使用的是onclick这种方式绑定事件\",{\"3\":{\"167\":1}}],[\"使用的什么库\",{\"3\":{\"100\":1}}],[\"使用==进行比较的时候\",{\"3\":{\"149\":1}}],[\"使用反引号\",{\"3\":{\"126\":1}}],[\"使用一个队列来记录待处理的数据\",{\"3\":{\"90\":1}}],[\"使用剩余运算符\",{\"3\":{\"64\":1}}],[\"使用省略号\",{\"3\":{\"62\":1,\"63\":1}}],[\"使用preload和prefetch\",{\"0\":{\"43\":1}}],[\"使用内联样式\",{\"0\":{\"42\":1},\"2\":{\"42\":1}}],[\"使用媒体查询\",{\"0\":{\"39\":1},\"2\":{\"39\":1}}],[\"使用abcd法则计算权重\",{\"3\":{\"23\":1}}],[\"使用定时器时\",{\"3\":{\"2\":1}}],[\"使用闭包时\",{\"3\":{\"2\":1}}],[\"使用\",{\"0\":{\"196\":1,\"245\":1},\"2\":{\"43\":1,\"196\":1,\"245\":1},\"3\":{\"2\":1,\"70\":1,\"202\":1,\"237\":2}}],[\"使用全局变量\",{\"3\":{\"1\":1}}],[\"让处于\",{\"3\":{\"30\":1}}],[\"设置一个队列\",{\"3\":{\"98\":1}}],[\"设置子节点\",{\"3\":{\"94\":1}}],[\"设置属性\",{\"3\":{\"94\":1}}],[\"设置当前处理节点\",{\"3\":{\"90\":1}}],[\"设置返回结果里面的数组\",{\"3\":{\"84\":1}}],[\"设置别名\",{\"3\":{\"63\":1}}],[\"设置默认值\",{\"3\":{\"62\":1,\"63\":1,\"64\":1}}],[\"设置打印样式\",{\"3\":{\"41\":1}}],[\"设置元素不显示\",{\"3\":{\"29\":1}}],[\"设置元素高度为\",{\"3\":{\"29\":1}}],[\"设置绝对定位\",{\"3\":{\"29\":1}}],[\"设置z\",{\"3\":{\"29\":1}}],[\"设置透明度为\",{\"3\":{\"29\":1}}],[\"设置可见性为隐藏\",{\"3\":{\"29\":1}}],[\"设置响应体\",{\"3\":{\"15\":1}}],[\"设置响应头\",{\"3\":{\"15\":3}}],[\"常见的上下文\",{\"3\":{\"214\":1}}],[\"常见的深拷贝方法\",{\"0\":{\"143\":1},\"2\":{\"143\":1}}],[\"常见的浅拷贝方法\",{\"0\":{\"141\":1},\"2\":{\"141\":1}}],[\"常见的隐藏元素的方法有以下几种\",{\"3\":{\"29\":1}}],[\"常见布局\",{\"0\":{\"49\":1},\"2\":{\"49\":1}}],[\"常用的有以下几个\",{\"3\":{\"7\":1}}],[\"z\",{\"3\":{\"28\":1,\"29\":1}}],[\"否则会导致组件陷入死循环\",{\"3\":{\"228\":1}}],[\"否则返回false\",{\"3\":{\"129\":1}}],[\"否则返回\",{\"3\":{\"129\":1}}],[\"否则就报错\",{\"3\":{\"12\":1}}],[\"否\",{\"3\":{\"28\":10}}],[\"区别\",{\"0\":{\"28\":1},\"2\":{\"28\":1}}],[\"百分比\",{\"3\":{\"26\":1}}],[\"背景类\",{\"3\":{\"24\":1}}],[\"边框\",{\"3\":{\"24\":1}}],[\"边框和外边距\",{\"3\":{\"18\":1}}],[\"外边距\",{\"3\":{\"24\":1}}],[\"垂直对齐方式\",{\"3\":{\"24\":1}}],[\"其他\",{\"0\":{\"277\":1,\"283\":1},\"2\":{\"277\":1,\"283\":1}}],[\"其他都是转为数字\",{\"3\":{\"134\":1}}],[\"其他情况都是转化为true\",{\"3\":{\"104\":1}}],[\"其他的都是可以继承的\",{\"3\":{\"24\":1}}],[\"其次我们需要对children\",{\"3\":{\"97\":1}}],[\"其实vue2和vue3的生命周期并没有太大的区别\",{\"3\":{\"292\":1}}],[\"其实我们可以设置一个loading状态\",{\"3\":{\"254\":1}}],[\"其实我们我们可以利用深拷贝这一个特质\",{\"3\":{\"89\":1}}],[\"其实就是\",{\"3\":{\"235\":1}}],[\"其实就是进行正则匹配的方法\",{\"3\":{\"131\":1}}],[\"其实对于函数组件来说\",{\"3\":{\"233\":1}}],[\"其实严格来说\",{\"3\":{\"230\":1}}],[\"其实usecallback函数和usememo函数的实现原理是一样的\",{\"3\":{\"217\":1}}],[\"其实可以将usememo理解为vue中的计算属性\",{\"3\":{\"216\":1}}],[\"其实可以将字符串看作是一种string\",{\"3\":{\"125\":1}}],[\"其实\",{\"3\":{\"155\":1}}],[\"其实日常开发中\",{\"3\":{\"28\":1}}],[\"其实只要记录一些比较特殊的不可继承属性就可以了\",{\"3\":{\"24\":1}}],[\"其中\",{\"3\":{\"8\":1}}],[\"列表可视区域的宽度\",{\"3\":{\"253\":1}}],[\"列表可视区域的高度\",{\"3\":{\"253\":1}}],[\"列表项的高度\",{\"3\":{\"253\":1}}],[\"列表项的数量\",{\"3\":{\"253\":1}}],[\"列表项标记的图像\",{\"3\":{\"24\":1}}],[\"列表项标记的位置\",{\"3\":{\"24\":1}}],[\"列表项标记的类型\",{\"3\":{\"24\":1}}],[\"列表不是很大\",{\"3\":{\"163\":1}}],[\"列表\",{\"3\":{\"98\":1}}],[\"列表类\",{\"3\":{\"24\":1}}],[\"表单元素的值也会跟着变化\",{\"3\":{\"240\":1}}],[\"表单元素的值被\",{\"3\":{\"240\":1,\"241\":1}}],[\"表明\",{\"3\":{\"48\":4}}],[\"表示接下来有\",{\"3\":{\"295\":1,\"296\":1}}],[\"表示当前元素的子元素\",{\"3\":{\"201\":1,\"202\":1}}],[\"表示元素的属性\",{\"3\":{\"201\":1,\"202\":1}}],[\"表示元素的类型\",{\"3\":{\"201\":1,\"202\":1}}],[\"表示一个空对象\",{\"3\":{\"148\":1}}],[\"表示是否找到了元素\",{\"3\":{\"120\":1}}],[\"表示只匹配媒体类型的情况\",{\"3\":{\"40\":1}}],[\"表示不匹配媒体类型的情况\",{\"3\":{\"40\":1}}],[\"表示的是资源的唯一标识\",{\"3\":{\"8\":1}}],[\"表示的是时间\",{\"3\":{\"8\":1}}],[\"表格边框是否合并\",{\"3\":{\"24\":1}}],[\"表格的布局方式\",{\"3\":{\"24\":1}}],[\"表格标题的位置\",{\"3\":{\"24\":1}}],[\"表格类\",{\"3\":{\"24\":1}}],[\"元素本身所控制\",{\"3\":{\"241\":2}}],[\"元素本身来管理的组件\",{\"3\":{\"241\":1}}],[\"元素的钩子\",{\"3\":{\"223\":1}}],[\"元素的\",{\"3\":{\"218\":1}}],[\"元素的类型\",{\"3\":{\"201\":1}}],[\"元素转化为\",{\"0\":{\"203\":1},\"2\":{\"203\":1}}],[\"元素\",{\"0\":{\"200\":1},\"2\":{\"200\":1},\"3\":{\"198\":1,\"201\":4,\"202\":1,\"203\":5,\"223\":2,\"224\":2,\"228\":1}}],[\"元素不占据空间\",{\"3\":{\"29\":2}}],[\"元素可见\",{\"3\":{\"28\":1}}],[\"元素可见性\",{\"3\":{\"24\":1}}],[\"元素可点击\",{\"3\":{\"28\":1}}],[\"元素占据空间\",{\"3\":{\"28\":1}}],[\"元素是否可见\",{\"3\":{\"24\":1}}],[\"元素选择器\",{\"3\":{\"22\":1,\"23\":1}}],[\"继续执行宏任务队列中的任务\",{\"3\":{\"156\":1}}],[\"继续使用缓存\",{\"3\":{\"9\":1}}],[\"继承方法\",{\"3\":{\"175\":1}}],[\"继承父类\",{\"3\":{\"174\":1}}],[\"继承=＞call\",{\"3\":{\"100\":1}}],[\"继承\",{\"3\":{\"71\":1}}],[\"继承属性\",{\"0\":{\"24\":1},\"2\":{\"24\":1},\"3\":{\"175\":1}}],[\"updated\",{\"3\":{\"275\":1,\"281\":1}}],[\"updating\",{\"3\":{\"220\":1}}],[\"u>\",{\"3\":{\"259\":1}}],[\"udp提供无连接的\",{\"3\":{\"179\":1}}],[\"udp等\",{\"3\":{\"179\":1}}],[\"ui\",{\"3\":{\"155\":1}}],[\"unmounted\",{\"3\":{\"282\":1}}],[\"unmounted生命周期\",{\"3\":{\"269\":1}}],[\"unmounting\",{\"3\":{\"220\":1}}],[\"unmount\",{\"3\":{\"196\":1}}],[\"unshift\",{\"3\":{\"118\":1}}],[\"undefined转化为nan\",{\"3\":{\"150\":1}}],[\"undefined转化为数字是nan\",{\"3\":{\"106\":1}}],[\"undefined和null都会转换为false\",{\"3\":{\"149\":1}}],[\"undefined和null的区别\",{\"3\":{\"106\":1}}],[\"undefined的类型是undefined\",{\"3\":{\"106\":1}}],[\"undefined是变量声明\",{\"3\":{\"106\":1}}],[\"undefined是一个变量\",{\"3\":{\"106\":1}}],[\"undefined是一个全局变量\",{\"3\":{\"106\":1,\"147\":1}}],[\"undefined会返回undefined\",{\"3\":{\"106\":1}}],[\"undefined\",{\"0\":{\"106\":1,\"147\":1,\"149\":1,\"150\":1},\"2\":{\"106\":1,\"147\":1,\"149\":1,\"150\":1},\"3\":{\"56\":1,\"59\":1,\"62\":1,\"104\":1,\"106\":1,\"134\":1,\"136\":1,\"137\":3,\"138\":2,\"147\":2,\"149\":4,\"150\":1}}],[\"useparams\",{\"3\":{\"246\":2}}],[\"usecallback用来缓存因变量函数\",{\"3\":{\"217\":1}}],[\"usecallback\",{\"2\":{\"217\":1},\"3\":{\"217\":2}}],[\"usecallback函数可以让我们在函数组件中缓存一些函数\",{\"3\":{\"217\":1}}],[\"usecallback函数\",{\"0\":{\"217\":1}}],[\"usecontext可以跨越多层组件传递参数\",{\"3\":{\"214\":1}}],[\"usecontext进行传递参数和props父子传参的区别\",{\"3\":{\"214\":1}}],[\"usecontext\",{\"2\":{\"214\":1},\"3\":{\"214\":2,\"237\":1}}],[\"usecontext函数可以让我们在函数组件中使用react的上下文对象\",{\"3\":{\"214\":1}}],[\"usecontext函数\",{\"0\":{\"214\":1}}],[\"usememo用来缓存因变量\",{\"3\":{\"216\":1}}],[\"usememo\",{\"2\":{\"216\":1},\"3\":{\"216\":2}}],[\"usememo函数可以让我们在函数组件中缓存一些数据\",{\"3\":{\"216\":1}}],[\"usememo函数\",{\"0\":{\"216\":1}}],[\"useref\",{\"2\":{\"218\":1},\"3\":{\"218\":5,\"241\":1,\"245\":2,\"246\":2}}],[\"useref函数它会返回一个refobj对象\",{\"3\":{\"218\":1}}],[\"useref函数可以让我们在函数组件创建引用对象\",{\"3\":{\"218\":1}}],[\"useref函数\",{\"0\":{\"218\":1}}],[\"usereducer\",{\"2\":{\"215\":1},\"3\":{\"215\":2}}],[\"usereducer函数可以让我们在函数组件中使用redux的reducer函数\",{\"3\":{\"215\":1}}],[\"usereducer函数\",{\"0\":{\"215\":1}}],[\"user=admin\",{\"3\":{\"14\":1}}],[\"usestate\",{\"2\":{\"212\":1},\"3\":{\"212\":2,\"213\":2,\"214\":2,\"216\":3,\"217\":3,\"218\":4,\"230\":2,\"234\":1,\"235\":1,\"240\":1,\"254\":3}}],[\"usestate函数返回一个数组\",{\"3\":{\"212\":1}}],[\"usestate函数接收一个参数\",{\"3\":{\"212\":1}}],[\"usestate函数可以让我们在函数组件中使用状态对象\",{\"3\":{\"212\":1}}],[\"usestate函数\",{\"0\":{\"212\":1}}],[\"useeffect会被执行两次\",{\"3\":{\"213\":1}}],[\"useeffect函数接收一个函数作为参数\",{\"3\":{\"213\":1}}],[\"useeffect函数可以让我们在函数组件中使用生命周期钩子\",{\"3\":{\"213\":1}}],[\"useeffect函数\",{\"0\":{\"213\":1}}],[\"useeffect其实就可以用来模拟componentdidmount\",{\"3\":{\"210\":1}}],[\"useeffect\",{\"2\":{\"213\":1},\"3\":{\"100\":1,\"213\":2,\"230\":3,\"245\":3,\"246\":3,\"254\":2}}],[\"u\",{\"3\":{\"65\":1,\"259\":1}}],[\"ul>\",{\"3\":{\"163\":1,\"254\":1}}],[\"ul\",{\"3\":{\"23\":1,\"163\":4}}],[\"grade\",{\"3\":{\"174\":9,\"175\":6}}],[\"grow\",{\"3\":{\"48\":2}}],[\"g\",{\"3\":{\"62\":2}}],[\"global\",{\"3\":{\"23\":1}}],[\"getitem\",{\"3\":{\"245\":2,\"246\":1}}],[\"getsnapshotbeforeupdate\",{\"3\":{\"228\":1}}],[\"getderivedstatefromprops\",{\"3\":{\"227\":1}}],[\"getelementbyid\",{\"3\":{\"163\":1,\"167\":4,\"168\":4}}],[\"get\",{\"3\":{\"14\":1,\"15\":1}}],[\"getage\",{\"3\":{\"4\":4}}],[\"例子\",{\"0\":{\"83\":1},\"2\":{\"83\":1},\"3\":{\"23\":1,\"284\":1}}],[\"例如获取dom\",{\"3\":{\"274\":1}}],[\"例如vue\",{\"3\":{\"273\":1}}],[\"例如tcp\",{\"3\":{\"179\":1}}],[\"例如http\",{\"3\":{\"178\":1}}],[\"例如\",{\"3\":{\"12\":1,\"15\":1}}],[\"权重为1\",{\"3\":{\"23\":1}}],[\"权重为10\",{\"3\":{\"23\":1}}],[\"权重为100\",{\"3\":{\"23\":1}}],[\"权重为1000\",{\"3\":{\"23\":1}}],[\"权重越高\",{\"3\":{\"23\":1}}],[\"代码逻辑\",{\"3\":{\"246\":1}}],[\"代码分析\",{\"3\":{\"156\":4}}],[\"代码示例\",{\"0\":{\"156\":1},\"2\":{\"156\":1}}],[\"代码实现\",{\"0\":{\"84\":1,\"90\":1,\"98\":1},\"2\":{\"84\":1,\"90\":1,\"98\":1},\"3\":{\"140\":1,\"142\":1}}],[\"代码会变为\",{\"3\":{\"4\":1}}],[\"代表元素选择器\",{\"3\":{\"23\":1}}],[\"代表类选择器\",{\"3\":{\"23\":1}}],[\"代表\",{\"3\":{\"23\":1}}],[\"代表内联样式\",{\"3\":{\"23\":1}}],[\"优先级越高\",{\"3\":{\"23\":1,\"203\":1}}],[\"优先级\",{\"0\":{\"23\":1},\"2\":{\"23\":1}}],[\"优点\",{\"3\":{\"14\":1}}],[\"他出来的长度是正确的\",{\"3\":{\"296\":1}}],[\"他们的生命周期函数会增加两个activated和deactivated\",{\"3\":{\"287\":1}}],[\"他们的参数\",{\"3\":{\"80\":1}}],[\"他和react16\",{\"3\":{\"227\":1}}],[\"他在第一次渲染的时候被调用\",{\"3\":{\"227\":1}}],[\"他才会重新创建\",{\"3\":{\"217\":1}}],[\"他才会重新计算\",{\"3\":{\"216\":1}}],[\"他是一个\",{\"3\":{\"201\":1}}],[\"他返回的是一个还是多个\",{\"3\":{\"100\":1}}],[\"他复制的就不是地址吗\",{\"3\":{\"100\":1}}],[\"他会选择所有的div下的紧邻的p元素\",{\"3\":{\"22\":1}}],[\"他会选择所有的div下的p元素\",{\"3\":{\"22\":1}}],[\"他的变量还在内存中被fn2引用着\",{\"3\":{\"3\":1}}],[\"群组选择器\",{\"3\":{\"22\":1}}],[\">v\",{\"3\":{\"265\":2}}],[\">row\",{\"3\":{\"253\":1}}],[\">获取<\",{\"3\":{\"241\":1}}],[\">修改父组件的name<\",{\"3\":{\"234\":3,\"235\":1}}],[\">hello\",{\"3\":{\"233\":1}}],[\">停止<\",{\"3\":{\"218\":1}}],[\">开始<\",{\"3\":{\"218\":1}}],[\">点击<\",{\"3\":{\"217\":1,\"230\":1}}],[\">改名<\",{\"3\":{\"216\":1,\"217\":1}}],[\">+1<\",{\"3\":{\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1}}],[\"><\",{\"3\":{\"167\":2,\"168\":2}}],[\">=\",{\"3\":{\"40\":2,\"134\":1,\"250\":1}}],[\">\",{\"3\":{\"22\":1,\"23\":3,\"39\":7,\"43\":4,\"65\":1,\"74\":1,\"77\":7,\"92\":1,\"134\":1,\"160\":3,\"162\":3,\"163\":1,\"167\":2,\"168\":2,\"200\":1,\"208\":1,\"214\":2,\"215\":1,\"218\":2,\"234\":1,\"235\":2,\"237\":2,\"240\":1,\"241\":1,\"245\":1,\"246\":1,\"251\":2,\"253\":1}}],[\"通配符选择器\",{\"3\":{\"22\":1}}],[\"通过回调函数的方式\",{\"3\":{\"234\":1}}],[\"通过调用super可以让子类访问到父类的方法和属性\",{\"3\":{\"175\":1}}],[\"通过new关键字创建一个promise对象\",{\"3\":{\"74\":1}}],[\"通过\",{\"0\":{\"14\":1},\"2\":{\"14\":1}}],[\"通过apply将参数传递给func\",{\"3\":{\"4\":1}}],[\"通过另一个函数访问这个函数的局部变量\",{\"3\":{\"3\":1}}],[\"伪类选择器\",{\"3\":{\"22\":1,\"23\":1}}],[\"伪元素选择器\",{\"3\":{\"22\":1,\"23\":1}}],[\"类组件可以使用this关键字\",{\"3\":{\"210\":1}}],[\"类组件有生命周期钩子\",{\"3\":{\"210\":1}}],[\"类组件有自己的状态\",{\"3\":{\"210\":1}}],[\"类组件具有自己的状态\",{\"3\":{\"208\":1}}],[\"类组件时继承react\",{\"3\":{\"208\":1}}],[\"类组件使用class\",{\"3\":{\"208\":1}}],[\"类组件\",{\"0\":{\"208\":1},\"2\":{\"208\":1}}],[\"类组件和函数组件的区别\",{\"0\":{\"210\":1},\"2\":{\"210\":1}}],[\"类组件和函数组件\",{\"0\":{\"207\":1},\"2\":{\"207\":1}}],[\"类的继承\",{\"0\":{\"71\":1},\"1\":{\"174\":1,\"175\":1,\"176\":1},\"2\":{\"71\":1}}],[\"类\",{\"0\":{\"66\":1},\"2\":{\"66\":1}}],[\"类型的值\",{\"3\":{\"201\":1}}],[\"类型转化机制\",{\"1\":{\"133\":1,\"134\":1,\"135\":1}}],[\"类型为对象\",{\"3\":{\"93\":1}}],[\"类型为数组\",{\"3\":{\"93\":1}}],[\"类型\",{\"3\":{\"62\":1,\"63\":1}}],[\"类选择器\",{\"3\":{\"22\":2}}],[\"类似的像这种层层嵌套的\",{\"3\":{\"97\":1}}],[\"类似\",{\"3\":{\"22\":6}}],[\"类似div\",{\"3\":{\"22\":5}}],[\"普通元素选择器\",{\"3\":{\"22\":1}}],[\"怪异盒模型\",{\"0\":{\"20\":1},\"2\":{\"20\":1}}],[\"盒子类\",{\"3\":{\"24\":1}}],[\"盒子就是多大\",{\"3\":{\"20\":1}}],[\"盒子的总高度是height+margin\",{\"3\":{\"20\":1}}],[\"盒子的总高度是height\",{\"3\":{\"19\":1}}],[\"盒子的总宽度是width+margin\",{\"3\":{\"20\":1}}],[\"盒子的总宽度是width\",{\"3\":{\"19\":1}}],[\"盒子实际宽高\",{\"3\":{\"19\":1}}],[\"盒模型图例\",{\"3\":{\"20\":1}}],[\"盒模型是一个矩形的盒子\",{\"3\":{\"18\":1}}],[\"盒模型\",{\"0\":{\"18\":1},\"2\":{\"18\":1},\"3\":{\"18\":2}}],[\"标准事件模型就是指在ie9及其以上版本中使用的事件模型\",{\"3\":{\"168\":1}}],[\"标准事件模型\",{\"0\":{\"168\":1},\"2\":{\"168\":1},\"3\":{\"166\":1}}],[\"标准盒模型其实就是width就是内容的宽度\",{\"3\":{\"19\":1}}],[\"标准盒模型\",{\"0\":{\"19\":1},\"2\":{\"19\":1},\"3\":{\"18\":2}}],[\"标准盒模型和\",{\"3\":{\"18\":1}}],[\"标识\",{\"3\":{\"60\":1}}],[\"标签中\",{\"2\":{\"38\":1}}],[\"标签\",{\"3\":{\"14\":1}}],[\"中哪些数据结构具有可迭代性\",{\"3\":{\"65\":1}}],[\"中\",{\"0\":{\"201\":1,\"202\":1},\"2\":{\"201\":1,\"202\":1},\"3\":{\"65\":1,\"202\":3,\"227\":2}}],[\"中间自适应\",{\"3\":{\"50\":1}}],[\"中有一些属性是可以继承的\",{\"3\":{\"24\":1}}],[\"中的\",{\"2\":{\"286\":1},\"3\":{\"202\":1}}],[\"中的优先级是根据选择器的权重来决定的\",{\"3\":{\"23\":1}}],[\"中的变量\",{\"3\":{\"3\":1}}],[\"中选择器主要分为以下几种\",{\"3\":{\"22\":1}}],[\"中盒模型分为两种\",{\"3\":{\"18\":1}}],[\"内部的元素与外部的元素相互隔离\",{\"3\":{\"30\":1}}],[\"内联样式\",{\"3\":{\"23\":1}}],[\"内边距\",{\"3\":{\"18\":1,\"24\":1}}],[\"内存缓存的优点是读取速度快\",{\"3\":{\"7\":1}}],[\"内存缓存和硬盘缓存\",{\"3\":{\"7\":1}}],[\"内存泄漏\",{\"1\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1}}],[\"反向代理的原理是\",{\"3\":{\"16\":1}}],[\"反向代理\",{\"0\":{\"16\":1},\"2\":{\"16\":1}}],[\"router\",{\"3\":{\"246\":1,\"273\":1}}],[\"runtime\",{\"3\":{\"202\":2}}],[\"running\",{\"3\":{\"15\":1}}],[\"race\",{\"3\":{\"77\":4}}],[\"random\",{\"3\":{\"74\":1,\"77\":7}}],[\"r\",{\"3\":{\"65\":1}}],[\"right\",{\"3\":{\"50\":1}}],[\"readline\",{\"3\":{\"295\":2}}],[\"react组件通信方式\",{\"1\":{\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1}}],[\"react生命周期\",{\"1\":{\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1}}],[\"react官网也表达\",{\"3\":{\"218\":1}}],[\"react18以后\",{\"3\":{\"213\":1}}],[\"react17\",{\"0\":{\"202\":1},\"2\":{\"202\":1},\"3\":{\"202\":2}}],[\"react16\",{\"0\":{\"201\":1},\"2\":{\"201\":1},\"3\":{\"200\":1,\"202\":1,\"225\":2}}],[\"reactelement\",{\"3\":{\"201\":4,\"202\":1}}],[\"react的render函数\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"react\",{\"0\":{\"200\":1,\"203\":1,\"206\":1},\"1\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1},\"2\":{\"200\":1,\"203\":1,\"206\":1,\"286\":1},\"3\":{\"65\":1,\"198\":2,\"201\":8,\"202\":10,\"208\":3,\"209\":2,\"212\":2,\"213\":2,\"214\":4,\"215\":2,\"216\":2,\"217\":2,\"218\":4,\"230\":2,\"233\":2,\"234\":4,\"235\":6,\"237\":3,\"240\":6,\"241\":1,\"245\":2,\"246\":3,\"251\":3,\"253\":3,\"254\":2}}],[\"render阶段负责计算任务\",{\"3\":{\"220\":1}}],[\"render阶段和commit阶段\",{\"3\":{\"220\":1}}],[\"render阶段和pre\",{\"3\":{\"220\":1}}],[\"render阶段\",{\"3\":{\"220\":1}}],[\"render\",{\"3\":{\"208\":1,\"223\":1,\"227\":1}}],[\"renderer会将这个fiber转化成dom\",{\"3\":{\"204\":1}}],[\"rendering等等\",{\"3\":{\"155\":1}}],[\"ref=\",{\"3\":{\"218\":1,\"241\":1,\"245\":1,\"246\":1}}],[\"refobject\",{\"3\":{\"203\":1}}],[\"ref\",{\"3\":{\"201\":5,\"203\":1,\"218\":2}}],[\"referenceerror\",{\"3\":{\"56\":1}}],[\"replace\",{\"3\":{\"131\":1,\"246\":1}}],[\"repeat\",{\"3\":{\"128\":1}}],[\"reverse\",{\"3\":{\"121\":1}}],[\"regexp\",{\"0\":{\"113\":1},\"2\":{\"113\":1},\"3\":{\"142\":1}}],[\"rejected\",{\"3\":{\"75\":1}}],[\"reject\",{\"3\":{\"74\":3,\"77\":22,\"84\":2,\"156\":1}}],[\"redux\",{\"3\":{\"238\":1}}],[\"reduce\",{\"3\":{\"122\":1}}],[\"red\",{\"3\":{\"50\":1}}],[\"rel=\",{\"3\":{\"39\":3,\"43\":2}}],[\"rem区别\",{\"3\":{\"100\":1}}],[\"rem\",{\"3\":{\"26\":1}}],[\"req\",{\"3\":{\"15\":1}}],[\"requested\",{\"3\":{\"15\":1}}],[\"request\",{\"3\":{\"15\":1}}],[\"require\",{\"3\":{\"15\":1}}],[\"res=>\",{\"3\":{\"84\":1}}],[\"result\",{\"3\":{\"84\":5,\"85\":2,\"88\":1,\"98\":3}}],[\"resolved\",{\"3\":{\"75\":1}}],[\"resolve\",{\"3\":{\"74\":3,\"77\":24,\"84\":2,\"156\":15}}],[\"rest\",{\"3\":{\"63\":2,\"64\":2,\"65\":1}}],[\"res\",{\"3\":{\"14\":2,\"15\":6,\"84\":1,\"90\":3,\"156\":2}}],[\"returns\",{\"3\":{\"84\":1,\"98\":1}}],[\"return\",{\"3\":{\"3\":2,\"4\":3,\"65\":1,\"84\":1,\"90\":1,\"94\":1,\"98\":2,\"162\":1,\"201\":1,\"203\":2,\"208\":1,\"209\":1,\"212\":1,\"213\":2,\"214\":2,\"215\":4,\"216\":2,\"217\":1,\"218\":2,\"230\":2,\"233\":2,\"234\":2,\"235\":3,\"240\":1,\"241\":1,\"245\":2,\"246\":2,\"251\":1,\"253\":1,\"254\":1,\"258\":1,\"261\":1,\"262\":1,\"263\":1}}],[\"x\",{\"3\":{\"15\":1}}],[\"xss\",{\"3\":{\"14\":1}}],[\"允许单个项目有与其他项目不一样的对齐方式\",{\"3\":{\"48\":1}}],[\"允许前端获取哪个请求头\",{\"3\":{\"15\":1}}],[\"允许跨域携带cookie\",{\"3\":{\"15\":1}}],[\"允许跨域的请求方式\",{\"3\":{\"15\":1}}],[\"允许跨域\",{\"3\":{\"15\":1}}],[\"告诉浏览器允许这种请求\",{\"3\":{\"15\":1}}],[\"攻击\",{\"3\":{\"14\":1}}],[\"可靠的数据传输服务\",{\"3\":{\"179\":1}}],[\"可能会出现问题\",{\"3\":{\"274\":1}}],[\"可能会导致组件一直被重新渲染\",{\"3\":{\"223\":1}}],[\"可能会遭受\",{\"3\":{\"14\":1}}],[\"可能attrs和children没有\",{\"3\":{\"94\":1}}],[\"可变性\",{\"0\":{\"58\":1},\"2\":{\"58\":1}}],[\"可被改变\",{\"3\":{\"55\":1}}],[\"可覆盖align\",{\"3\":{\"48\":1}}],[\"可以通过include和exclude属性来指定缓存哪些组件\",{\"3\":{\"284\":1}}],[\"可以通过作用域链来访问属性和方法和e事件对象\",{\"3\":{\"163\":1}}],[\"可以使被包含的组件保留状态\",{\"3\":{\"284\":1}}],[\"可以使用watch监听数据的变化\",{\"3\":{\"275\":1,\"281\":1}}],[\"可以使用第三方库来操作这个\",{\"3\":{\"224\":1}}],[\"可以使用useref\",{\"3\":{\"218\":1}}],[\"可以使用super调用父类的构造函数\",{\"3\":{\"175\":1}}],[\"可以使用for\",{\"3\":{\"84\":1}}],[\"可以使用flex\",{\"3\":{\"48\":2}}],[\"可以使用\",{\"3\":{\"80\":1}}],[\"可以使用解构赋值\",{\"3\":{\"65\":1}}],[\"可以使用扩展运算符来传递\",{\"3\":{\"65\":1}}],[\"可以使用剩余运算符\",{\"3\":{\"62\":1,\"63\":1}}],[\"可以使用闭包来延迟函数的执行\",{\"3\":{\"4\":1}}],[\"可以让我们在不使用class组件的情况下使用生命周期钩子\",{\"3\":{\"229\":1,\"230\":1}}],[\"可以用来监听元素是否进入可视区域\",{\"3\":{\"251\":1}}],[\"可以用来引用任何类型的对象\",{\"3\":{\"218\":1}}],[\"可以用来指定资源的加载时机\",{\"3\":{\"43\":1}}],[\"可以在这个钩子中进一步地更改状态\",{\"3\":{\"275\":1,\"281\":1}}],[\"可以在mounted中进行\",{\"3\":{\"273\":1}}],[\"可以在constructor中初始化state\",{\"3\":{\"208\":1}}],[\"可以在里面插入样式\",{\"3\":{\"22\":1}}],[\"可以在里面插入内容\",{\"3\":{\"22\":1}}],[\"可以是原生的\",{\"3\":{\"201\":2,\"202\":1}}],[\"可以是一个值\",{\"3\":{\"77\":1}}],[\"可以生成\",{\"3\":{\"198\":1}}],[\"可以根据ip地址的不同\",{\"3\":{\"181\":1}}],[\"可以根据不同的特性来加载不同的css\",{\"3\":{\"40\":1}}],[\"可以借助子网掩码就可以计算出网络号和主机号\",{\"3\":{\"181\":1}}],[\"可以这么说\",{\"3\":{\"160\":1}}],[\"可以传入一个比较函数\",{\"3\":{\"121\":1}}],[\"可以认为\",{\"3\":{\"69\":1}}],[\"可以给变量设置别名\",{\"3\":{\"63\":1}}],[\"可以给变量设置默认值\",{\"3\":{\"62\":1,\"63\":1}}],[\"可以跳过某些元素\",{\"3\":{\"62\":2}}],[\"可以实现更加灵活的布局方式\",{\"3\":{\"45\":1}}],[\"可以确保css在dom树生成之前就加载完毕\",{\"3\":{\"38\":1}}],[\"可以设置access\",{\"3\":{\"15\":1}}],[\"可以访问到\",{\"3\":{\"3\":1}}],[\"缺点\",{\"3\":{\"14\":1}}],[\"支持浏览器与服务器双向通信\",{\"3\":{\"14\":1}}],[\"兼容性好\",{\"3\":{\"14\":1}}],[\"格式返回给客户端\",{\"3\":{\"14\":1}}],[\"然后继续调用这三个函数\",{\"3\":{\"285\":1}}],[\"然后\",{\"3\":{\"246\":1}}],[\"然后使用useref来获取div元素的引用\",{\"3\":{\"246\":1}}],[\"然后利用useeffect来监听滚动事件\",{\"3\":{\"246\":1}}],[\"然后跳转到该位置\",{\"3\":{\"245\":1,\"246\":2}}],[\"然后在watch中修改数据\",{\"3\":{\"275\":1,\"281\":1}}],[\"然后在父组件内部修改参数\",{\"3\":{\"234\":1}}],[\"然后在componentdidupdate中获取到这个方法的返回值\",{\"3\":{\"228\":1}}],[\"然后在接收端再将其组装起来\",{\"3\":{\"187\":1}}],[\"然后将数据包转发到下一个路由器\",{\"3\":{\"192\":1}}],[\"然后将其存储到mac地址表中\",{\"3\":{\"191\":1}}],[\"然后将元素移除屏幕\",{\"3\":{\"29\":1}}],[\"然后通过网线发送出去\",{\"3\":{\"190\":1}}],[\"然后目的主机会向发送方回复mac地址\",{\"3\":{\"189\":1}}],[\"然后发送到数据链路层\",{\"3\":{\"188\":1}}],[\"然后从上往下传输到传输层\",{\"3\":{\"186\":1}}],[\"然后执行事件处理程序\",{\"3\":{\"167\":1,\"168\":1}}],[\"然后执行\",{\"3\":{\"165\":1}}],[\"然后依次处理队列中的数据\",{\"3\":{\"90\":1,\"98\":1}}],[\"然后再通过父组件来传递参数\",{\"3\":{\"236\":1}}],[\"然后再通过物理层进行传输\",{\"3\":{\"182\":1}}],[\"然后再发送到物理层\",{\"3\":{\"189\":1}}],[\"然后再发送请求\",{\"3\":{\"185\":1}}],[\"然后再向该ip地址对应的服务器发送请求\",{\"3\":{\"186\":2}}],[\"然后再传输到传输层\",{\"3\":{\"180\":1}}],[\"然后再执行宏任务队列中的任务\",{\"3\":{\"155\":1}}],[\"然后再进行比较\",{\"3\":{\"134\":1}}],[\"然后再去组装他们的关系\",{\"3\":{\"89\":1}}],[\"然后再将结果放在\",{\"3\":{\"85\":1}}],[\"然后再将结果放在result里面\",{\"3\":{\"84\":1}}],[\"然后再将结果返回给浏览器\",{\"3\":{\"16\":1}}],[\"然后就会去调用then方法\",{\"3\":{\"74\":1}}],[\"然后就可以拿到数据\",{\"3\":{\"14\":1}}],[\"然后对其中的变量进行赋值\",{\"3\":{\"61\":1}}],[\"然后以\",{\"3\":{\"14\":1}}],[\"然后做一些事情\",{\"3\":{\"14\":1}}],[\"也会导致父组件的可读性变差\",{\"3\":{\"235\":1}}],[\"也会在组件卸载之前执行\",{\"3\":{\"213\":1}}],[\"也会在组件更新之后执行\",{\"3\":{\"213\":1}}],[\"也有\",{\"3\":{\"171\":1}}],[\"也就是在组件已经被渲染到页面之后执行\",{\"3\":{\"223\":1}}],[\"也就是在组件即将被渲染到页面之前执行\",{\"3\":{\"223\":1}}],[\"也就是组件从生成到消亡的过程\",{\"3\":{\"220\":1}}],[\"也就是0和1\",{\"3\":{\"183\":1}}],[\"也就是子节点进行遍历\",{\"3\":{\"97\":1}}],[\"也就是说react17之后只有两个阶段\",{\"3\":{\"220\":1}}],[\"也就是说在什么范围内可以访问到变量和函数\",{\"3\":{\"55\":1}}],[\"也就是说\",{\"3\":{\"14\":1,\"152\":1,\"179\":1,\"190\":1,\"224\":4,\"225\":1,\"227\":1,\"228\":1,\"229\":1}}],[\"也可以在这个钩子里面根据preprops和prestate来做一些性能优化\",{\"3\":{\"228\":1}}],[\"也可以是自定义的组件\",{\"3\":{\"201\":2,\"202\":1}}],[\"也可以是一个promise对象\",{\"3\":{\"77\":1}}],[\"也可以用来定义多行字符串\",{\"3\":{\"60\":1}}],[\"也可以配置vite\",{\"3\":{\"16\":1}}],[\"也可以发送任何请求\",{\"3\":{\"16\":1}}],[\"也不能确定数据的顺序\",{\"3\":{\"179\":1}}],[\"也不能确定数据是否乱序\",{\"3\":{\"179\":1}}],[\"也不需要额外的运算符\",{\"3\":{\"80\":1}}],[\"也不放大\",{\"3\":{\"48\":1}}],[\"也不会返回结果\",{\"3\":{\"12\":1}}],[\"也不使用协商缓存\",{\"3\":{\"7\":1}}],[\"回调执行函数\",{\"3\":{\"14\":1}}],[\"h1>\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3,\"217\":2,\"218\":1,\"245\":1,\"246\":1}}],[\"hook\",{\"2\":{\"230\":1}}],[\"hook函数并不是生命周期钩子\",{\"3\":{\"230\":1}}],[\"hook函数是react16\",{\"3\":{\"230\":1}}],[\"hook函数\",{\"0\":{\"230\":1}}],[\"hooks\",{\"0\":{\"206\":1,\"211\":1},\"1\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1},\"2\":{\"206\":1,\"211\":1}}],[\"hover\",{\"3\":{\"22\":1}}],[\"handlestop\",{\"3\":{\"218\":2}}],[\"handlestart\",{\"3\":{\"218\":2}}],[\"handleclick\",{\"3\":{\"217\":4,\"241\":2}}],[\"handle\",{\"3\":{\"203\":1}}],[\"hi\",{\"3\":{\"175\":1}}],[\"hidden\",{\"3\":{\"28\":1,\"29\":1}}],[\"h\",{\"3\":{\"62\":1}}],[\"href=\",{\"3\":{\"39\":3,\"43\":2}}],[\"height=\",{\"3\":{\"253\":1}}],[\"height等\",{\"3\":{\"40\":1}}],[\"height\",{\"3\":{\"19\":1,\"20\":1,\"24\":1,\"28\":1,\"29\":1,\"50\":3}}],[\"hello>\",{\"3\":{\"200\":1}}],[\"hello\",{\"3\":{\"15\":1,\"175\":2,\"201\":3,\"202\":3,\"233\":1}}],[\"headers\",{\"3\":{\"15\":1}}],[\"head\",{\"2\":{\"38\":1},\"3\":{\"14\":1}}],[\"html里面的meta有什么作用\",{\"3\":{\"100\":1}}],[\"html5\",{\"3\":{\"14\":1}}],[\"html\",{\"3\":{\"12\":5}}],[\"http基本概念\",{\"1\":{\"177\":1}}],[\"http和https\",{\"3\":{\"100\":1}}],[\"https\",{\"3\":{\"12\":1}}],[\"http\",{\"3\":{\"12\":4,\"14\":1,\"15\":4}}],[\"8之后新增的一个函数\",{\"3\":{\"230\":1}}],[\"8之后\",{\"3\":{\"229\":1}}],[\"8\",{\"3\":{\"55\":2,\"156\":4,\"296\":1}}],[\"8080\",{\"3\":{\"14\":1}}],[\"81\",{\"3\":{\"12\":1}}],[\"就说明滚动条滚动到底部了\",{\"3\":{\"250\":1}}],[\"就需要用箭头函数包裹\",{\"3\":{\"234\":1}}],[\"就发送请求到dns服务器\",{\"3\":{\"186\":1}}],[\"就发送请求到服务器\",{\"3\":{\"185\":1}}],[\"就直接从缓存中获取\",{\"3\":{\"186\":1}}],[\"就直接从缓存中获取资源\",{\"3\":{\"185\":1}}],[\"就直接返回\",{\"3\":{\"142\":1}}],[\"就形成了原型链\",{\"3\":{\"171\":1}}],[\"就可以得到滚动条滚动到底部时\",{\"3\":{\"250\":1}}],[\"就可以实现跨组件传递参数\",{\"3\":{\"237\":1}}],[\"就可以销毁`loading`组件了\",{\"3\":{\"196\":1}}],[\"就可以进行数据传输了\",{\"3\":{\"187\":1}}],[\"就可以获取到目的网络的ip地址\",{\"3\":{\"186\":1}}],[\"就可以管理某一类型的所有事件\",{\"3\":{\"163\":1}}],[\"就可以确保css能够正确的渲染dom树\",{\"3\":{\"36\":1}}],[\"就返回true\",{\"3\":{\"122\":1}}],[\"就是滚动条滚动的距离\",{\"3\":{\"250\":1}}],[\"就是这个表单数据不受react的state控制\",{\"3\":{\"241\":1}}],[\"就是将return到的对象替换当前的state\",{\"3\":{\"227\":1}}],[\"就是将他反过来\",{\"3\":{\"89\":1}}],[\"就是要找到目标地址的子网\",{\"3\":{\"181\":1}}],[\"就是异步执行\",{\"3\":{\"152\":1}}],[\"就是nan\",{\"3\":{\"150\":1}}],[\"就是0\",{\"3\":{\"150\":1}}],[\"就是对于date\",{\"3\":{\"142\":1}}],[\"就是对于父元素的属性\",{\"3\":{\"47\":1}}],[\"就是循环引用的问题\",{\"3\":{\"142\":1}}],[\"就是它只管一层\",{\"3\":{\"140\":1}}],[\"就是如果两个值类型不同\",{\"3\":{\"136\":1}}],[\"就是构造函数\",{\"3\":{\"69\":1}}],[\"就是\",{\"3\":{\"14\":1,\"77\":1}}],[\"就会出现\",{\"3\":{\"165\":1}}],[\"就会从父级作用域中查找\",{\"3\":{\"160\":1}}],[\"就会从父级作用域查找\",{\"3\":{\"159\":1}}],[\"就会报错\",{\"3\":{\"159\":1,\"160\":1}}],[\"就会去读取任务队列\",{\"3\":{\"154\":1}}],[\"就会造成死循环\",{\"3\":{\"142\":1}}],[\"就会影响到另一个对象\",{\"3\":{\"140\":1}}],[\"就会变成rejected\",{\"3\":{\"83\":1}}],[\"就会停止dom树的生成\",{\"3\":{\"36\":1}}],[\"就会生成dom树\",{\"3\":{\"36\":1}}],[\"就会在响应头中加入access\",{\"3\":{\"15\":1}}],[\"就会将要返回的数据包裹在这个函数里面\",{\"3\":{\"14\":1}}],[\"就会返回200\",{\"3\":{\"8\":1}}],[\"就会返回304\",{\"3\":{\"8\":1}}],[\"就会导致任务堵塞\",{\"3\":{\"152\":1}}],[\"就会导致缓存失效\",{\"3\":{\"7\":1}}],[\"就会导致内存泄漏\",{\"3\":{\"1\":1}}],[\"就会使用缓存\",{\"3\":{\"7\":2}}],[\"就会直接从缓存中获取\",{\"3\":{\"6\":1}}],[\"template>\",{\"3\":{\"265\":1}}],[\"text\",{\"3\":{\"14\":2,\"22\":1,\"24\":3,\"96\":4,\"98\":4,\"218\":1}}],[\"t将传入的对象的属性名联合成一个联合类型\",{\"3\":{\"263\":1}}],[\"t\",{\"3\":{\"258\":2,\"259\":2,\"260\":4,\"261\":2,\"262\":2,\"263\":2}}],[\"ts的泛型使得ts\",{\"3\":{\"256\":1}}],[\"title\",{\"3\":{\"254\":1}}],[\"timmer在外边定义\",{\"3\":{\"218\":1}}],[\"timmer\",{\"3\":{\"218\":4}}],[\"timer是window的方法\",{\"3\":{\"59\":1}}],[\"timer\",{\"3\":{\"59\":3}}],[\"tcp会将消息体分成多个数据包\",{\"3\":{\"187\":1}}],[\"tcp在传输数据之前\",{\"3\":{\"187\":1}}],[\"tcp连接\",{\"0\":{\"187\":1},\"2\":{\"187\":1}}],[\"tcp段的由来\",{\"0\":{\"180\":1},\"2\":{\"180\":1}}],[\"tcp提供面向连接的\",{\"3\":{\"179\":1}}],[\"tcp和udp\",{\"3\":{\"179\":1}}],[\"tcp\",{\"1\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"tofixed\",{\"3\":{\"218\":1}}],[\"touppercase\",{\"3\":{\"128\":1}}],[\"tolowercase\",{\"3\":{\"128\":1}}],[\"tostring\",{\"3\":{\"123\":1,\"133\":1}}],[\"trimright\",{\"3\":{\"128\":1}}],[\"trimleft\",{\"3\":{\"128\":1}}],[\"trim\",{\"3\":{\"128\":1}}],[\"treetolistresult\",{\"3\":{\"98\":4}}],[\"treetolist\",{\"3\":{\"98\":6}}],[\"treetolist将树转换为列表\",{\"1\":{\"96\":1,\"97\":1,\"98\":1,\"99\":1}}],[\"true\",{\"3\":{\"15\":1,\"102\":1,\"106\":1,\"134\":1,\"136\":1,\"137\":6,\"138\":1,\"149\":1,\"254\":1,\"267\":2}}],[\"target\",{\"3\":{\"163\":1,\"240\":1}}],[\"targetlength\",{\"3\":{\"128\":2}}],[\"tag\",{\"3\":{\"92\":6,\"93\":1,\"94\":2}}],[\"table\",{\"3\":{\"24\":1}}],[\"then方法接收两个参数\",{\"3\":{\"74\":1}}],[\"then\",{\"3\":{\"74\":2,\"76\":1,\"77\":3,\"84\":1,\"85\":1,\"155\":1,\"156\":15,\"254\":1}}],[\"this会指向调用它的对象\",{\"3\":{\"81\":1}}],[\"this指向谁\",{\"3\":{\"100\":1}}],[\"this指向的是\",{\"3\":{\"79\":2}}],[\"this指向的是函数定义时所在的对象\",{\"3\":{\"59\":1}}],[\"this指向问题\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\"this的指向类型\",{\"0\":{\"79\":1}}],[\"this的指向问题\",{\"3\":{\"59\":1}}],[\"this\",{\"2\":{\"79\":1},\"3\":{\"4\":3,\"59\":9,\"68\":4,\"69\":4,\"70\":8,\"79\":5,\"80\":4,\"160\":2,\"174\":17,\"175\":9,\"208\":4,\"212\":4,\"214\":2,\"223\":3,\"224\":3,\"227\":6,\"246\":2,\"260\":2}}],[\"typeerror\",{\"3\":{\"159\":1,\"160\":1}}],[\"typeof的值是object\",{\"3\":{\"148\":1}}],[\"typeof\",{\"3\":{\"100\":1,\"105\":1,\"148\":1}}],[\"type=\",{\"3\":{\"22\":1,\"218\":1}}],[\"type\",{\"3\":{\"14\":2,\"15\":1,\"24\":1,\"201\":7,\"202\":2,\"203\":2,\"215\":3,\"262\":1}}],[\"默认返回true\",{\"3\":{\"224\":1}}],[\"默认绑定\",{\"3\":{\"79\":1}}],[\"默认会有一个空的constructor方法\",{\"3\":{\"69\":1}}],[\"默认值为0\",{\"3\":{\"48\":1}}],[\"默认值为row\",{\"3\":{\"47\":1}}],[\"默认为false\",{\"3\":{\"168\":1}}],[\"默认为undefined\",{\"3\":{\"147\":2}}],[\"默认为\",{\"3\":{\"48\":3}}],[\"默认\",{\"3\":{\"14\":1}}],[\"端口号\",{\"3\":{\"185\":1}}],[\"端口\",{\"3\":{\"15\":1}}],[\"端口不同\",{\"3\":{\"12\":1}}],[\"端口相同\",{\"3\":{\"12\":1}}],[\"不预先指定具体的类型\",{\"3\":{\"256\":2}}],[\"不能进行dom操作\",{\"3\":{\"273\":1}}],[\"不能返回多个顶级元素\",{\"3\":{\"223\":1}}],[\"不能获取\",{\"3\":{\"223\":1}}],[\"不能和浏览器进行交互\",{\"3\":{\"223\":1}}],[\"不能修改组件的状态对象\",{\"3\":{\"223\":1}}],[\"不能修改props\",{\"3\":{\"209\":1}}],[\"不支持捕获阶段\",{\"3\":{\"167\":1}}],[\"不接受其他类型的值作为键名\",{\"3\":{\"142\":1}}],[\"不需要再次请求服务器\",{\"3\":{\"252\":2}}],[\"不需要再次拷贝\",{\"3\":{\"142\":1}}],[\"不需要引入\",{\"3\":{\"202\":1}}],[\"不需要额外的变量\",{\"3\":{\"80\":1}}],[\"不可以修改\",{\"3\":{\"125\":1}}],[\"不是作用域的地方\",{\"3\":{\"160\":1}}],[\"不是promise对象\",{\"3\":{\"84\":1}}],[\"不是服务器的安全策略\",{\"3\":{\"16\":1}}],[\"不管promise对象的状态是resolved还是rejected\",{\"3\":{\"76\":1}}],[\"不管你有没有设置padding和border\",{\"3\":{\"20\":1}}],[\"不要加上关键词function\",{\"3\":{\"69\":1}}],[\"不放大\",{\"3\":{\"48\":1}}],[\"不缩小\",{\"3\":{\"48\":2}}],[\"不同点\",{\"0\":{\"266\":1},\"2\":{\"266\":1},\"3\":{\"286\":1}}],[\"不同分辨率\",{\"3\":{\"41\":1}}],[\"不同源\",{\"3\":{\"12\":3}}],[\"不会触发附加的重渲染过程\",{\"3\":{\"275\":1,\"281\":1}}],[\"不会触发任何生命周期\",{\"3\":{\"269\":1}}],[\"不会涉及到dom结构的变化\",{\"3\":{\"268\":1,\"269\":1}}],[\"不会导致视图重新渲染\",{\"3\":{\"218\":1}}],[\"不会重复\",{\"3\":{\"179\":1}}],[\"不会乱序\",{\"3\":{\"179\":1}}],[\"不会进行隐式类型转换\",{\"3\":{\"137\":1}}],[\"不会改变数组本身\",{\"3\":{\"117\":1,\"118\":1}}],[\"不会存在外边距合并\",{\"3\":{\"32\":1}}],[\"不会发出去\",{\"3\":{\"12\":1}}],[\"不为visible\",{\"3\":{\"31\":1}}],[\"不为none\",{\"3\":{\"31\":1}}],[\"不包括end\",{\"3\":{\"118\":1}}],[\"不包括嵌套的p元素\",{\"3\":{\"22\":1}}],[\"不包含padding和border\",{\"3\":{\"19\":1}}],[\"不安全\",{\"3\":{\"14\":1}}],[\"不使用apply时\",{\"3\":{\"80\":1}}],[\"不使用强制缓存\",{\"3\":{\"7\":2}}],[\"不使用闭包情况下\",{\"3\":{\"4\":1}}],[\"observe\",{\"3\":{\"250\":1,\"251\":1}}],[\"observer\",{\"3\":{\"250\":2,\"251\":2}}],[\"obj1\",{\"3\":{\"79\":5,\"80\":6}}],[\"obj2\",{\"3\":{\"65\":1,\"79\":4,\"80\":6}}],[\"obj\",{\"3\":{\"59\":9,\"63\":5,\"65\":4,\"79\":8,\"136\":1,\"141\":1,\"142\":3,\"143\":2,\"147\":2,\"148\":3}}],[\"object\",{\"0\":{\"109\":1},\"2\":{\"109\":1},\"3\":{\"70\":2,\"94\":1,\"98\":4,\"106\":1,\"134\":2,\"141\":1,\"148\":1},\"4\":{\"5\":2,\"10\":2,\"17\":2,\"21\":2,\"25\":2,\"27\":2,\"29\":2,\"34\":2,\"44\":2,\"51\":2,\"78\":2,\"81\":2,\"87\":2,\"91\":2,\"95\":2,\"99\":2,\"100\":2,\"115\":2,\"124\":2,\"132\":2,\"135\":2,\"139\":2,\"145\":2,\"146\":2,\"151\":2,\"157\":2,\"169\":2,\"173\":2,\"176\":2,\"177\":2,\"184\":2,\"193\":2,\"197\":2,\"205\":2,\"219\":2,\"231\":2,\"239\":2,\"242\":2,\"247\":2,\"255\":2,\"264\":2,\"271\":2,\"292\":2,\"297\":2}}],[\"owner\",{\"3\":{\"201\":3}}],[\"offsettop\",{\"3\":{\"251\":1,\"253\":1}}],[\"of\",{\"3\":{\"84\":1}}],[\"of遍历\",{\"3\":{\"84\":1}}],[\"of循环\",{\"3\":{\"65\":1}}],[\"o\",{\"3\":{\"62\":1,\"155\":1}}],[\"old\",{\"3\":{\"60\":2,\"68\":2,\"69\":2,\"70\":4,\"174\":5,\"175\":3}}],[\"order\",{\"3\":{\"48\":1}}],[\"origin\",{\"3\":{\"15\":1}}],[\"origin字段来允许指定源的请求\",{\"3\":{\"15\":1}}],[\"overflow\",{\"3\":{\"31\":1}}],[\"option的初始化\",{\"3\":{\"273\":1}}],[\"options\",{\"3\":{\"15\":1}}],[\"opcitiy\",{\"3\":{\"28\":1,\"29\":1}}],[\"onactivated\",{\"3\":{\"283\":1}}],[\"onbeforeunmount\",{\"3\":{\"282\":1}}],[\"onbeforeupdate\",{\"3\":{\"281\":1}}],[\"onbeforemount\",{\"3\":{\"280\":1}}],[\"onback\",{\"3\":{\"14\":1}}],[\"onchange=\",{\"3\":{\"240\":1}}],[\"onclick=\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":2,\"230\":1,\"234\":3,\"235\":1,\"241\":1}}],[\"onclick\",{\"3\":{\"167\":4}}],[\"only\",{\"3\":{\"40\":1}}],[\"on\",{\"3\":{\"15\":1}}],[\"other\",{\"3\":{\"12\":1}}],[\"dns解析\",{\"0\":{\"186\":1},\"2\":{\"186\":1}}],[\"dns等\",{\"3\":{\"178\":1}}],[\"dnd\",{\"3\":{\"100\":1}}],[\"d4d1ccf8\",{\"0\":{\"174\":1,\"175\":1,\"176\":1}}],[\"date\",{\"0\":{\"112\":1},\"2\":{\"112\":1},\"3\":{\"218\":3}}],[\"data\",{\"3\":{\"74\":2,\"77\":6,\"96\":1}}],[\"deactivated\",{\"3\":{\"283\":1}}],[\"devtivated\",{\"3\":{\"277\":1}}],[\"destroyed\",{\"3\":{\"276\":1}}],[\"description\",{\"3\":{\"84\":1,\"98\":1}}],[\"default\",{\"3\":{\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"218\":2,\"233\":1,\"234\":2,\"235\":3,\"240\":1,\"241\":1,\"246\":1}}],[\"decoration\",{\"3\":{\"24\":1}}],[\"deletecount\",{\"3\":{\"117\":1,\"118\":1}}],[\"delete\",{\"3\":{\"15\":1}}],[\"delaytime\",{\"3\":{\"4\":2}}],[\"delay\",{\"3\":{\"4\":2}}],[\"d\",{\"3\":{\"23\":2,\"142\":1}}],[\"dispatch\",{\"3\":{\"215\":3}}],[\"display\",{\"3\":{\"24\":1,\"28\":1,\"29\":1,\"31\":1,\"50\":1,\"267\":3,\"268\":1}}],[\"diff算法是怎样的\",{\"3\":{\"100\":1}}],[\"div4\",{\"3\":{\"167\":5,\"168\":5}}],[\"div3\",{\"3\":{\"167\":5,\"168\":5}}],[\"div2\",{\"3\":{\"167\":6,\"168\":6}}],[\"div1\",{\"3\":{\"167\":6,\"168\":6}}],[\"div元素垂直居中\",{\"3\":{\"100\":1}}],[\"div>\",{\"3\":{\"92\":1,\"167\":4,\"168\":4,\"200\":1,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"230\":1,\"233\":1,\"234\":3,\"235\":3,\"240\":1,\"241\":1,\"245\":1,\"246\":1,\"251\":1,\"253\":1,\"254\":2,\"265\":3}}],[\"divs\",{\"3\":{\"65\":2}}],[\"div\",{\"3\":{\"22\":2,\"65\":1,\"92\":1,\"201\":1,\"202\":1}}],[\"direction和flex\",{\"3\":{\"47\":1}}],[\"direction\",{\"3\":{\"47\":1}}],[\"dir2\",{\"3\":{\"12\":1}}],[\"dir\",{\"3\":{\"12\":4}}],[\"double\",{\"3\":{\"216\":3}}],[\"dom元素之后\",{\"3\":{\"224\":1}}],[\"dom\",{\"0\":{\"204\":1},\"2\":{\"204\":1},\"3\":{\"92\":1,\"93\":1,\"201\":2,\"202\":1,\"203\":5,\"218\":2,\"223\":3,\"224\":2,\"228\":3,\"241\":3,\"246\":1,\"267\":3,\"268\":1,\"275\":2,\"281\":2}}],[\"domain2\",{\"3\":{\"14\":1}}],[\"document\",{\"3\":{\"14\":2,\"65\":1,\"94\":1,\"163\":1,\"167\":4,\"168\":4,\"250\":3,\"251\":2,\"253\":1}}],[\"watch上的数据和方法\",{\"3\":{\"273\":2}}],[\"wd=搜索内容的形式\",{\"3\":{\"185\":1}}],[\"while\",{\"3\":{\"90\":1,\"98\":1,\"134\":1}}],[\"wrap的简写\",{\"3\":{\"47\":1}}],[\"wrap\",{\"3\":{\"47\":1}}],[\"winter\",{\"3\":{\"79\":3,\"80\":6}}],[\"window来实现虚拟列表\",{\"3\":{\"253\":1}}],[\"window\",{\"3\":{\"59\":3,\"79\":3,\"245\":7,\"246\":3,\"250\":6,\"251\":3,\"253\":5}}],[\"width=\",{\"3\":{\"253\":1}}],[\"width\",{\"3\":{\"18\":2,\"19\":1,\"20\":1,\"24\":2,\"39\":1,\"40\":8,\"50\":3}}],[\"with\",{\"3\":{\"15\":1}}],[\"weight\",{\"3\":{\"24\":1}}],[\"webpack等工具来做反向代理\",{\"3\":{\"16\":1}}],[\"weakmap属于弱引用\",{\"3\":{\"142\":1}}],[\"weakmap只接受对象作为键名\",{\"3\":{\"142\":1}}],[\"weakmap也会被回收\",{\"3\":{\"142\":1}}],[\"weakmap\",{\"3\":{\"2\":1}}],[\"www\",{\"3\":{\"12\":5,\"14\":1,\"185\":1}}],[\"协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走\",{\"3\":{\"181\":1}}],[\"协议不同\",{\"3\":{\"12\":1}}],[\"协议\",{\"3\":{\"12\":1,\"15\":1}}],[\"协商缓存由服务器决定是否使用缓存\",{\"3\":{\"9\":1}}],[\"协商缓存是指\",{\"3\":{\"8\":1}}],[\"协商缓存\",{\"0\":{\"8\":1},\"2\":{\"8\":1},\"3\":{\"6\":1}}],[\"域名不同\",{\"3\":{\"12\":1}}],[\"域名\",{\"3\":{\"12\":1,\"15\":1,\"185\":1}}],[\"所有的行用一个数组表示\",{\"3\":{\"296\":1}}],[\"所有的子实例也会被销毁\",{\"3\":{\"276\":1,\"282\":1}}],[\"所有的事件监听器会被移除\",{\"3\":{\"276\":1,\"282\":1}}],[\"所有的迭代方法都不会改变数组本身\",{\"3\":{\"122\":1}}],[\"所控制\",{\"3\":{\"240\":2}}],[\"所谓同源是指\",{\"3\":{\"12\":1}}],[\"所以不能直接使用props\",{\"3\":{\"279\":1}}],[\"所以不需要引入\",{\"3\":{\"202\":1}}],[\"所以可以执行依赖于\",{\"3\":{\"275\":1,\"281\":1}}],[\"所以可以使用foreach\",{\"3\":{\"85\":1}}],[\"所以如果直接操作dom\",{\"3\":{\"274\":1}}],[\"所以如果其中一个对象改变了这个地址\",{\"3\":{\"140\":1}}],[\"所以dom还没有挂载\",{\"3\":{\"273\":1}}],[\"所以性能比较差\",{\"3\":{\"270\":1}}],[\"所以性能比较好\",{\"3\":{\"270\":1}}],[\"所以也不会拥有\",{\"3\":{\"230\":1}}],[\"所以无法清除\",{\"3\":{\"218\":1}}],[\"所以需要在外面定义\",{\"3\":{\"218\":1}}],[\"所以需要在首页加载完成后\",{\"3\":{\"194\":1}}],[\"所以需要在用户登录后\",{\"3\":{\"194\":1}}],[\"所以交换机会根据mac地址表\",{\"3\":{\"191\":1}}],[\"所以\",{\"3\":{\"181\":1,\"240\":1}}],[\"所以数组的原型链和对象的原型链是一样的\",{\"3\":{\"172\":1}}],[\"所以当我们点击div3时\",{\"3\":{\"167\":1,\"168\":1}}],[\"所以当父子元素都绑定了事件的时候\",{\"3\":{\"165\":1}}],[\"所以fiber架构的目的就是为了解决这个问题\",{\"3\":{\"220\":1}}],[\"所以fn1的作用域链是fn1\",{\"3\":{\"162\":1}}],[\"所以foo的作用域链是foo\",{\"3\":{\"160\":1,\"162\":1}}],[\"所以bar的作用域链是bar\",{\"3\":{\"160\":1}}],[\"所以词法作用域是静态的作用域\",{\"3\":{\"160\":1}}],[\"所以先执行process\",{\"3\":{\"156\":1}}],[\"所以叫做事件循环\",{\"3\":{\"154\":1}}],[\"所以他们是相等的\",{\"3\":{\"149\":1}}],[\"所以typeof\",{\"3\":{\"148\":1}}],[\"所以this指向的是obj2\",{\"3\":{\"79\":1}}],[\"所以this指向的是obj1\",{\"3\":{\"79\":1}}],[\"所以this指向的是window\",{\"3\":{\"59\":1}}],[\"所以this指向的是使用时所在的对象\",{\"3\":{\"59\":1}}],[\"所以this指向的是函数定义时所在的对象\",{\"3\":{\"59\":2}}],[\"所以还需要对数组进行判断\",{\"3\":{\"142\":1}}],[\"所以我们称这种组件为非受控组件\",{\"3\":{\"241\":1}}],[\"所以我们称这种组件为受控组件\",{\"3\":{\"240\":1}}],[\"所以我们可以使用useref\",{\"3\":{\"218\":1}}],[\"所以我们可以通过服务器来请求接口\",{\"3\":{\"16\":1}}],[\"所以我们需要对这些特殊对象进行判断\",{\"3\":{\"142\":1}}],[\"所以我们需要一个容器来存储已经拷贝过的对象\",{\"3\":{\"142\":1}}],[\"所以我们就需要使用apply方法\",{\"3\":{\"80\":1}}],[\"所以在使用\",{\"3\":{\"202\":1}}],[\"所以在foo中查找value时\",{\"3\":{\"160\":1}}],[\"所以在声明之前访问变量会报错\",{\"3\":{\"56\":2}}],[\"所以在一些特殊的场景下\",{\"3\":{\"28\":1}}],[\"所以单独拿出来说一下\",{\"3\":{\"48\":1}}],[\"所以说\",{\"3\":{\"35\":1}}],[\"所以权重为0113\",{\"3\":{\"23\":1}}],[\"所以每次循环时\",{\"3\":{\"4\":1}}],[\"所以settimeout中访问到的i是for循环中的i\",{\"3\":{\"4\":1}}],[\"所以settimeout中访问到的i是全局作用域中的i\",{\"3\":{\"4\":1}}],[\"所以var定义的变量会被提升到全局作用域中\",{\"3\":{\"4\":1}}],[\"所以i的值会被保存在闭包中\",{\"3\":{\"4\":1}}],[\"所以会将数据包转发到所有的端口\",{\"3\":{\"191\":1}}],[\"所以会使用math\",{\"3\":{\"80\":1}}],[\"所以会输出0\",{\"3\":{\"4\":1}}],[\"所以会在循环结束后才会执行\",{\"3\":{\"4\":1}}],[\"所以会比其他函数占用更多的内存\",{\"3\":{\"3\":1}}],[\"它可以让我们在不需要一层一层的传递参数的情况下\",{\"3\":{\"237\":1}}],[\"它可以当作普通字符串使用\",{\"3\":{\"60\":1}}],[\"它只是模拟了生命周期钩子的功能\",{\"3\":{\"230\":1}}],[\"它具有以下特性\",{\"3\":{\"223\":2}}],[\"它就会被renderer接管\",{\"3\":{\"204\":1}}],[\"它就会被调度器scheduler接管\",{\"3\":{\"203\":1}}],[\"它对应三种关系\",{\"3\":{\"203\":1}}],[\"它传输的单位是比特\",{\"3\":{\"183\":1}}],[\"它的结构如下\",{\"3\":{\"201\":1,\"203\":1}}],[\"它的作用是将数据从一台主机传输到另一台主机\",{\"3\":{\"183\":1}}],[\"它的作用是将网络层传下来的ip数据报封装成帧\",{\"3\":{\"182\":1}}],[\"它的值也是undefined\",{\"3\":{\"147\":1}}],[\"它的值是undefined\",{\"3\":{\"147\":1}}],[\"它的值就是undefined\",{\"3\":{\"106\":1,\"147\":1}}],[\"它不保证数据传输的可靠性\",{\"3\":{\"179\":1}}],[\"它能够保证数据从一端传到另一端\",{\"3\":{\"179\":1}}],[\"它其实就是变量声明\",{\"3\":{\"106\":1}}],[\"它会将多个promise实例包装成一个新的promise实例\",{\"3\":{\"82\":1}}],[\"它好比是\",{\"3\":{\"65\":1}}],[\"它是\",{\"3\":{\"198\":1}}],[\"它是一个纯函数\",{\"3\":{\"223\":1,\"227\":1}}],[\"它是一个链表结构\",{\"3\":{\"203\":1}}],[\"它是一个对象\",{\"3\":{\"201\":1}}],[\"它是一个空对象指针\",{\"3\":{\"148\":1}}],[\"它是一种针对数组或者对象进行模式匹配\",{\"3\":{\"61\":1}}],[\"它是基于原型的继承\",{\"3\":{\"68\":1}}],[\"它是由浏览器的同源策略造成的\",{\"3\":{\"11\":1}}],[\"它包含了元素的内容\",{\"3\":{\"18\":1}}],[\"它仍然存在\",{\"3\":{\"3\":1}}],[\"什么是泛型\",{\"0\":{\"256\":1},\"2\":{\"256\":1}}],[\"什么是生命周期\",{\"0\":{\"220\":1},\"2\":{\"220\":1}}],[\"什么是事件委托\",{\"3\":{\"163\":1}}],[\"什么是临时死亡区\",{\"3\":{\"56\":1}}],[\"什么是变量提升呢\",{\"3\":{\"235\":1}}],[\"什么是变量提升\",{\"3\":{\"56\":1}}],[\"什么是作用域\",{\"3\":{\"55\":1}}],[\"什么是\",{\"0\":{\"35\":1,\"198\":1},\"2\":{\"35\":1,\"198\":1}}],[\"什么是bfc\",{\"0\":{\"30\":1},\"2\":{\"30\":1}}],[\"什么是同源策略\",{\"3\":{\"11\":1}}],[\"什么是跨域\",{\"0\":{\"11\":1},\"2\":{\"11\":1}}],[\"什么是浏览器的缓存机制\",{\"0\":{\"6\":1},\"2\":{\"6\":1}}],[\"若协商缓存失效\",{\"3\":{\"9\":1}}],[\"若不生效则进行协商缓存\",{\"3\":{\"9\":1}}],[\"若强制缓存\",{\"3\":{\"9\":1}}],[\"并不参与管理\",{\"3\":{\"241\":1}}],[\"并不是在调用的地方\",{\"3\":{\"160\":1}}],[\"并将这个上下文添加到执行环境中\",{\"3\":{\"163\":1}}],[\"并将其放在任务队列里面\",{\"3\":{\"4\":1}}],[\"并拷贝属性指向的动态分配的内存\",{\"3\":{\"142\":1}}],[\"并且访问\",{\"3\":{\"214\":1}}],[\"并且在子组件里面应用\",{\"3\":{\"214\":1}}],[\"并且filber中还存在任务优先级属性\",{\"3\":{\"203\":1}}],[\"并且增加的item还会绑定事件\",{\"3\":{\"163\":1}}],[\"并且有字符串\",{\"3\":{\"134\":1}}],[\"并且是可以被改变的\",{\"3\":{\"55\":1}}],[\"并且返回资源内容\",{\"3\":{\"8\":1}}],[\"并且不会返回资源内容\",{\"3\":{\"8\":1}}],[\"并且会在请求头里面携带if\",{\"3\":{\"8\":1}}],[\"entry\",{\"3\":{\"251\":2}}],[\"entries\",{\"3\":{\"250\":2,\"251\":2}}],[\"end\",{\"3\":{\"15\":1,\"118\":1,\"127\":4,\"156\":2}}],[\"every\",{\"3\":{\"122\":1}}],[\"elementtype\",{\"3\":{\"203\":1}}],[\"element\",{\"3\":{\"94\":5,\"201\":4}}],[\"else\",{\"3\":{\"74\":1,\"77\":7,\"84\":1,\"94\":1}}],[\"errorcaptured\",{\"3\":{\"277\":1}}],[\"error\",{\"3\":{\"142\":1}}],[\"err=>\",{\"3\":{\"84\":1}}],[\"err\",{\"3\":{\"74\":2,\"77\":6,\"84\":1}}],[\"eating\",{\"3\":{\"70\":4}}],[\"eat\",{\"3\":{\"70\":4}}],[\"e\",{\"3\":{\"62\":2,\"65\":1,\"163\":2,\"240\":2}}],[\"es6新增的字符串拼接方法\",{\"3\":{\"126\":1}}],[\"es6新特新\",{\"1\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1}}],[\"es6之后\",{\"3\":{\"120\":1}}],[\"es6之前\",{\"3\":{\"120\":1}}],[\"es6中定义的方法\",{\"3\":{\"69\":1}}],[\"es6\",{\"0\":{\"69\":1,\"175\":1},\"2\":{\"69\":1,\"175\":1},\"3\":{\"53\":1,\"65\":2,\"69\":1}}],[\"es5\",{\"0\":{\"68\":1,\"174\":1},\"2\":{\"68\":1,\"174\":1},\"3\":{\"53\":1,\"69\":1}}],[\"em\",{\"3\":{\"26\":1,\"100\":1}}],[\"empty\",{\"3\":{\"24\":1}}],[\"exclude\",{\"3\":{\"284\":1}}],[\"extends\",{\"3\":{\"175\":1,\"208\":1,\"261\":1,\"262\":1,\"263\":1}}],[\"export\",{\"3\":{\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"233\":1,\"234\":2,\"235\":3,\"240\":1,\"241\":1,\"246\":1}}],[\"expressions\",{\"3\":{\"40\":2}}],[\"expires是一个绝对时间\",{\"3\":{\"7\":1}}],[\"expires就被cache\",{\"3\":{\"7\":1}}],[\"expires\",{\"3\":{\"7\":1,\"9\":1}}],[\"expires和cache\",{\"3\":{\"7\":1}}],[\"example\",{\"3\":{\"12\":5}}],[\"etag的优先级会高一点\",{\"3\":{\"8\":1}}],[\"etag和if\",{\"3\":{\"8\":1}}],[\"m+1\",{\"3\":{\"295\":1}}],[\"mounted\",{\"3\":{\"274\":1,\"280\":1}}],[\"mounted生命周期\",{\"3\":{\"269\":1}}],[\"mounting\",{\"3\":{\"220\":1}}],[\"mount\",{\"3\":{\"196\":2}}],[\"mousedown\",{\"3\":{\"163\":1}}],[\"module\",{\"0\":{\"72\":1},\"2\":{\"72\":1}}],[\"modified和etag的值\",{\"3\":{\"8\":1}}],[\"modified和if\",{\"3\":{\"8\":1}}],[\"modified\",{\"3\":{\"8\":3,\"9\":2}}],[\"mycontext\",{\"3\":{\"214\":3,\"237\":3}}],[\"myage\",{\"3\":{\"63\":2}}],[\"myname\",{\"3\":{\"63\":2}}],[\"my\",{\"3\":{\"60\":1,\"68\":1,\"69\":1,\"70\":2,\"174\":2,\"175\":1}}],[\"m\",{\"3\":{\"60\":2,\"62\":1,\"65\":2,\"68\":2,\"69\":2,\"70\":8,\"174\":5,\"175\":3,\"294\":1,\"295\":1,\"296\":1}}],[\"min\",{\"3\":{\"39\":1,\"40\":3,\"80\":4}}],[\"memo\",{\"2\":{\"286\":1}}],[\"memoizedprops\",{\"3\":{\"203\":1}}],[\"memoizedstate\",{\"3\":{\"203\":1}}],[\"meta\",{\"3\":{\"100\":1}}],[\"methods\",{\"3\":{\"15\":1}}],[\"methods字段\",{\"3\":{\"15\":1}}],[\"medium\",{\"3\":{\"50\":1}}],[\"mediatype\",{\"3\":{\"40\":1}}],[\"media\",{\"3\":{\"40\":5,\"41\":1}}],[\"media=\",{\"3\":{\"39\":2}}],[\"meidatype\",{\"3\":{\"40\":1}}],[\"mac头部包含源mac地址和目的mac地址\",{\"3\":{\"189\":1}}],[\"mac地址\",{\"0\":{\"189\":1},\"2\":{\"189\":1}}],[\"math\",{\"3\":{\"74\":1,\"77\":7,\"80\":4}}],[\"match的值和资源的最新修改时间或者etag的值进行对比\",{\"3\":{\"8\":1}}],[\"match字段\",{\"3\":{\"8\":1}}],[\"match\",{\"3\":{\"8\":1,\"9\":1,\"131\":1}}],[\"map返回的是啥\",{\"3\":{\"100\":1}}],[\"map和foreach区别\",{\"3\":{\"100\":1}}],[\"map\",{\"3\":{\"65\":1,\"122\":1,\"254\":1}}],[\"main\",{\"3\":{\"48\":1,\"196\":1}}],[\"margin塌陷问题\",{\"3\":{\"32\":1}}],[\"margin\",{\"3\":{\"24\":1}}],[\"maxage\",{\"3\":{\"7\":1}}],[\"max\",{\"3\":{\"7\":1,\"40\":2,\"80\":4}}],[\"控制协商缓存的字段有两组\",{\"3\":{\"8\":1}}],[\"由上面两个例子\",{\"3\":{\"295\":1}}],[\"由于涉及到dom结构的变化\",{\"3\":{\"270\":1}}],[\"由于只涉及到css的变化\",{\"3\":{\"270\":1}}],[\"由于表单元素的值由\",{\"3\":{\"240\":1,\"241\":1}}],[\"由内到外\",{\"3\":{\"163\":1}}],[\"由服务器根据缓存标识来决定是否使用缓存\",{\"3\":{\"8\":1}}],[\"由浏览器来决定\",{\"3\":{\"7\":1}}],[\"将一些幂等性的请求数据缓存到浏览器中\",{\"3\":{\"252\":1}}],[\"将一个数组转为用逗号分隔的参数序列\",{\"3\":{\"65\":1}}],[\"将静态资源缓存到浏览器中\",{\"3\":{\"252\":1}}],[\"将参数提升到父组件\",{\"3\":{\"236\":1}}],[\"将子组件的参数传递给父组件\",{\"3\":{\"234\":1}}],[\"将数据包转发到目的主机\",{\"3\":{\"191\":1}}],[\"将数组转化为字符串\",{\"3\":{\"123\":2}}],[\"将数组进行反转\",{\"3\":{\"121\":1}}],[\"将封装好的数据包传输到网络层\",{\"3\":{\"187\":1}}],[\"将属性变为实例属性\",{\"3\":{\"174\":1}}],[\"将父类的属性添加到子类的实例上\",{\"3\":{\"174\":1}}],[\"将其放入微任务队列\",{\"3\":{\"156\":6}}],[\"将其放入微任务队列中\",{\"3\":{\"156\":1}}],[\"将其放入宏任务队列\",{\"3\":{\"156\":4}}],[\"将其放入宏任务队列中\",{\"3\":{\"156\":1}}],[\"将注册的回调函数放入任务队列中\",{\"3\":{\"153\":1}}],[\"将对象转换为字符串\",{\"3\":{\"143\":1}}],[\"将null转化为0\",{\"3\":{\"134\":1}}],[\"将undefined转化为nan\",{\"3\":{\"134\":1}}],[\"将字符串按照separator分割成数组\",{\"3\":{\"130\":1}}],[\"将字符串转化为数组的方法\",{\"3\":{\"130\":1}}],[\"将字符串转化为小写\",{\"3\":{\"128\":1}}],[\"将两个数组合并并且去重\",{\"3\":{\"100\":1}}],[\"将当前数据放入返回结果中\",{\"3\":{\"98\":1}}],[\"将树型结构转换为列表\",{\"3\":{\"98\":1}}],[\"将需要访问的节点放在队列里面\",{\"3\":{\"97\":1}}],[\"将上面这个树结构的数据转换成下面这种列表结构\",{\"3\":{\"96\":1}}],[\"将上述数组转换成下面的树形结构\",{\"3\":{\"88\":1}}],[\"将curr放入res中\",{\"3\":{\"90\":1}}],[\"将css放在head标签中\",{\"3\":{\"38\":1}}],[\"将css文件会存放在硬盘中\",{\"3\":{\"7\":1}}],[\"将他们的引用关系给打破\",{\"3\":{\"89\":1}}],[\"将列表转换为树形结构\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1}}],[\"将伪数组转为真正的数组\",{\"3\":{\"65\":1}}],[\"将\",{\"0\":{\"38\":1},\"2\":{\"38\":1}}],[\"将fn1的返回值给了fn3\",{\"3\":{\"3\":1}}],[\"硬盘缓存的优点是存储空间大\",{\"3\":{\"7\":1}}],[\"缓存内容将在这个时间之后失效\",{\"3\":{\"7\":1}}],[\"缓存机制\",{\"1\":{\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1}}],[\"snapshot\",{\"3\":{\"228\":1}}],[\"switch\",{\"3\":{\"215\":1}}],[\"scrollheight时\",{\"3\":{\"250\":1}}],[\"scrollheight这三个属性的含义\",{\"3\":{\"250\":1}}],[\"scrollheight\",{\"3\":{\"250\":2}}],[\"scrollposition\",{\"3\":{\"245\":5,\"246\":3}}],[\"scrollref\",{\"3\":{\"245\":2,\"246\":4}}],[\"scrolly和window\",{\"3\":{\"250\":1}}],[\"scrolly可以获取当前滚动的位置\",{\"3\":{\"245\":1}}],[\"scrolly这两个方法\",{\"3\":{\"245\":1}}],[\"scrolly\",{\"3\":{\"245\":2,\"246\":1,\"250\":3,\"251\":1,\"253\":1}}],[\"scroll\",{\"3\":{\"245\":1,\"246\":1,\"250\":1,\"251\":1,\"253\":1}}],[\"scrolltop\",{\"3\":{\"246\":1}}],[\"scrollto可以跳转到指定位置\",{\"3\":{\"245\":1}}],[\"scrollto和window\",{\"3\":{\"245\":1}}],[\"scrollto\",{\"3\":{\"245\":2,\"246\":2}}],[\"script>\",{\"3\":{\"14\":1}}],[\"script\",{\"3\":{\"14\":6,\"156\":2}}],[\"scheduler会将这个reactelement放到fiber中\",{\"3\":{\"203\":1}}],[\"smtp\",{\"3\":{\"178\":1}}],[\"s1\",{\"3\":{\"174\":6,\"175\":2}}],[\"suspense>\",{\"3\":{\"251\":1}}],[\"suspense\",{\"3\":{\"251\":1}}],[\"sub\",{\"3\":{\"215\":2}}],[\"substring\",{\"3\":{\"127\":1}}],[\"substr\",{\"3\":{\"127\":1}}],[\"super可以调用原型方法和静态方法\",{\"3\":{\"175\":1}}],[\"super关键字的作用\",{\"3\":{\"175\":1}}],[\"super\",{\"3\":{\"175\":3,\"208\":1}}],[\"summer<\",{\"3\":{\"233\":1}}],[\"summer\",{\"3\":{\"59\":3,\"60\":2,\"63\":4,\"64\":6,\"65\":3,\"68\":2,\"69\":2,\"70\":4,\"79\":7,\"80\":8,\"174\":5,\"175\":2,\"233\":3,\"234\":4,\"235\":1,\"240\":1}}],[\"source\",{\"3\":{\"201\":1,\"203\":2}}],[\"some\",{\"3\":{\"122\":1}}],[\"sort\",{\"3\":{\"80\":1,\"121\":1}}],[\"slice\",{\"3\":{\"118\":1,\"127\":1}}],[\"split\",{\"3\":{\"130\":1}}],[\"splice\",{\"3\":{\"117\":1,\"118\":1}}],[\"span>\",{\"3\":{\"92\":2,\"200\":1}}],[\"span\",{\"3\":{\"92\":2,\"201\":1,\"202\":1}}],[\"symbol\",{\"0\":{\"107\":1},\"2\":{\"107\":1},\"3\":{\"201\":2}}],[\"show<\",{\"3\":{\"265\":1}}],[\"show=\",{\"3\":{\"265\":1}}],[\"show\",{\"1\":{\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1},\"3\":{\"267\":3,\"268\":1,\"269\":1,\"270\":1}}],[\"shouldcomponentupdate会在组件重新渲染之前执行\",{\"3\":{\"224\":1}}],[\"shouldcomponentupdate\",{\"3\":{\"224\":1,\"228\":1}}],[\"shift\",{\"3\":{\"90\":2,\"98\":1,\"117\":1}}],[\"shrink和flex\",{\"3\":{\"48\":1}}],[\"shrink\",{\"3\":{\"48\":1}}],[\"sayhi\",{\"3\":{\"175\":1}}],[\"sayname\",{\"3\":{\"79\":7,\"80\":8}}],[\"say\",{\"3\":{\"68\":2,\"69\":2,\"70\":4,\"174\":6,\"175\":4}}],[\"siblings\",{\"3\":{\"203\":1}}],[\"sibling\",{\"3\":{\"203\":1}}],[\"side\",{\"3\":{\"24\":1}}],[\"size来计算\",{\"3\":{\"26\":2}}],[\"size\",{\"3\":{\"24\":1,\"48\":1}}],[\"sizing\",{\"3\":{\"18\":2}}],[\"sizing来进行设置\",{\"3\":{\"18\":1}}],[\"since和etag\",{\"3\":{\"9\":1}}],[\"since或者if\",{\"3\":{\"8\":2}}],[\"since\",{\"3\":{\"8\":1}}],[\"sex\",{\"3\":{\"259\":1}}],[\"secondspassed\",{\"3\":{\"218\":3}}],[\"search\",{\"3\":{\"131\":1}}],[\"separator\",{\"3\":{\"130\":1}}],[\"self\",{\"3\":{\"48\":1,\"201\":1}}],[\"server\",{\"3\":{\"15\":4}}],[\"setup\",{\"3\":{\"279\":1}}],[\"setloading\",{\"3\":{\"254\":2}}],[\"setnow\",{\"3\":{\"218\":3}}],[\"setname\",{\"3\":{\"216\":2,\"217\":2,\"234\":2,\"235\":2,\"240\":2}}],[\"setstarttime\",{\"3\":{\"218\":2}}],[\"setstate来修改状态的话\",{\"3\":{\"228\":1}}],[\"setstate\",{\"3\":{\"208\":1}}],[\"setcount\",{\"3\":{\"209\":1,\"212\":2,\"213\":2,\"214\":4,\"216\":2,\"217\":2,\"230\":2}}],[\"setitem\",{\"3\":{\"245\":2,\"246\":1}}],[\"setimmediate\",{\"3\":{\"155\":1,\"156\":2}}],[\"setinterval\",{\"3\":{\"155\":2,\"218\":1}}],[\"setarticles\",{\"3\":{\"254\":2}}],[\"setattribute\",{\"3\":{\"94\":1}}],[\"setage\",{\"3\":{\"4\":4}}],[\"set\",{\"3\":{\"65\":1}}],[\"setheader\",{\"3\":{\"15\":4}}],[\"settimeout放入宏任务队列\",{\"3\":{\"156\":3}}],[\"settimeout是window的方法\",{\"3\":{\"59\":1}}],[\"settimeout\",{\"3\":{\"4\":6,\"59\":4,\"74\":1,\"77\":7,\"155\":1,\"156\":13}}],[\"stopwatch\",{\"3\":{\"218\":1}}],[\"store\",{\"3\":{\"7\":1}}],[\"state和nextstate\",{\"3\":{\"224\":1}}],[\"state发生变化\",{\"3\":{\"224\":1}}],[\"state来获取数据\",{\"3\":{\"223\":1}}],[\"state来进行修改状态\",{\"3\":{\"208\":1}}],[\"state\",{\"3\":{\"208\":4,\"209\":1,\"210\":3,\"212\":4,\"214\":2,\"215\":4,\"216\":1,\"217\":1,\"223\":3,\"224\":2,\"227\":6,\"240\":4,\"241\":1}}],[\"statenode\",{\"3\":{\"203\":1}}],[\"static\",{\"3\":{\"175\":1,\"227\":1}}],[\"starttime\",{\"3\":{\"218\":3}}],[\"start+length\",{\"3\":{\"127\":1}}],[\"start\",{\"3\":{\"117\":1,\"118\":2,\"127\":6,\"156\":4}}],[\"student\",{\"3\":{\"174\":8,\"175\":3}}],[\"stringref\",{\"3\":{\"203\":1}}],[\"string\",{\"0\":{\"103\":1},\"2\":{\"103\":1},\"3\":{\"98\":6,\"203\":2,\"263\":1}}],[\"stringify\",{\"3\":{\"14\":1,\"143\":1,\"224\":1}}],[\"str\",{\"3\":{\"60\":2,\"65\":2}}],[\"style=\",{\"3\":{\"253\":1}}],[\"stylesheet\",{\"3\":{\"39\":3}}],[\"style\",{\"3\":{\"24\":5,\"39\":3,\"43\":4,\"201\":1,\"202\":1,\"253\":2,\"268\":1}}],[\"src\",{\"3\":{\"14\":1}}],[\"s\",{\"3\":{\"7\":1,\"65\":1,\"185\":1}}],[\"clearinterval\",{\"3\":{\"218\":1}}],[\"click\",{\"3\":{\"163\":2,\"168\":4}}],[\"clonedeep\",{\"3\":{\"143\":1}}],[\"class等\",{\"3\":{\"201\":1}}],[\"classname\",{\"3\":{\"201\":2,\"202\":2}}],[\"classname=\",{\"3\":{\"200\":1}}],[\"class就是构造函数的语法糖\",{\"3\":{\"69\":1}}],[\"class\",{\"3\":{\"22\":1,\"23\":1,\"69\":1,\"70\":2,\"175\":4,\"208\":1,\"260\":1}}],[\"chengname\",{\"3\":{\"234\":1}}],[\"changename修改父组件的\",{\"3\":{\"234\":1}}],[\"changename=\",{\"3\":{\"234\":1,\"235\":1}}],[\"changename\",{\"3\":{\"234\":5,\"235\":3}}],[\"change=\",{\"3\":{\"218\":1}}],[\"changedata\",{\"3\":{\"218\":2}}],[\"charat\",{\"3\":{\"129\":1}}],[\"child2\",{\"3\":{\"235\":3}}],[\"child1\",{\"3\":{\"235\":3}}],[\"child>\",{\"3\":{\"233\":1}}],[\"child\",{\"3\":{\"203\":2,\"214\":1,\"233\":1,\"234\":3}}],[\"children获取到子组件\",{\"3\":{\"233\":1}}],[\"children7\",{\"3\":{\"156\":2}}],[\"children6\",{\"3\":{\"156\":2}}],[\"children5\",{\"3\":{\"156\":2}}],[\"children4\",{\"3\":{\"156\":2}}],[\"children3\",{\"3\":{\"156\":2}}],[\"children2\",{\"3\":{\"156\":2}}],[\"children\",{\"3\":{\"88\":6,\"90\":4,\"92\":6,\"93\":1,\"94\":7,\"96\":1,\"98\":3,\"201\":2,\"202\":5,\"233\":1}}],[\"cur为数组的第二个元素\",{\"3\":{\"122\":1}}],[\"cur\",{\"3\":{\"122\":1}}],[\"current\",{\"3\":{\"218\":3,\"241\":1,\"246\":2}}],[\"curr\",{\"3\":{\"90\":6,\"98\":4}}],[\"cells\",{\"3\":{\"24\":1}}],[\"c\",{\"3\":{\"23\":2,\"55\":7,\"56\":3,\"57\":3,\"58\":3,\"62\":2,\"64\":2,\"142\":1}}],[\"css盒模型=＞box它是几部分组成的\",{\"3\":{\"100\":1}}],[\"css下载\",{\"3\":{\"36\":1}}],[\"css渲染阻塞是指浏览器在解析html时\",{\"3\":{\"35\":1}}],[\"css渲染阻塞\",{\"1\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1}}],[\"css实现隐藏元素的方法\",{\"1\":{\"28\":1,\"29\":1}}],[\"css中的常见单位有以下几种\",{\"3\":{\"26\":1}}],[\"css中的单位\",{\"1\":{\"26\":1,\"27\":1}}],[\"css选择器\",{\"1\":{\"22\":1,\"23\":1,\"24\":1,\"25\":1}}],[\"css\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1},\"2\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1},\"3\":{\"18\":1,\"22\":1,\"23\":1,\"24\":1,\"35\":1,\"39\":3,\"40\":1,\"43\":2}}],[\"css的盒模型\",{\"1\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1}}],[\"credentials\",{\"3\":{\"15\":1}}],[\"created\",{\"3\":{\"269\":1,\"273\":1}}],[\"createcontext\",{\"3\":{\"214\":1,\"237\":1}}],[\"createapp\",{\"0\":{\"196\":1},\"2\":{\"196\":1},\"3\":{\"196\":3}}],[\"createserver\",{\"3\":{\"15\":1}}],[\"createelement的形式\",{\"3\":{\"200\":2}}],[\"createelement\",{\"3\":{\"14\":1,\"94\":1,\"201\":4,\"202\":2}}],[\"case\",{\"3\":{\"215\":2}}],[\"call的参数是一个一个传递的\",{\"3\":{\"80\":1}}],[\"call和apply的区别在于\",{\"3\":{\"80\":1}}],[\"call和apply都是改变this的指向\",{\"3\":{\"80\":1}}],[\"call和apply和bind的区别\",{\"0\":{\"80\":1},\"3\":{\"79\":1}}],[\"call\",{\"2\":{\"80\":1},\"3\":{\"79\":4,\"80\":4,\"81\":1,\"174\":2,\"175\":1}}],[\"callback=onback\",{\"3\":{\"14\":1}}],[\"catch\",{\"3\":{\"76\":1}}],[\"caption\",{\"3\":{\"24\":1}}],[\"cache\",{\"3\":{\"7\":4,\"9\":1}}],[\"count\",{\"3\":{\"128\":1,\"208\":4,\"209\":2,\"212\":3,\"213\":4,\"214\":5,\"215\":2,\"216\":6,\"217\":5,\"230\":3}}],[\"code\",{\"3\":{\"40\":1}}],[\"collapse\",{\"3\":{\"24\":1}}],[\"color\",{\"3\":{\"24\":2,\"50\":4}}],[\"cors\",{\"0\":{\"15\":1},\"2\":{\"15\":1},\"3\":{\"15\":1}}],[\"commit阶段负责执行任务\",{\"3\":{\"220\":1}}],[\"commit阶段合并为一个阶段\",{\"3\":{\"220\":1}}],[\"commit阶段\",{\"3\":{\"220\":2}}],[\"compile\",{\"3\":{\"273\":1}}],[\"computed\",{\"3\":{\"273\":2}}],[\"component的方法\",{\"3\":{\"230\":1}}],[\"componentwillunmount\",{\"3\":{\"225\":1,\"229\":1}}],[\"componentwillupdate\",{\"3\":{\"224\":1}}],[\"componentwillreceiveprops\",{\"3\":{\"224\":1}}],[\"componentwillmount\",{\"3\":{\"223\":1}}],[\"componentdidupdate和componentwillunmount这三个生命周期函数的集合\",{\"3\":{\"230\":1}}],[\"componentdidupdate和componentwillunmount这三个生命周期钩子的集合体\",{\"3\":{\"213\":1}}],[\"componentdidupdate和componentwillunmount这三个生命周期钩子\",{\"3\":{\"210\":1}}],[\"componentdidupdate\",{\"3\":{\"224\":1,\"228\":1}}],[\"componentdidmount\",{\"3\":{\"223\":1}}],[\"component\",{\"3\":{\"208\":2,\"233\":1,\"234\":1,\"235\":1}}],[\"compare\",{\"3\":{\"137\":1}}],[\"com\",{\"3\":{\"12\":5,\"14\":1,\"185\":1}}],[\"concat\",{\"3\":{\"117\":1,\"126\":1,\"141\":1}}],[\"contextvalue\",{\"3\":{\"237\":2}}],[\"context的使用分为三步\",{\"3\":{\"237\":1}}],[\"context是\",{\"3\":{\"237\":1}}],[\"context\",{\"0\":{\"237\":1},\"2\":{\"237\":1},\"3\":{\"30\":1,\"237\":4}}],[\"content\",{\"3\":{\"15\":1,\"18\":3,\"19\":2,\"20\":2,\"47\":2,\"50\":1}}],[\"control的优先级要高于expires\",{\"3\":{\"7\":1}}],[\"control的值有很多\",{\"3\":{\"7\":1}}],[\"control替换了\",{\"3\":{\"7\":1}}],[\"control\",{\"3\":{\"7\":2,\"9\":1,\"15\":6}}],[\"consumer\",{\"3\":{\"237\":1}}],[\"console\",{\"3\":{\"3\":2,\"4\":7,\"15\":1,\"55\":12,\"56\":6,\"57\":3,\"58\":3,\"59\":9,\"60\":1,\"62\":3,\"63\":3,\"64\":4,\"65\":4,\"68\":1,\"69\":1,\"70\":4,\"74\":2,\"77\":6,\"79\":4,\"80\":10,\"147\":2,\"148\":3,\"149\":3,\"150\":2,\"156\":39,\"160\":1,\"162\":1,\"163\":1,\"167\":4,\"168\":4,\"174\":3,\"175\":4,\"213\":2,\"216\":1,\"217\":1,\"218\":1,\"230\":2,\"233\":1,\"241\":1,\"261\":1}}],[\"constructortreetolist\",{\"3\":{\"98\":2}}],[\"constructorlisttotree\",{\"3\":{\"90\":1}}],[\"constructor\",{\"3\":{\"69\":2,\"70\":2,\"170\":1,\"175\":4,\"208\":1,\"223\":1,\"227\":1,\"260\":1}}],[\"const声明的变量不会被提升到代码的最前面\",{\"3\":{\"56\":1}}],[\"const\",{\"0\":{\"52\":1},\"2\":{\"52\":1},\"3\":{\"2\":1,\"15\":2,\"55\":3,\"56\":1,\"57\":2,\"58\":1,\"59\":2,\"60\":3,\"62\":6,\"63\":5,\"65\":13,\"68\":1,\"69\":1,\"70\":2,\"74\":2,\"77\":14,\"79\":4,\"80\":13,\"94\":2,\"96\":2,\"174\":3,\"175\":1,\"196\":2,\"201\":2,\"212\":1,\"213\":1,\"214\":3,\"215\":1,\"216\":3,\"217\":3,\"218\":5,\"230\":1,\"234\":2,\"235\":2,\"237\":1,\"240\":1,\"241\":2,\"245\":4,\"246\":5,\"250\":1,\"251\":5,\"253\":2,\"254\":3}}],[\"c0145384\",{\"0\":{\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1}}],[\"资源已经发生了变化\",{\"3\":{\"7\":1}}],[\"服务器可以接收任何请求\",{\"3\":{\"16\":1}}],[\"服务器完全可以不遵守同源策略\",{\"3\":{\"16\":1}}],[\"服务器接受到请求后\",{\"3\":{\"8\":1}}],[\"服务器的时间和浏览器的时间可能就一致了\",{\"3\":{\"7\":1}}],[\"服务器会将资源的缓存策略一起返回给浏览器\",{\"3\":{\"7\":1}}],[\"即可\",{\"3\":{\"297\":1}}],[\"即使父组件传递给子组件的props没有发生改变\",{\"3\":{\"224\":1}}],[\"即使创建它的上下文已经销毁\",{\"3\":{\"3\":1}}],[\"即发送方会向网络中的所有主机发送请求\",{\"3\":{\"189\":1}}],[\"即先向根域名服务器发送请求\",{\"3\":{\"186\":1}}],[\"即在冒泡阶段执行事件处理程序\",{\"3\":{\"168\":1}}],[\"即如果空间不足\",{\"3\":{\"48\":1}}],[\"即如果存在剩余空间\",{\"3\":{\"48\":1}}],[\"即块级格式化上下文\",{\"3\":{\"30\":1}}],[\"即到了这个时间\",{\"3\":{\"7\":2}}],[\"强制缓存优先于协商缓存进行\",{\"3\":{\"9\":1}}],[\"强制缓存主要使用的是响应头中的两个字段\",{\"3\":{\"7\":1}}],[\"强制缓存\",{\"0\":{\"7\":1},\"2\":{\"7\":1},\"3\":{\"6\":1}}],[\"而memo是将组件的props缓存起来\",{\"3\":{\"286\":1}}],[\"而usememo函数返回的是一个值\",{\"3\":{\"217\":1}}],[\"而undefined是一个未定义的值\",{\"3\":{\"150\":1}}],[\"而handleclick的重新创建\",{\"3\":{\"217\":1}}],[\"而double的重新计算\",{\"3\":{\"216\":1}}],[\"而props只能在父子组件之间传递参数\",{\"3\":{\"214\":1}}],[\"而prefetch用来指定当前页面可能会用到的资源\",{\"3\":{\"43\":1}}],[\"而\",{\"3\":{\"202\":2,\"297\":2}}],[\"而在使用的时候再指定类型\",{\"3\":{\"256\":1}}],[\"而在使用的时候再指定类型的一种特性\",{\"3\":{\"256\":1}}],[\"而在\",{\"3\":{\"202\":1}}],[\"而是需要使用torefs将其转换为ref的形式\",{\"3\":{\"279\":1}}],[\"而是直接从react的包中引入jsx的运行时\",{\"3\":{\"200\":1}}],[\"而是通过一些路由器相连的\",{\"3\":{\"181\":1}}],[\"而接收方的mac地址是通过arp协议获取的\",{\"3\":{\"189\":1}}],[\"而settmmdiate属于宏任务\",{\"3\":{\"156\":1}}],[\"而其他任务都必须在后面排队等待\",{\"3\":{\"152\":1}}],[\"而null转化为数字是0\",{\"3\":{\"106\":1}}],[\"而null的类型是object\",{\"3\":{\"106\":1}}],[\"而null是一个空对象指针\",{\"3\":{\"106\":1}}],[\"而null是一个关键字\",{\"3\":{\"106\":1}}],[\"而apply的参数是一个数组\",{\"3\":{\"80\":1}}],[\"而bind是返回一个新的函数\",{\"3\":{\"80\":1}}],[\"而call又改变了this的指向\",{\"3\":{\"79\":1}}],[\"而const声明的变量是不可变的\",{\"3\":{\"58\":1}}],[\"而使用时是window调用的\",{\"3\":{\"59\":1}}],[\"而let和const声明的变量不能被重复声明\",{\"3\":{\"57\":1}}],[\"而且泛型帮助我们在代码编译的时候就知道我们传入的参数类型\",{\"3\":{\"256\":1}}],[\"而且还能够保证数据的顺序\",{\"3\":{\"179\":1}}],[\"而且不会丢失\",{\"3\":{\"179\":1}}],[\"而且不会随着浏览器的关闭而释放\",{\"3\":{\"7\":1}}],[\"而且bind的第一个参数是不能被改变的\",{\"3\":{\"80\":1}}],[\"而且后面的声明会覆盖前面的声明\",{\"3\":{\"57\":1}}],[\"而且会随着浏览器\",{\"3\":{\"7\":1}}],[\"而不是\",{\"3\":{\"296\":1}}],[\"而不是销毁它们\",{\"3\":{\"284\":1}}],[\"而不是ref的\",{\"3\":{\"279\":1}}],[\"而不是传递给onclick\",{\"3\":{\"234\":1}}],[\"而不是调用\",{\"3\":{\"234\":1}}],[\"而不是域名\",{\"3\":{\"188\":1}}],[\"而不是使用时所在的对象\",{\"3\":{\"59\":1}}],[\"而不是由服务器来决定\",{\"3\":{\"7\":1}}],[\"而不是再次向服务器发起请求\",{\"3\":{\"6\":1}}],[\"而全局作用域中的i在循环结束后\",{\"3\":{\"4\":1}}],[\"浏览器窗口的视口\",{\"3\":{\"250\":1}}],[\"浏览器解析\",{\"0\":{\"185\":1},\"2\":{\"185\":1}}],[\"浏览器规定\",{\"3\":{\"12\":1}}],[\"浏览器就会自动发送一个预检请求\",{\"3\":{\"15\":1}}],[\"浏览器就会使用最新的资源\",{\"3\":{\"8\":1}}],[\"浏览器就会使用缓存\",{\"3\":{\"8\":1}}],[\"浏览器就会向服务器发起请求\",{\"3\":{\"7\":2}}],[\"浏览器再次发送请求到服务器\",{\"3\":{\"8\":1}}],[\"浏览器强制缓存\",{\"3\":{\"7\":1}}],[\"浏览器缓存主要分为两种\",{\"3\":{\"7\":1}}],[\"浏览器缓存\",{\"3\":{\"7\":1,\"9\":1}}],[\"浏览器缓存机制又可以称为是http缓存机制`\",{\"3\":{\"6\":1}}],[\"浏览器会先检查本地缓存中是否有该网址对应的ip地址\",{\"3\":{\"186\":1}}],[\"浏览器会先检查本地缓存中是否有该网址对应的资源\",{\"3\":{\"185\":1}}],[\"浏览器会解析网址\",{\"3\":{\"185\":1}}],[\"浏览器会判断输入的网址是搜索内容还是网址\",{\"3\":{\"185\":1}}],[\"浏览器会携带缓存标识向服务器发起请求\",{\"3\":{\"8\":1}}],[\"浏览器会将其转换为https\",{\"3\":{\"185\":1}}],[\"浏览器会将这个请求拦截下来\",{\"3\":{\"12\":1}}],[\"浏览器会将js和图片解析完成后将他们放在内存缓存中\",{\"3\":{\"7\":1}}],[\"浏览器会将请求的资源缓存起来\",{\"3\":{\"6\":1}}],[\"浏览器会根据缓存策略来决定是否缓存资源\",{\"3\":{\"7\":1}}],[\"浏览器在第一次请求资源时\",{\"3\":{\"7\":1}}],[\"对应的\",{\"3\":{\"203\":5}}],[\"对应的组件的状态\",{\"3\":{\"203\":1}}],[\"对应的组件\",{\"3\":{\"203\":1}}],[\"对方法进行重写\",{\"3\":{\"175\":1}}],[\"对于文章列表\",{\"3\":{\"253\":1,\"254\":1}}],[\"对于静态资源\",{\"3\":{\"252\":1}}],[\"对于图片\",{\"3\":{\"251\":1}}],[\"对于数据\",{\"3\":{\"250\":1}}],[\"对于键盘操作这类\",{\"3\":{\"163\":1}}],[\"对于鼠标操作这类\",{\"3\":{\"163\":1}}],[\"对于一些重复性的请求\",{\"3\":{\"6\":1}}],[\"对每个元素进行操作\",{\"3\":{\"122\":6}}],[\"对类添加方法\",{\"0\":{\"70\":1},\"2\":{\"70\":1}}],[\"对象的\",{\"3\":{\"74\":1,\"77\":2}}],[\"对象的解构赋值\",{\"0\":{\"63\":1},\"2\":{\"63\":1}}],[\"对象\",{\"3\":{\"74\":1,\"77\":3,\"136\":2}}],[\"对象之前出现相互引用的情况\",{\"3\":{\"1\":1}}],[\"是通过控制元素的\",{\"3\":{\"267\":2}}],[\"是为了更好的复用\",{\"3\":{\"262\":1}}],[\"是不是进入可视区域\",{\"3\":{\"251\":1}}],[\"是不是使用缓存\",{\"3\":{\"7\":1}}],[\"是唯一数据源\",{\"3\":{\"240\":1}}],[\"是什么\",{\"3\":{\"238\":1}}],[\"是一种广播的方式\",{\"3\":{\"189\":1}}],[\"是一个函数\",{\"3\":{\"202\":1}}],[\"是一个一个的传递的\",{\"3\":{\"80\":1}}],[\"是一个独立的渲染区域\",{\"3\":{\"30\":1}}],[\"是一个相对单位\",{\"3\":{\"26\":1}}],[\"是一个相对时间\",{\"3\":{\"7\":1}}],[\"是一个字符串\",{\"3\":{\"8\":1}}],[\"是一个绝对时间\",{\"3\":{\"7\":1}}],[\"是一个闭包\",{\"3\":{\"3\":1}}],[\"是否类似于\",{\"2\":{\"286\":1}}],[\"是否相等\",{\"3\":{\"224\":1}}],[\"是否丢失\",{\"3\":{\"179\":1}}],[\"是否重复\",{\"3\":{\"179\":1}}],[\"是否在捕获阶段执行事件处理程序\",{\"3\":{\"168\":1}}],[\"是否显示表格中的空单元格\",{\"3\":{\"24\":1}}],[\"是单线程的\",{\"3\":{\"152\":1}}],[\"是用来表示父亲节点的\",{\"3\":{\"89\":1}}],[\"是最后一个promise实例\",{\"3\":{\"84\":1}}],[\"是resolve或reject的回调函数\",{\"3\":{\"76\":1}}],[\"是reject的回调函数\",{\"3\":{\"76\":1}}],[\"是类的方法\",{\"3\":{\"69\":1}}],[\"是window调用的\",{\"3\":{\"59\":1}}],[\"是\",{\"3\":{\"28\":8,\"201\":1}}],[\"是相对于父元素的宽度来计算的\",{\"3\":{\"26\":1}}],[\"是浏览器对javascript施加的安全限制\",{\"3\":{\"11\":1}}],[\"是由服务器来设置的\",{\"3\":{\"7\":1}}],[\"是指浏览器对于静态资源的缓存策略\",{\"3\":{\"6\":1}}],[\"在组件实例创建之后\",{\"3\":{\"279\":1}}],[\"在组件章节被移除时调用\",{\"3\":{\"277\":1,\"283\":1}}],[\"在组件章节被激活时调用\",{\"3\":{\"277\":1,\"283\":1}}],[\"在组件初始化渲染的时候不会执行\",{\"3\":{\"224\":1}}],[\"在由于数据更改导致的虚拟dom重新渲染和打补丁之后被调用\",{\"3\":{\"275\":1,\"281\":1}}],[\"在挂载完成后被调用\",{\"3\":{\"274\":1,\"280\":1}}],[\"在挂载开始之前被调用\",{\"3\":{\"274\":1,\"280\":1}}],[\"在实例销毁之后调用\",{\"3\":{\"276\":1,\"282\":1}}],[\"在实例销毁之前调用\",{\"3\":{\"276\":1,\"282\":1}}],[\"在实例创建完成后被立即调用\",{\"3\":{\"273\":1}}],[\"在实例初始化之后\",{\"3\":{\"273\":1}}],[\"在实际生活\",{\"3\":{\"181\":1}}],[\"在编译过程中\",{\"3\":{\"268\":2}}],[\"在需要使用参数的组件中\",{\"3\":{\"237\":1}}],[\"在兄弟组件通信中\",{\"3\":{\"235\":1}}],[\"在子组件可能会需要修改父组件传递过来的参数\",{\"3\":{\"234\":1}}],[\"在子类中\",{\"3\":{\"174\":1}}],[\"在这个生命周期中我们可以将组件的状态保存起来\",{\"3\":{\"290\":1}}],[\"在这个生命周期中我们可以重新激活组件\",{\"3\":{\"289\":1}}],[\"在这个钩子里\",{\"3\":{\"274\":1}}],[\"在这个钩子里面可以最早拿到新的props\",{\"3\":{\"224\":1}}],[\"在这个阶段已经完成init\",{\"3\":{\"273\":1}}],[\"在这个阶段\",{\"3\":{\"273\":2}}],[\"在这个方法中返回的任何值都会作为参数传递给componentdidupdate的第三个参数\",{\"3\":{\"228\":1}}],[\"在这个执行环境中\",{\"3\":{\"163\":1}}],[\"在fiber被创建完以后\",{\"3\":{\"204\":1}}],[\"在react中\",{\"3\":{\"245\":1,\"251\":1,\"253\":1}}],[\"在reactelement被创建完以后\",{\"3\":{\"203\":1}}],[\"在react17以后\",{\"3\":{\"200\":1}}],[\"在项目中\",{\"3\":{\"194\":1}}],[\"在数据更新之前被调用\",{\"3\":{\"275\":1,\"281\":1}}],[\"在数据链路层\",{\"3\":{\"189\":1}}],[\"在数组中间添加元素\",{\"3\":{\"117\":1}}],[\"在数组开头添加元素\",{\"3\":{\"117\":1}}],[\"在数组末尾添加元素\",{\"3\":{\"117\":1}}],[\"在dns解析完成以后\",{\"3\":{\"186\":1}}],[\"在寻址过程中\",{\"3\":{\"181\":1}}],[\"在那里调用\",{\"3\":{\"160\":1}}],[\"在宏任务队列中\",{\"3\":{\"156\":3}}],[\"在微任务队列中\",{\"3\":{\"156\":2}}],[\"在javascript中\",{\"3\":{\"147\":1}}],[\"在还未执行到resolve或reject时\",{\"3\":{\"74\":1}}],[\"在原型链上添加方法\",{\"3\":{\"70\":1}}],[\"在\",{\"0\":{\"201\":1,\"202\":1},\"2\":{\"201\":1,\"202\":1},\"3\":{\"65\":2}}],[\"在函数内部可以访问到的变量和函数\",{\"3\":{\"55\":1}}],[\"在函数中使用settimeout\",{\"3\":{\"4\":1}}],[\"在大括号内可以访问到的变量和函数\",{\"3\":{\"55\":1}}],[\"在代码的任何地方都可以访问到的变量和函数\",{\"3\":{\"55\":1}}],[\"在空间有剩余的情况下\",{\"3\":{\"48\":2}}],[\"在空间不足的情况下\",{\"3\":{\"48\":2}}],[\"在主轴上如何对齐\",{\"3\":{\"47\":1}}],[\"在副轴上如何对齐\",{\"3\":{\"47\":1}}],[\"在css中通过box\",{\"3\":{\"18\":1}}],[\"在每次循环时\",{\"3\":{\"4\":1}}],[\"+1\",{\"3\":{\"208\":1}}],[\"+this\",{\"3\":{\"175\":4}}],[\"+\",{\"3\":{\"4\":2,\"15\":2,\"18\":2,\"19\":4,\"20\":4,\"22\":2,\"126\":1,\"134\":9,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"230\":1,\"250\":2,\"251\":1,\"253\":1}}],[\"button>\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":2,\"230\":1,\"234\":3,\"235\":1,\"241\":1}}],[\"b53997e2\",{\"0\":{\"194\":1,\"195\":1,\"196\":1,\"197\":1}}],[\"bce0ae32\",{\"0\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"b7fdfeba\",{\"0\":{\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1}}],[\"bind改变了this的指向\",{\"3\":{\"79\":1}}],[\"bind\",{\"2\":{\"80\":1},\"3\":{\"79\":3,\"80\":2,\"81\":1}}],[\"blue\",{\"3\":{\"50\":1}}],[\"block\",{\"3\":{\"30\":1,\"267\":1}}],[\"base<t>\",{\"3\":{\"260\":1}}],[\"basis的简写\",{\"3\":{\"48\":1}}],[\"basis\",{\"3\":{\"48\":1}}],[\"baidu\",{\"3\":{\"185\":1}}],[\"bar\",{\"3\":{\"160\":2}}],[\"background\",{\"3\":{\"50\":4}}],[\"bfc的特性\",{\"0\":{\"32\":1},\"2\":{\"32\":1}}],[\"bfc\",{\"3\":{\"30\":2}}],[\"bfc布局\",{\"1\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1}}],[\"beforedestroy\",{\"3\":{\"276\":1}}],[\"beforeupdate\",{\"3\":{\"275\":1}}],[\"beforecreate\",{\"3\":{\"273\":1}}],[\"beforemount\",{\"3\":{\"269\":1,\"274\":1}}],[\"before\",{\"3\":{\"22\":1}}],[\"body\",{\"3\":{\"250\":4}}],[\"boolean\",{\"0\":{\"104\":1},\"2\":{\"104\":1},\"3\":{\"104\":2,\"133\":1}}],[\"box\",{\"3\":{\"18\":4}}],[\"border+margin\",{\"3\":{\"19\":2}}],[\"border\",{\"3\":{\"18\":2,\"20\":2,\"24\":5}}],[\"b\",{\"3\":{\"4\":4,\"23\":2,\"55\":7,\"56\":3,\"57\":3,\"58\":3,\"62\":2,\"64\":2,\"65\":2,\"80\":2,\"142\":3}}],[\"当props发生变化时\",{\"3\":{\"286\":1}}],[\"当组件被激活时\",{\"3\":{\"286\":1}}],[\"当父组件发生更新\",{\"0\":{\"285\":1},\"2\":{\"285\":1}}],[\"当捕获一个来自子孙组件的错误时被调用\",{\"3\":{\"277\":1}}],[\"当isshow从true变为false时\",{\"3\":{\"269\":1}}],[\"当isshow从false变为true时\",{\"3\":{\"269\":1}}],[\"当文章加载完成后\",{\"3\":{\"254\":2}}],[\"当文章在可视区域时\",{\"3\":{\"253\":1}}],[\"当然你也可以使用intersectionobserver来实现图片懒加载\",{\"3\":{\"251\":1}}],[\"当然我们通过props不仅只能获取到参数\",{\"3\":{\"233\":1}}],[\"当这个值等于document\",{\"3\":{\"250\":1}}],[\"当滚动事件触发时\",{\"3\":{\"246\":1}}],[\"当路由参数id发生变化时\",{\"3\":{\"246\":1}}],[\"当再次打开页面时\",{\"3\":{\"245\":1,\"246\":1}}],[\"当一个组件从页面上被移除之前执行\",{\"3\":{\"225\":1,\"229\":1}}],[\"当一个组件从父组件接收到新的props之前执行\",{\"3\":{\"224\":1}}],[\"当一个组件被重新渲染之后执行\",{\"3\":{\"224\":1,\"228\":1}}],[\"当一个组件要被重新渲染之前执行\",{\"3\":{\"224\":1}}],[\"当一个组件接收到新的props或者state之后\",{\"3\":{\"224\":1}}],[\"当一个变量声明了但是没有赋值时\",{\"3\":{\"147\":1}}],[\"当你的组件需要保存一些不需要导致视图更新的数据时\",{\"3\":{\"218\":1}}],[\"当`app`组件加载好了之后\",{\"3\":{\"196\":1}}],[\"当应用层需要传递的数据非常大\",{\"3\":{\"180\":1}}],[\"当数据从一端传到另一端的时候\",{\"3\":{\"181\":1}}],[\"当数据传到另一端时\",{\"3\":{\"179\":1}}],[\"当数组中的每一个promise对象都变为resolved状态时\",{\"3\":{\"77\":1}}],[\"当我们点击div3时\",{\"3\":{\"167\":1}}],[\"当用户滚动时\",{\"3\":{\"253\":2}}],[\"当用户滚动到图片位置时\",{\"3\":{\"251\":2}}],[\"当用户滚动到页面底部时\",{\"3\":{\"250\":3}}],[\"当用户再次访问时\",{\"3\":{\"252\":2}}],[\"当用户打开首页时\",{\"3\":{\"248\":1}}],[\"当用户点击ul的子元素时\",{\"3\":{\"163\":1}}],[\"当用户想要修改服务器数据的时候\",{\"3\":{\"15\":1}}],[\"当访问一个变量时\",{\"3\":{\"159\":1}}],[\"当前宏任务队列中的任务执行完毕\",{\"3\":{\"156\":1}}],[\"当主线程空闲时\",{\"3\":{\"155\":1}}],[\"当weakmap的键名所指向的对象被回收\",{\"3\":{\"142\":1}}],[\"当obj被回收的时候\",{\"3\":{\"142\":1}}],[\"当对象和它所引用的对象一起拷贝时即发生深拷贝\",{\"3\":{\"142\":1}}],[\"当count等于promises的长度时\",{\"3\":{\"85\":1}}],[\"当使用new操作符构造函数时\",{\"3\":{\"80\":1}}],[\"当符合某种条件的时候才会阻塞渲染\",{\"3\":{\"39\":1}}],[\"当浏览器开始解析html文件时\",{\"3\":{\"36\":1}}],[\"当浏览器在发送跨域请求的时候\",{\"3\":{\"15\":1}}],[\"当服务器看到这些额外的参数\",{\"3\":{\"14\":1}}],[\"当强制缓存失效后\",{\"3\":{\"8\":1}}],[\"当强制缓存失效以后\",{\"3\":{\"8\":1}}],[\"当下次请求时\",{\"3\":{\"6\":1}}],[\"当需要在某个时间点上执行函数\",{\"3\":{\"4\":1}}],[\"当settimeout执行时\",{\"3\":{\"4\":1}}],[\"张三\",{\"3\":{\"4\":1,\"216\":1,\"217\":1}}],[\"p>\",{\"3\":{\"230\":1,\"245\":1,\"246\":1}}],[\"pop\",{\"3\":{\"118\":1}}],[\"position\",{\"3\":{\"24\":1,\"28\":1,\"29\":1,\"31\":1}}],[\"post\",{\"3\":{\"15\":1,\"245\":1,\"246\":2}}],[\"pid\",{\"3\":{\"88\":12,\"89\":1}}],[\"pure\",{\"3\":{\"201\":3,\"202\":3}}],[\"push\",{\"3\":{\"80\":1,\"90\":2,\"98\":3,\"117\":1}}],[\"put\",{\"3\":{\"15\":1}}],[\"p3\",{\"3\":{\"77\":4}}],[\"p2\",{\"3\":{\"77\":4}}],[\"pending\",{\"3\":{\"75\":1}}],[\"person\",{\"3\":{\"4\":2,\"68\":3,\"69\":2,\"70\":6,\"80\":4,\"174\":10,\"175\":3}}],[\"provider>\",{\"3\":{\"214\":1,\"237\":1}}],[\"provider\",{\"3\":{\"214\":1,\"237\":2}}],[\"proto\",{\"3\":{\"171\":2}}],[\"prototype\",{\"3\":{\"68\":1,\"70\":2,\"141\":1,\"170\":1,\"174\":5}}],[\"process\",{\"3\":{\"155\":1,\"156\":3}}],[\"promise放入微任务队列\",{\"3\":{\"156\":3}}],[\"promise2\",{\"3\":{\"156\":2}}],[\"promise1\",{\"3\":{\"156\":1}}],[\"promise是一个有iterator接口的对象\",{\"3\":{\"84\":1}}],[\"promiseall\",{\"3\":{\"84\":1}}],[\"promise实例数组\",{\"3\":{\"84\":1}}],[\"promises\",{\"3\":{\"84\":4}}],[\"promise对象的状态为pending\",{\"3\":{\"74\":1}}],[\"promise对象是一个构造函数\",{\"3\":{\"74\":1}}],[\"promise\",{\"0\":{\"73\":1,\"74\":1,\"75\":1},\"1\":{\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1},\"2\":{\"73\":1,\"74\":1,\"75\":1},\"3\":{\"74\":3,\"77\":15,\"82\":3,\"83\":1,\"84\":8,\"85\":4,\"86\":1,\"155\":2,\"156\":14}}],[\"props和context都已经解析完成\",{\"3\":{\"279\":1}}],[\"props和this\",{\"3\":{\"223\":1}}],[\"props就是一个对象\",{\"3\":{\"233\":1}}],[\"props\",{\"3\":{\"65\":1,\"201\":6,\"202\":2,\"208\":2,\"209\":4,\"227\":1,\"228\":1,\"233\":4,\"234\":5,\"235\":4,\"273\":2}}],[\"prestate\",{\"3\":{\"223\":1,\"224\":1,\"228\":2}}],[\"preprops\",{\"3\":{\"223\":1,\"224\":1,\"228\":2}}],[\"pre\",{\"3\":{\"220\":1}}],[\"prev\",{\"3\":{\"122\":1}}],[\"premise\",{\"3\":{\"100\":1}}],[\"prefetch\",{\"2\":{\"43\":1},\"3\":{\"43\":2}}],[\"preload用来指定当前页面必须要用到的资源\",{\"3\":{\"43\":1}}],[\"preload和prefetch是html5中的新特性\",{\"3\":{\"43\":1}}],[\"preload\",{\"2\":{\"43\":1},\"3\":{\"43\":2}}],[\"print等\",{\"3\":{\"40\":1}}],[\"print\",{\"3\":{\"39\":1,\"41\":1}}],[\"px\",{\"3\":{\"26\":1,\"100\":1}}],[\"p\",{\"3\":{\"22\":7}}],[\"padend\",{\"3\":{\"128\":1}}],[\"padstring\",{\"3\":{\"128\":2}}],[\"padstart\",{\"3\":{\"128\":1}}],[\"padding\",{\"3\":{\"18\":1,\"19\":2,\"20\":2,\"24\":1}}],[\"parent\",{\"3\":{\"233\":1,\"234\":1,\"235\":1}}],[\"parentid\",{\"3\":{\"90\":2,\"96\":4,\"98\":4}}],[\"parse\",{\"3\":{\"143\":1}}],[\"parseint\",{\"3\":{\"102\":2,\"133\":1}}],[\"param\",{\"3\":{\"84\":1,\"98\":1}}],[\"patch\",{\"3\":{\"15\":1}}],[\"page\",{\"3\":{\"12\":4}}],[\"p1\",{\"3\":{\"4\":3,\"68\":2,\"69\":2,\"70\":6,\"74\":2,\"77\":6}}],[\"私有变量\",{\"3\":{\"4\":1}}],[\"nextstate\",{\"3\":{\"224\":2,\"228\":1}}],[\"nextprops\",{\"3\":{\"224\":3,\"228\":1}}],[\"nexttick的优先级比promise高\",{\"3\":{\"156\":1}}],[\"nexttick属于微任务\",{\"3\":{\"156\":1}}],[\"nexttick和setimmediate\",{\"3\":{\"156\":1}}],[\"nexttick\",{\"3\":{\"156\":6}}],[\"nexttick等等\",{\"3\":{\"155\":1}}],[\"new绑定\",{\"3\":{\"80\":1}}],[\"new\",{\"3\":{\"59\":1,\"68\":1,\"69\":1,\"70\":2,\"74\":1,\"77\":7,\"80\":1,\"84\":1,\"156\":1,\"174\":5,\"175\":1,\"250\":1,\"251\":1}}],[\"number或者symbol\",{\"3\":{\"136\":1}}],[\"number\",{\"0\":{\"102\":1},\"2\":{\"102\":1},\"3\":{\"102\":2,\"150\":3,\"261\":1,\"263\":1}}],[\"num\",{\"3\":{\"74\":4,\"77\":28}}],[\"null转化为0\",{\"3\":{\"150\":1}}],[\"null和undefined都会转换为false\",{\"3\":{\"149\":1}}],[\"null和undefined是相等的\",{\"3\":{\"149\":1}}],[\"null和undefined的区别\",{\"1\":{\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"null的值是object\",{\"3\":{\"148\":1}}],[\"null表示当前这个值\",{\"3\":{\"148\":1}}],[\"null除外\",{\"3\":{\"142\":1}}],[\"null会返回object\",{\"3\":{\"105\":1}}],[\"null\",{\"0\":{\"105\":1,\"148\":1,\"149\":1,\"150\":1},\"2\":{\"105\":1,\"148\":1,\"149\":1,\"150\":1},\"3\":{\"3\":2,\"80\":2,\"100\":1,\"102\":2,\"104\":1,\"106\":1,\"134\":1,\"136\":1,\"137\":3,\"138\":2,\"148\":4,\"149\":4,\"150\":1,\"201\":2,\"203\":6,\"218\":6,\"241\":1,\"245\":1,\"246\":1}}],[\"nan和任何值都不相等\",{\"3\":{\"136\":1}}],[\"nan\",{\"3\":{\"102\":7,\"104\":1,\"136\":2,\"137\":2,\"150\":1}}],[\"nav\",{\"3\":{\"23\":2}}],[\"name=\",{\"3\":{\"233\":1,\"235\":1}}],[\"name+\",{\"3\":{\"175\":1}}],[\"name\",{\"3\":{\"4\":3,\"59\":4,\"60\":4,\"63\":7,\"64\":9,\"65\":2,\"68\":6,\"69\":6,\"70\":12,\"79\":5,\"80\":10,\"88\":12,\"174\":20,\"175\":16,\"216\":2,\"217\":2,\"233\":2,\"234\":6,\"235\":5,\"240\":2,\"259\":1,\"260\":4,\"262\":1,\"263\":1}}],[\"now\",{\"3\":{\"218\":6}}],[\"nowrap\",{\"3\":{\"47\":1}}],[\"node下打印的是\",{\"3\":{\"296\":1}}],[\"node\",{\"3\":{\"98\":4}}],[\"nodejs\",{\"3\":{\"15\":1}}],[\"not\",{\"3\":{\"40\":1}}],[\"not|only\",{\"3\":{\"40\":1}}],[\"none\",{\"3\":{\"8\":3,\"9\":1,\"28\":2,\"29\":1,\"48\":1,\"267\":1}}],[\"no\",{\"3\":{\"7\":2}}],[\"n\",{\"3\":{\"4\":2,\"62\":1,\"294\":1,\"295\":1,\"296\":1}}],[\"那么返回的是null\",{\"3\":{\"295\":1}}],[\"那么子组件会调用上面三个函数\",{\"3\":{\"285\":1}}],[\"那么子组件的生命周期同样也会发生更新\",{\"3\":{\"285\":1}}],[\"那么子组件的生命周期会发生怎么样的变化\",{\"0\":{\"285\":1},\"2\":{\"285\":1}}],[\"那么这个组件会被缓存\",{\"3\":{\"284\":1}}],[\"那么这个组件就不会被重新渲染\",{\"3\":{\"224\":1}}],[\"那么该元素的事件监听器也会被移除\",{\"3\":{\"267\":1}}],[\"那么\",{\"3\":{\"267\":4}}],[\"那么你就需要一层一层的传递参数\",{\"3\":{\"235\":1}}],[\"那么你的组件的层级是不能太深的\",{\"3\":{\"235\":1}}],[\"那么兄弟组件就可以通过父组件来通信了\",{\"3\":{\"235\":1}}],[\"那么因变量就会重新创建\",{\"3\":{\"217\":1}}],[\"那么因变量就会重新计算\",{\"3\":{\"216\":1}}],[\"那么视图就会发生变化\",{\"3\":{\"216\":1,\"217\":1}}],[\"那么首页的数据还未加载\",{\"3\":{\"194\":1}}],[\"那么我们就来谈谈\",{\"3\":{\"163\":1}}],[\"那么工作量很大\",{\"3\":{\"163\":1}}],[\"那么异步任务又分为很多种\",{\"3\":{\"155\":1}}],[\"那么weakmap的键名和键值也会被回收\",{\"3\":{\"142\":1}}],[\"那么比较的是两个对象的引用是否相等\",{\"3\":{\"136\":1}}],[\"那么第一次迭代的prev为数组的第一个元素\",{\"3\":{\"122\":1}}],[\"那么children就是一个数组\",{\"3\":{\"94\":1}}],[\"那么children就是一个对象\",{\"3\":{\"94\":1}}],[\"那么直接放在\",{\"3\":{\"85\":1}}],[\"那么直接存储数据\",{\"3\":{\"84\":1}}],[\"那么会将对象转换为原始类型的值\",{\"3\":{\"136\":1}}],[\"那么会将布尔值\",{\"3\":{\"136\":1}}],[\"那么会在第一处遇到的reject的地方抛出错误\",{\"3\":{\"83\":1}}],[\"那么会报错\",{\"3\":{\"56\":1}}],[\"那么promise\",{\"3\":{\"83\":1}}],[\"那么代表该请求的缓存失效\",{\"3\":{\"9\":1}}],[\"那么将请求的资源缓存到哪里呢\",{\"3\":{\"7\":1}}],[\"那么为什么会产生不同呢\",{\"3\":{\"4\":1}}],[\"那么就返回true\",{\"3\":{\"224\":1}}],[\"那么就返回false\",{\"3\":{\"224\":1}}],[\"那么就需要将这个上下文暴露出去\",{\"3\":{\"214\":1}}],[\"那么就需要等待这个\",{\"3\":{\"85\":1}}],[\"那么就需要等待这个promise实例的状态变更\",{\"3\":{\"84\":1}}],[\"那么就会进行类型转换\",{\"3\":{\"136\":1}}],[\"那么就会转化为字符串\",{\"3\":{\"134\":1}}],[\"那么就会导致内存泄漏\",{\"3\":{\"2\":1}}],[\"那么就可以调用resolve了\",{\"3\":{\"85\":1}}],[\"那么就直接将这个错误抛出\",{\"3\":{\"84\":1}}],[\"那么就将result作为参数传入resolve\",{\"3\":{\"84\":1}}],[\"那么就将结果放在result里面\",{\"3\":{\"84\":1}}],[\"那么就不会被清除\",{\"3\":{\"1\":1}}],[\"此时\",{\"3\":{\"277\":1,\"279\":1}}],[\"此时dom节点已经生成\",{\"3\":{\"274\":1,\"280\":1}}],[\"此时我们可以访问到data\",{\"3\":{\"273\":1}}],[\"此时我们可以根据新的props或者state来判断组件是否需要重新渲染\",{\"3\":{\"224\":1}}],[\"此时可以获取到最新的\",{\"3\":{\"228\":1}}],[\"此时可以获取到真实的\",{\"3\":{\"223\":1,\"224\":1,\"228\":1}}],[\"此时可以做一些清理工作\",{\"3\":{\"225\":1,\"229\":1}}],[\"此时可以根据新的props或者state来修改组件的状态对象\",{\"3\":{\"224\":1}}],[\"此时可以根据新的props来修改组件的状态对象\",{\"3\":{\"224\":1}}],[\"此时可以修改组件的状态对象\",{\"3\":{\"223\":1}}],[\"此时宏任务队列中的任务执行完毕\",{\"3\":{\"156\":1}}],[\"此时主线程空闲\",{\"3\":{\"156\":1}}],[\"此时微任务队列中的任务执行完毕\",{\"3\":{\"156\":2}}],[\"此时i的值已经变成了5\",{\"3\":{\"4\":1}}],[\"此时fn3指向了fn2\",{\"3\":{\"3\":1}}],[\"会缓存不活动的组件实例\",{\"3\":{\"284\":1}}],[\"会触发元素的beforeunmount\",{\"3\":{\"269\":1}}],[\"会触发元素的beforecreate\",{\"3\":{\"269\":1}}],[\"会触发元素的生命周期\",{\"3\":{\"269\":1}}],[\"会在元素上添加一个\",{\"3\":{\"268\":2}}],[\"会加载所有文章\",{\"3\":{\"248\":1}}],[\"会造成页面卡顿\",{\"3\":{\"220\":1}}],[\"会根据产生的任务的优先级来决定是否执行\",{\"3\":{\"220\":1}}],[\"会根据if\",{\"3\":{\"8\":1}}],[\"会导致视图的重新渲染\",{\"3\":{\"216\":1,\"217\":1}}],[\"会导致页面显示不全\",{\"3\":{\"194\":1}}],[\"会被转化成\",{\"0\":{\"201\":1,\"202\":1},\"2\":{\"201\":1,\"202\":1},\"3\":{\"202\":2}}],[\"会被转换成一个立即resolve的promise对象\",{\"3\":{\"156\":1}}],[\"会有一个缓存\",{\"3\":{\"189\":1}}],[\"会从div1开始\",{\"3\":{\"168\":1}}],[\"会从div3开始\",{\"3\":{\"167\":1}}],[\"会依次输出div3\",{\"3\":{\"167\":1,\"168\":1}}],[\"会先从foo的作用域中查找\",{\"3\":{\"160\":1}}],[\"会先从当前作用域查找\",{\"3\":{\"159\":1}}],[\"会先执行微任务队列中的任务\",{\"3\":{\"155\":1}}],[\"会调用那个then函数\",{\"3\":{\"156\":1}}],[\"会进行隐式类型转换\",{\"3\":{\"136\":1}}],[\"会将元素添加到\",{\"3\":{\"267\":1}}],[\"会将元素从\",{\"3\":{\"267\":1}}],[\"会将元素的\",{\"3\":{\"267\":2}}],[\"会将其他类型转化为boolean\",{\"3\":{\"134\":1}}],[\"会将不会被使用的对象进行清除\",{\"3\":{\"1\":1}}],[\"会改变数组本身\",{\"3\":{\"117\":1,\"118\":1,\"121\":2}}],[\"会把变量的声明提升到代码的最前面\",{\"3\":{\"56\":1}}],[\"会暂停html的解析\",{\"3\":{\"35\":1}}],[\"会自动在请求头中加入origin字段\",{\"3\":{\"15\":1}}],[\"会创建一个新的上下文\",{\"3\":{\"4\":1}}],[\"会访问到闭包中的i\",{\"3\":{\"4\":1}}],[\"这时\",{\"3\":{\"285\":1}}],[\"这时候需要暴露\",{\"3\":{\"237\":1}}],[\"这时候我们就可以使用泛型来解决这个问题\",{\"3\":{\"258\":1}}],[\"这时候我们就需要一个系统加载的功能\",{\"3\":{\"194\":1}}],[\"这时候我们需要使用context来解决这个问题\",{\"3\":{\"236\":1}}],[\"这时候姐可以在子组件内部通过props\",{\"3\":{\"234\":1}}],[\"这时候就只能用useref了\",{\"3\":{\"218\":1}}],[\"这时候就会把数据分成多个小的数据包\",{\"3\":{\"180\":1}}],[\"这时候就会无法获取到父函数中的变量\",{\"3\":{\"4\":1}}],[\"这时候timmer是undefined\",{\"3\":{\"218\":1}}],[\"这时候应用层就会生成相应的http报文\",{\"3\":{\"186\":1}}],[\"这时候哦我们可以使用事件委托\",{\"3\":{\"163\":1}}],[\"这时候主线程空闲\",{\"3\":{\"156\":1}}],[\"这时候服务器就可以根据这个值来决定是否同意这次请求\",{\"3\":{\"15\":1}}],[\"这时候请求的内容就会被当做javascript代码去执行\",{\"3\":{\"14\":1}}],[\"这里的移除指的是keep\",{\"3\":{\"277\":1,\"283\":1}}],[\"这里的激活指的是keep\",{\"3\":{\"277\":1,\"283\":1}}],[\"这里的resolve\",{\"3\":{\"156\":1}}],[\"这可能会导致无限循环的更新\",{\"3\":{\"275\":1,\"281\":1}}],[\"这些事件就是生命周期函数\",{\"3\":{\"220\":1}}],[\"这些数据不会导致视图的重新渲染\",{\"3\":{\"218\":1}}],[\"这些数据只有在依赖的值发生改变的时候\",{\"3\":{\"216\":1}}],[\"这些函数只有在依赖的值发生改变的时候\",{\"3\":{\"217\":1}}],[\"这些异步任务又有什么区别呢\",{\"3\":{\"155\":1}}],[\"这是一个静态方法\",{\"3\":{\"227\":1}}],[\"这是为了模拟立即卸载组件和重新挂载组件的情况\",{\"3\":{\"213\":1}}],[\"这是因为null是一个空对象\",{\"3\":{\"150\":1}}],[\"这是因为==他会进行类型转换\",{\"3\":{\"149\":1}}],[\"这是因为\",{\"3\":{\"7\":1,\"167\":1,\"168\":1}}],[\"这才是真正的数据发送过程\",{\"3\":{\"190\":1}}],[\"这两个生命周期函数只有在组件被激活时才会被调用\",{\"3\":{\"287\":1}}],[\"这两个生命周期函数和render函数\",{\"3\":{\"285\":1}}],[\"这两个地址都是ip地址\",{\"3\":{\"188\":1}}],[\"这两个字段的值分别是上一次请求返回的last\",{\"3\":{\"8\":1}}],[\"这就带来了一些生命周期钩子被废弃\",{\"3\":{\"220\":1}}],[\"这就需要路由器来帮助我们选择路由\",{\"3\":{\"181\":1}}],[\"这就需要网络层来帮助传输层完成这个工作\",{\"3\":{\"181\":1}}],[\"这就是闭包的一个特性\",{\"3\":{\"3\":1}}],[\"这种\",{\"3\":{\"234\":1}}],[\"这种事件模型同时支持冒泡阶段和捕获阶段\",{\"3\":{\"168\":1}}],[\"这种事件模型只支持冒泡阶段\",{\"3\":{\"167\":1}}],[\"这种需要转化为boolean的场景\",{\"3\":{\"134\":1}}],[\"这也就是我们说的\",{\"3\":{\"162\":1}}],[\"这道题目其实就是和上面一题类似\",{\"3\":{\"89\":1}}],[\"这边附上\",{\"3\":{\"283\":1}}],[\"这边我们来解释一下window\",{\"3\":{\"250\":1}}],[\"这边我们考虑的都是键入网址内容\",{\"3\":{\"185\":1}}],[\"这边我们引申出一个问题\",{\"3\":{\"79\":1}}],[\"这边出现了process\",{\"3\":{\"156\":1}}],[\"这边就不写了\",{\"3\":{\"142\":1}}],[\"这边变为fullfilled有两种情况\",{\"3\":{\"83\":1}}],[\"这边flex比较复杂\",{\"3\":{\"48\":1}}],[\"这段区域内不能访问到变量\",{\"3\":{\"56\":1}}],[\"这段代码其实是一个闭包\",{\"3\":{\"4\":1}}],[\"这样我们就可以在别的地方使用这个别名了\",{\"3\":{\"262\":2}}],[\"这样我们就可以在函数内部使用泛型的属性和方法了\",{\"3\":{\"261\":1,\"262\":1}}],[\"这样我们就可以直接在ul上增加点击事件\",{\"3\":{\"163\":1}}],[\"这样会导致代码的可读性变差\",{\"3\":{\"236\":1}}],[\"这样会导致父组件的参数变多\",{\"3\":{\"235\":1}}],[\"这样只要每次渲染子组件\",{\"3\":{\"234\":1}}],[\"这样一层一层\",{\"3\":{\"171\":1}}],[\"这样的话\",{\"3\":{\"142\":2}}],[\"这样就会导致代码的可读性变差\",{\"3\":{\"235\":1}}],[\"这样就会导致缓存失效\",{\"3\":{\"7\":1}}],[\"这样就会导致缓存生效\",{\"3\":{\"7\":1}}],[\"这样就减少了打包的体积\",{\"3\":{\"200\":1}}],[\"这样就不需要引入react了\",{\"3\":{\"200\":1}}],[\"这样就不会造成内存泄漏了\",{\"3\":{\"142\":1}}],[\"这样就不会阻塞dom树的生成\",{\"3\":{\"38\":1}}],[\"这样就可以实现骨架屏的效果\",{\"3\":{\"254\":1}}],[\"这样就可以实现继承\",{\"3\":{\"174\":1}}],[\"这样就可以根据任务的优先级来安排任务的调度\",{\"3\":{\"220\":1}}],[\"这样就可以保证\",{\"3\":{\"196\":1}}],[\"这样就可以把所有的节点都遍历到了\",{\"3\":{\"97\":1}}],[\"这样就可以避免css阻塞dom树的生成\",{\"3\":{\"39\":1}}],[\"这样是为了确保css能够正确的渲染dom树\",{\"3\":{\"36\":1}}],[\"这样浏览器就认为这是同源的了\",{\"3\":{\"16\":1}}],[\"这个就是直接在调用它\",{\"3\":{\"234\":1}}],[\"这个时候我们就需要使用到子传父的方式\",{\"3\":{\"234\":1}}],[\"这个时候我们就需要使用到父传子的方式\",{\"3\":{\"233\":1}}],[\"这个时候就可以使用react的上下文对象来实现\",{\"3\":{\"214\":1}}],[\"这个生命周期函数主要用于性能优化\",{\"3\":{\"224\":1}}],[\"这个方法会返回一个字符串\",{\"3\":{\"295\":1}}],[\"这个方法的返回值会作为参数传递给componentdidupdate的第三个参数\",{\"3\":{\"228\":1}}],[\"这个方法的返回值会被添加到组件的状态对象\",{\"3\":{\"227\":2}}],[\"这个方法的作用就是在组件更新之前获取到最新的\",{\"3\":{\"228\":1}}],[\"这个方法的作用就是根据新的props来更新组件的状态对象\",{\"3\":{\"227\":1}}],[\"这个方法在组件初始化渲染的时候不会被调用\",{\"3\":{\"228\":1}}],[\"这个方法在组件更新之前执行\",{\"3\":{\"228\":1}}],[\"这个方法在组件实例化之后和接收到新的props之后执行\",{\"3\":{\"227\":1}}],[\"这个方法在服务端渲染中也会被调用\",{\"3\":{\"223\":1}}],[\"这个方法不能访问到组件实例\",{\"3\":{\"227\":1}}],[\"这个方法也会被执行\",{\"3\":{\"224\":2}}],[\"这个过程中会伴随着一些事件\",{\"3\":{\"220\":1}}],[\"这个过程是循环不断的\",{\"3\":{\"154\":1}}],[\"这个定时器不需要导致视图的更新\",{\"3\":{\"218\":1}}],[\"这个属性可以用来存储数据\",{\"3\":{\"218\":1}}],[\"这个属性指向函数的原型对象\",{\"3\":{\"170\":1}}],[\"这个对象有一个current属性\",{\"3\":{\"218\":1}}],[\"这个对象包含了实际的值\",{\"3\":{\"114\":1}}],[\"这个数组的第一个元素就是状态对象\",{\"3\":{\"212\":1}}],[\"这个参数就是状态对象\",{\"3\":{\"212\":1}}],[\"这个参数就是我们的树结构数据\",{\"3\":{\"97\":1}}],[\"这个深拷贝还是有问题的\",{\"3\":{\"142\":1}}],[\"这个低代码项目\",{\"3\":{\"100\":1}}],[\"这个不使用apply其实也可以做到\",{\"3\":{\"80\":1}}],[\"这个其实就是相当于window\",{\"3\":{\"79\":1}}],[\"这个请求的作用是询问服务器是否允许这种请求\",{\"3\":{\"15\":1}}],[\"这个请求是一个options请求\",{\"3\":{\"15\":1}}],[\"这个字段的值就是当前页面的源\",{\"3\":{\"15\":1}}],[\"这个函数的作用就相当于componentdidmount\",{\"3\":{\"230\":1}}],[\"这个函数的作用是拿到服务器返回的数据\",{\"3\":{\"14\":1}}],[\"这个函数会在组件初始化渲染之后执行\",{\"3\":{\"213\":1}}],[\"这个函数就相当于componentdidmount\",{\"3\":{\"213\":1}}],[\"这个函数就是onback\",{\"3\":{\"14\":1}}],[\"这个函数可以用来修改状态对象\",{\"3\":{\"212\":1}}],[\"这个函数接收一个参数\",{\"3\":{\"97\":1}}],[\"4761c778\",{\"0\":{\"243\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1}}],[\"452c4c68\",{\"0\":{\"170\":1,\"171\":1,\"172\":1,\"173\":1}}],[\"400px\",{\"3\":{\"50\":1}}],[\"40em\",{\"3\":{\"39\":1,\"40\":4}}],[\"4d21c07a\",{\"0\":{\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1}}],[\"4\",{\"0\":{\"43\":1,\"287\":1},\"2\":{\"43\":1,\"287\":1},\"3\":{\"4\":3,\"55\":4,\"62\":1,\"65\":4,\"80\":8,\"88\":4,\"156\":6,\"294\":1,\"296\":6}}],[\"3bdca45c\",{\"0\":{\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1}}],[\"35\",{\"3\":{\"253\":1}}],[\"35f016f2\",{\"0\":{\"79\":1,\"80\":1,\"81\":1}}],[\"3之前的shouldcomponentupdate没有什么区别\",{\"3\":{\"228\":1}}],[\"3之前的render函数没有什么区别\",{\"3\":{\"227\":1}}],[\"3之前的生命周期\",{\"3\":{\"225\":1}}],[\"3之后的生命周期有以下几个\",{\"3\":{\"225\":1}}],[\"3之后的生命周期有所改变\",{\"3\":{\"225\":1}}],[\"32位寻址方式\",{\"3\":{\"181\":1}}],[\"3cb808b6\",{\"0\":{\"136\":1,\"137\":1,\"138\":1,\"139\":1}}],[\"379d5da0\",{\"0\":{\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1}}],[\"36e7ec57\",{\"0\":{\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1}}],[\"300\",{\"3\":{\"253\":1}}],[\"3000\",{\"3\":{\"15\":2}}],[\"30525834\",{\"0\":{\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1}}],[\"304\",{\"3\":{\"9\":1}}],[\"3\",{\"0\":{\"16\":1,\"42\":1,\"204\":1,\"222\":1,\"226\":1,\"286\":1},\"2\":{\"16\":1,\"42\":1,\"204\":1,\"222\":1,\"226\":1,\"286\":1},\"3\":{\"4\":5,\"23\":1,\"55\":3,\"56\":2,\"59\":3,\"62\":4,\"64\":2,\"65\":6,\"77\":3,\"80\":10,\"88\":4,\"156\":6,\"218\":1,\"220\":1,\"294\":1,\"295\":2,\"296\":5}}],[\"16\",{\"0\":{\"222\":1,\"226\":1},\"2\":{\"222\":1,\"226\":1},\"3\":{\"220\":1}}],[\"16px\",{\"3\":{\"26\":1}}],[\"1<\",{\"3\":{\"215\":1}}],[\"128位寻址方式\",{\"3\":{\"181\":1}}],[\"12\",{\"3\":{\"174\":5,\"175\":2}}],[\"123a\",{\"3\":{\"102\":1}}],[\"123\",{\"3\":{\"102\":4}}],[\"1ccf7368\",{\"0\":{\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1}}],[\"1514e16c\",{\"0\":{\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1}}],[\"13900acc\",{\"0\":{\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1}}],[\"17星星充电\",{\"1\":{\"100\":1}}],[\"10ms\",{\"3\":{\"218\":1}}],[\"10\",{\"3\":{\"63\":1,\"218\":1}}],[\"100vh\",{\"3\":{\"250\":1}}],[\"100\",{\"3\":{\"50\":2}}],[\"100px\",{\"3\":{\"48\":2}}],[\"1000\",{\"3\":{\"4\":6,\"59\":4,\"74\":1,\"77\":7,\"218\":1,\"253\":1}}],[\"18\",{\"3\":{\"60\":2,\"63\":4,\"64\":6,\"65\":2,\"68\":2,\"69\":2,\"70\":4}}],[\"1rtem\",{\"3\":{\"26\":1}}],[\"1px\",{\"3\":{\"26\":1}}],[\"1以后\",{\"3\":{\"7\":1}}],[\"1\",{\"0\":{\"14\":1,\"38\":1,\"196\":1,\"200\":1,\"227\":1,\"228\":1,\"229\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":1},\"2\":{\"14\":1,\"38\":1,\"196\":1,\"200\":1,\"284\":1},\"3\":{\"4\":5,\"23\":2,\"26\":1,\"28\":1,\"29\":1,\"48\":10,\"50\":1,\"55\":1,\"56\":2,\"57\":3,\"58\":3,\"59\":3,\"62\":3,\"64\":2,\"65\":6,\"80\":12,\"88\":6,\"96\":6,\"102\":4,\"120\":1,\"121\":2,\"129\":1,\"134\":1,\"137\":2,\"142\":1,\"156\":6,\"160\":3,\"162\":2,\"174\":3,\"175\":1,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":1,\"217\":1,\"230\":1,\"295\":1,\"296\":4}}],[\"join\",{\"3\":{\"123\":1}}],[\"josnp\",{\"3\":{\"14\":1}}],[\"jsxs\",{\"3\":{\"202\":3}}],[\"jsx不会将jsx转化为react\",{\"3\":{\"200\":1}}],[\"jsxjsx\",{\"3\":{\"198\":1}}],[\"jsx转化过程\",{\"1\":{\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1}}],[\"jsx\",{\"0\":{\"198\":1,\"199\":1},\"2\":{\"198\":1,\"199\":1},\"3\":{\"202\":13}}],[\"js\",{\"3\":{\"65\":1,\"142\":1,\"196\":1,\"202\":1}}],[\"json2html\",{\"3\":{\"94\":3}}],[\"json2dom\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"json\",{\"3\":{\"14\":2,\"92\":1,\"94\":2,\"143\":2}}],[\"jsonp的原理是动态创建script标签\",{\"3\":{\"14\":1}}],[\"jsonp\",{\"0\":{\"14\":1},\"2\":{\"14\":1}}],[\"justify\",{\"3\":{\"47\":1}}],[\"javascript将异步任务分为了两种\",{\"3\":{\"155\":1}}],[\"javascript篇\",{\"1\":{\"146\":1}}],[\"javascript数据类型\",{\"1\":{\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1}}],[\"javascript的作用域\",{\"3\":{\"100\":1}}],[\"javascript的基本类型\",{\"3\":{\"100\":1}}],[\"javascript中没有类的概念\",{\"3\":{\"68\":1}}],[\"javascript\",{\"1\":{\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1},\"3\":{\"14\":2,\"152\":4,\"153\":1,\"163\":1}}],[\"j\",{\"3\":{\"4\":4,\"62\":1}}],[\"5ec739b6\",{\"0\":{\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1}}],[\"54eae7a0\",{\"0\":{\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1}}],[\"5464e616\",{\"0\":{\"100\":1}}],[\"568d3b89\",{\"0\":{\"146\":1}}],[\"55\",{\"3\":{\"137\":2}}],[\"5null\",{\"3\":{\"134\":1}}],[\"5undefined\",{\"3\":{\"134\":1}}],[\"5f5c21dd\",{\"0\":{\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1}}],[\"5function\",{\"3\":{\"134\":1}}],[\"5false\",{\"3\":{\"134\":1}}],[\"5true\",{\"3\":{\"134\":1}}],[\"51\",{\"3\":{\"134\":1}}],[\"5\",{\"3\":{\"4\":14,\"55\":2,\"65\":4,\"74\":1,\"77\":2,\"80\":11,\"88\":2,\"134\":10,\"156\":6,\"296\":1}}],[\"5bc3b2da\",{\"0\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1}}],[\"<template>\",{\"3\":{\"265\":1}}],[\"<t\",{\"3\":{\"262\":1}}],[\"<lazyimage\",{\"3\":{\"251\":1}}],[\"<list\",{\"3\":{\"253\":1}}],[\"<li>\",{\"3\":{\"254\":1}}],[\"<li>3<\",{\"3\":{\"163\":1}}],[\"<li>2<\",{\"3\":{\"163\":1}}],[\"<li>1<\",{\"3\":{\"163\":1}}],[\"<link\",{\"3\":{\"39\":3,\"43\":2}}],[\"<p>content\",{\"3\":{\"245\":1,\"246\":1}}],[\"<p>你点击了\",{\"3\":{\"230\":1}}],[\"<>\",{\"3\":{\"218\":1}}],[\"<input\",{\"3\":{\"218\":1,\"240\":1,\"241\":1}}],[\"<mycontext\",{\"3\":{\"214\":1,\"237\":1}}],[\"<button\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":2,\"216\":2,\"217\":3,\"218\":2,\"230\":1,\"234\":3,\"235\":1,\"241\":1}}],[\"<h1>post\",{\"3\":{\"246\":1}}],[\"<h1>post<\",{\"3\":{\"245\":1}}],[\"<h1>时间过去了\",{\"3\":{\"218\":1}}],[\"<h1>\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":3,\"217\":2}}],[\"<hello>hello<\",{\"3\":{\"200\":1}}],[\"<ul>\",{\"3\":{\"254\":1}}],[\"<ul\",{\"3\":{\"163\":1}}],[\"<a><\",{\"3\":{\"92\":3}}],[\"<suspense\",{\"3\":{\"251\":1}}],[\"<span>hello<\",{\"3\":{\"200\":1}}],[\"<span>\",{\"3\":{\"92\":2}}],[\"<script>\",{\"3\":{\"14\":1}}],[\"<div>loading\",{\"3\":{\"251\":1,\"254\":1}}],[\"<div>\",{\"3\":{\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"230\":1,\"233\":1,\"234\":3,\"235\":3,\"240\":1,\"241\":1,\"254\":1,\"265\":1}}],[\"<div\",{\"3\":{\"92\":1,\"167\":4,\"168\":4,\"200\":1,\"245\":1,\"246\":1,\"253\":1,\"265\":2}}],[\"<child2\",{\"3\":{\"235\":1}}],[\"<child1\",{\"3\":{\"235\":1}}],[\"<child\",{\"3\":{\"65\":1,\"214\":1,\"233\":1,\"234\":1,\"237\":1}}],[\"<=\",{\"3\":{\"40\":1,\"134\":1}}],[\"<\",{\"3\":{\"4\":4,\"14\":1,\"39\":4,\"43\":2,\"92\":3,\"134\":1,\"163\":1,\"167\":2,\"168\":2,\"200\":1,\"208\":3,\"209\":2,\"212\":2,\"213\":2,\"214\":3,\"215\":2,\"216\":4,\"217\":3,\"218\":3,\"230\":1,\"233\":1,\"234\":3,\"235\":3,\"237\":1,\"240\":1,\"241\":1,\"245\":2,\"246\":3,\"251\":3,\"253\":3,\"254\":4,\"265\":2}}],[\"015c1f8a\",{\"0\":{\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1}}],[\"08c026b0\",{\"0\":{\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1}}],[\"0d084802\",{\"0\":{\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1}}],[\"09\",{\"3\":{\"86\":1}}],[\"0\",{\"3\":{\"4\":6,\"23\":1,\"28\":2,\"29\":4,\"48\":5,\"74\":1,\"77\":7,\"88\":4,\"90\":1,\"94\":1,\"96\":2,\"102\":5,\"104\":2,\"121\":1,\"150\":1,\"156\":4,\"208\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"230\":1,\"245\":2,\"246\":2,\"250\":1}}],[\"ibase>\",{\"3\":{\"261\":1,\"262\":1,\"263\":1}}],[\"ibase\",{\"3\":{\"261\":1,\"263\":1}}],[\"ibase<t>\",{\"3\":{\"262\":4}}],[\"ibase<t\",{\"3\":{\"259\":1}}],[\"img\",{\"3\":{\"251\":2}}],[\"import\",{\"3\":{\"196\":2,\"202\":3,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"230\":1,\"233\":1,\"234\":3,\"235\":5,\"245\":1,\"246\":2,\"251\":2,\"253\":2,\"254\":1}}],[\"images\",{\"3\":{\"251\":4}}],[\"image\",{\"3\":{\"24\":1,\"251\":4}}],[\"ip头部生成后\",{\"3\":{\"189\":1}}],[\"ip\",{\"3\":{\"181\":1}}],[\"ipv6\",{\"3\":{\"181\":1}}],[\"ipv4\",{\"3\":{\"181\":1}}],[\"ip协议需要知道源地址ip和目的地址ip\",{\"3\":{\"188\":1}}],[\"ip协议需要将数据封装为数据包\",{\"3\":{\"188\":1}}],[\"ip协议还定义了一种路由选择协议\",{\"3\":{\"181\":1}}],[\"ip协议定义了一种寻址方式\",{\"3\":{\"181\":1}}],[\"ip协议\",{\"0\":{\"188\":1},\"2\":{\"188\":1},\"3\":{\"181\":1}}],[\"ip网络模型\",{\"1\":{\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1}}],[\"include\",{\"3\":{\"284\":1}}],[\"includes\",{\"3\":{\"120\":1,\"129\":1}}],[\"intersectionobserver是浏览器提供的一个api\",{\"3\":{\"251\":1}}],[\"intersectionobserver\",{\"3\":{\"250\":1,\"251\":1}}],[\"interface\",{\"3\":{\"98\":2,\"259\":1,\"261\":1,\"263\":1}}],[\"innerheight相加\",{\"3\":{\"250\":1}}],[\"innerheight和document\",{\"3\":{\"250\":1}}],[\"innerheight\",{\"3\":{\"250\":2,\"251\":1,\"253\":2}}],[\"innerhtml\",{\"3\":{\"163\":1}}],[\"inputref\",{\"3\":{\"218\":3,\"241\":3}}],[\"initvalue为初始值\",{\"3\":{\"122\":1}}],[\"initvalue\",{\"3\":{\"122\":1}}],[\"in\",{\"3\":{\"94\":1}}],[\"instanceof\",{\"3\":{\"84\":1,\"94\":2}}],[\"indexof\",{\"3\":{\"120\":1,\"129\":1}}],[\"index为负数\",{\"3\":{\"29\":1}}],[\"index\",{\"3\":{\"28\":1,\"29\":1,\"122\":6,\"129\":1,\"253\":2}}],[\"indent\",{\"3\":{\"24\":1}}],[\"itemcount=\",{\"3\":{\"253\":1}}],[\"item2\",{\"3\":{\"117\":1,\"118\":1}}],[\"item1\",{\"3\":{\"117\":1,\"118\":1}}],[\"item\",{\"3\":{\"90\":2,\"122\":5}}],[\"itemsize=\",{\"3\":{\"253\":1}}],[\"items属性\",{\"3\":{\"48\":1}}],[\"items\",{\"3\":{\"47\":1}}],[\"iterable\",{\"3\":{\"65\":1}}],[\"isshow\",{\"3\":{\"265\":2,\"267\":3}}],[\"isintersecting\",{\"3\":{\"250\":1,\"251\":1}}],[\"is\",{\"3\":{\"60\":2,\"68\":2,\"69\":2,\"70\":4,\"149\":4,\"174\":5,\"175\":2,\"284\":1}}],[\"id=\",{\"3\":{\"92\":1,\"163\":1,\"167\":4,\"168\":4,\"200\":1}}],[\"id\",{\"3\":{\"22\":2,\"23\":2,\"88\":12,\"90\":1,\"92\":1,\"96\":4,\"98\":4,\"201\":2,\"202\":2,\"246\":6}}],[\"ie盒模型\",{\"3\":{\"18\":1}}],[\"ie\",{\"3\":{\"18\":2}}],[\"ifconditions\",{\"3\":{\"268\":1}}],[\"if<\",{\"3\":{\"265\":1}}],[\"if=\",{\"3\":{\"265\":1}}],[\"if\",{\"1\":{\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1},\"3\":{\"9\":2,\"74\":1,\"77\":7,\"84\":2,\"90\":2,\"94\":5,\"98\":1,\"134\":1,\"149\":2,\"218\":1,\"245\":1,\"246\":1,\"250\":2,\"251\":2,\"253\":1,\"267\":3,\"268\":1,\"269\":1,\"270\":1}}],[\"i的值都不一样\",{\"3\":{\"4\":1}}],[\"i的值会被保存在闭包中\",{\"3\":{\"4\":1}}],[\"i作为参数传递给了闭包\",{\"3\":{\"4\":1}}],[\"i++\",{\"3\":{\"4\":4}}],[\"i\",{\"3\":{\"4\":17,\"60\":2,\"62\":1,\"68\":2,\"69\":2,\"70\":8,\"155\":1,\"174\":5,\"175\":3}}],[\"因为这个时候dom并不是一定渲染完成了\",{\"3\":{\"274\":1}}],[\"因为这些数据和方法都还没有初始化\",{\"3\":{\"273\":1}}],[\"因为还没有进行模板编译\",{\"3\":{\"273\":1}}],[\"因为涉及到dom结构的变化\",{\"3\":{\"269\":1}}],[\"因为只涉及到css的变化\",{\"3\":{\"269\":1}}],[\"因为我们可以在定义函数\",{\"3\":{\"256\":1}}],[\"因为可能同时监听多个元素\",{\"3\":{\"251\":1}}],[\"因为如果层级太深\",{\"3\":{\"235\":1}}],[\"因为react在\",{\"3\":{\"220\":1}}],[\"因为timmer是一个局部变量\",{\"3\":{\"218\":1}}],[\"因为在\",{\"3\":{\"202\":1}}],[\"因为首页的一些数据需要在用户登录后才能获取\",{\"3\":{\"194\":1}}],[\"因为dom是一个树形结构\",{\"3\":{\"165\":1}}],[\"因为foo的作用域链是foo\",{\"3\":{\"160\":1}}],[\"因为它的作用域在函数定义的时候就决定了\",{\"3\":{\"160\":1}}],[\"因为process\",{\"3\":{\"156\":1}}],[\"因为\",{\"3\":{\"152\":1,\"230\":1}}],[\"因为普通函数有this\",{\"3\":{\"59\":1}}],[\"因为箭头函数没有this\",{\"3\":{\"59\":2}}],[\"因为css可以修改dom树的样式\",{\"3\":{\"36\":1}}],[\"因为settimeout是一个异步函数\",{\"3\":{\"4\":1}}],[\"因为闭包会携带包含它的函数的作用域\",{\"3\":{\"3\":1}}],[\"因此fn1也不会被销毁\",{\"3\":{\"3\":1}}],[\"无法被销毁\",{\"3\":{\"3\":2}}],[\"无法销毁\",{\"3\":{\"3\":1}}],[\"但是子组件的状态并没有更新\",{\"3\":{\"285\":1}}],[\"但是setup中的props属性是reactive的\",{\"3\":{\"279\":1}}],[\"但是注意不要在这个钩子函数中操作数据\",{\"3\":{\"275\":1,\"281\":1}}],[\"但是他们达到效果的方式不同\",{\"3\":{\"266\":1}}],[\"但是泛型别名\",{\"3\":{\"262\":1}}],[\"但是我们是无法直接修改\",{\"3\":{\"234\":1}}],[\"但是我们可以使用构造函数来模拟类的概念\",{\"3\":{\"68\":1}}],[\"但是上面的生命周期都是在react16\",{\"3\":{\"225\":1}}],[\"但是不能获取到组件之前的props\",{\"3\":{\"224\":1}}],[\"但是无法清除\",{\"3\":{\"218\":1}}],[\"但是函数组件可以通过useeffect来模拟生命周期钩子\",{\"3\":{\"210\":1}}],[\"但是函数组件可以通过usestate来使用状态\",{\"3\":{\"210\":1}}],[\"但是交换机会记录下数据包的源mac地址和端口号\",{\"3\":{\"191\":1}}],[\"但是传输层并不知道数据是如何从一端传到另一端的\",{\"3\":{\"181\":1}}],[\"但是需要动态的增加item\",{\"3\":{\"163\":1}}],[\"但是需要注意的是\",{\"3\":{\"62\":1,\"63\":1}}],[\"但是宏任务的优先级要低于微任务\",{\"3\":{\"155\":1}}],[\"但是如果你是要arr\",{\"3\":{\"296\":1}}],[\"但是如果你要在这个钩子里面使用this\",{\"3\":{\"228\":1}}],[\"但是如果父组件的状态更新\",{\"3\":{\"285\":1}}],[\"但是如果我们把兄弟组件的数据提升到父组件\",{\"3\":{\"235\":1}}],[\"但是如果是基于构造函数的继承\",{\"3\":{\"174\":1}}],[\"但是如果只将任务划分为同步任务和异步任务\",{\"3\":{\"155\":1}}],[\"但是如果存在引用\",{\"3\":{\"1\":1}}],[\"但是即使这样\",{\"3\":{\"142\":1}}],[\"但是这些操作最好放在nexttick中\",{\"3\":{\"274\":1}}],[\"但是这样会带来很多问题\",{\"3\":{\"236\":1}}],[\"但是这不代表\",{\"3\":{\"152\":1}}],[\"但是这个深拷贝还有一个问题\",{\"3\":{\"142\":1}}],[\"但是这个深拷贝没有考虑到数组的情况\",{\"3\":{\"142\":1}}],[\"但是这种方法并不是很便捷\",{\"3\":{\"80\":1}}],[\"但是这种方法会导致元素不占据空间\",{\"3\":{\"28\":1}}],[\"但是没有赋值的情况下的默认值\",{\"3\":{\"106\":2}}],[\"但是已经被捕获了\",{\"3\":{\"83\":1}}],[\"但是有一些特殊情况\",{\"3\":{\"81\":1}}],[\"但是它会把数组中的每一个元素\",{\"3\":{\"80\":1}}],[\"但是使用apply\",{\"3\":{\"80\":1}}],[\"但是math\",{\"3\":{\"80\":1}}],[\"但是普通函数有this\",{\"3\":{\"59\":1}}],[\"但是变量的赋值不会被提升\",{\"3\":{\"56\":1}}],[\"但是\",{\"3\":{\"56\":1}}],[\"但是在javascript\",{\"3\":{\"296\":1}}],[\"但是在组件实例创建之前被调用\",{\"3\":{\"279\":1}}],[\"但是在react16\",{\"3\":{\"229\":1}}],[\"但是在react17之后\",{\"3\":{\"220\":1}}],[\"但是在\",{\"3\":{\"202\":1}}],[\"但是在块级作用域和函数作用域中都不能访问到\",{\"3\":{\"55\":1}}],[\"但是在函数作用域中不能访问到\",{\"3\":{\"55\":1}}],[\"但是在生成dom树的时候\",{\"3\":{\"36\":1}}],[\"但是元素还是占据空间\",{\"3\":{\"29\":4}}],[\"但是浏览器的控制台中会显示出如下错误信息\",{\"3\":{\"12\":1}}],[\"但是浏览器第二次请求时\",{\"3\":{\"7\":1}}],[\"但是缺点是读取速度慢\",{\"3\":{\"7\":1}}],[\"但是缺点是存储空间小\",{\"3\":{\"7\":1}}],[\"但是只针对于代理服务器\",{\"3\":{\"7\":1}}],[\"但是会使用协商缓存\",{\"3\":{\"7\":1}}],[\"但是实际上\",{\"3\":{\"7\":1}}],[\"但是到了http1\",{\"3\":{\"7\":1}}],[\"但是大体上可以分为两种\",{\"3\":{\"6\":1}}],[\"但是又不想立即执行该函数时\",{\"3\":{\"4\":1}}],[\"但是因为使用了闭包\",{\"3\":{\"4\":1}}],[\"但是fn2依然会访问到外部作用域的变量\",{\"3\":{\"3\":1}}],[\"的时候\",{\"3\":{\"296\":1}}],[\"的是什么\",{\"2\":{\"284\":1}}],[\"的生命周期图\",{\"3\":{\"283\":1}}],[\"的操作\",{\"3\":{\"275\":1,\"281\":1}}],[\"的初始值\",{\"3\":{\"212\":1}}],[\"的父\",{\"3\":{\"203\":1}}],[\"的兄弟\",{\"3\":{\"203\":2}}],[\"的子\",{\"3\":{\"203\":2}}],[\"的形式\",{\"3\":{\"202\":1}}],[\"的一种语法糖\",{\"3\":{\"198\":1}}],[\"的继承\",{\"0\":{\"174\":1,\"175\":1},\"2\":{\"174\":1,\"175\":1}}],[\"的事件模型\",{\"3\":{\"163\":1}}],[\"的不同点\",{\"0\":{\"150\":1},\"2\":{\"150\":1}}],[\"的相同点\",{\"0\":{\"149\":1},\"2\":{\"149\":1}}],[\"的垃圾回收机制\",{\"3\":{\"142\":1}}],[\"的角度来看待的\",{\"3\":{\"125\":1}}],[\"的元素\",{\"3\":{\"118\":1}}],[\"的数组\",{\"3\":{\"102\":1}}],[\"的状态就会变成rejected\",{\"3\":{\"82\":1}}],[\"的状态才会变成fulfilled\",{\"3\":{\"82\":1,\"83\":1}}],[\"的状态由promise实例决定\",{\"3\":{\"82\":1}}],[\"的值会绑定到新创建的对象上\",{\"3\":{\"80\":1}}],[\"的区别\",{\"2\":{\"80\":1}}],[\"的指向\",{\"3\":{\"79\":1}}],[\"的指向类型\",{\"2\":{\"79\":1}}],[\"的三种状态\",{\"0\":{\"75\":1},\"2\":{\"75\":1}}],[\"的基本使用\",{\"0\":{\"74\":1},\"2\":{\"74\":1}}],[\"的构造函数\",{\"3\":{\"69\":1}}],[\"的类\",{\"0\":{\"68\":1,\"69\":1},\"2\":{\"68\":1,\"69\":1},\"3\":{\"69\":1}}],[\"的产物\",{\"3\":{\"53\":2}}],[\"的优缺点\",{\"3\":{\"14\":1}}],[\"的\",{\"3\":{\"14\":1,\"234\":1,\"240\":4,\"241\":1}}],[\"的关闭而释放\",{\"3\":{\"7\":1}}],[\"的引用已经被释放\",{\"3\":{\"3\":1}}],[\"的返回值\",{\"3\":{\"3\":1}}],[\"l\",{\"3\":{\"62\":1}}],[\"length的时候\",{\"3\":{\"296\":1}}],[\"length\",{\"3\":{\"84\":2,\"90\":2,\"94\":1,\"98\":1,\"127\":1,\"261\":2}}],[\"left\",{\"3\":{\"50\":1}}],[\"let声明的变量不会被提升到代码的最前面\",{\"3\":{\"56\":1}}],[\"let和const声明的变量不能被重复声明\",{\"3\":{\"57\":1}}],[\"let和const声明的变量在全局作用域中可以访问到\",{\"3\":{\"55\":1}}],[\"let和const是\",{\"3\":{\"53\":1}}],[\"let定义的变量不会具有变量提升的特性\",{\"3\":{\"4\":1}}],[\"let\",{\"0\":{\"52\":1},\"2\":{\"52\":1},\"3\":{\"2\":1,\"4\":1,\"55\":3,\"56\":1,\"57\":2,\"58\":1,\"59\":1,\"84\":1,\"88\":2,\"90\":5,\"94\":1,\"98\":3,\"142\":1,\"147\":2,\"148\":2,\"162\":1,\"163\":1,\"167\":4,\"168\":4,\"218\":2,\"237\":1}}],[\"lazy\",{\"3\":{\"251\":1}}],[\"lazyimage\",{\"3\":{\"251\":2}}],[\"lazyimage组件会被动态加载\",{\"3\":{\"251\":1}}],[\"lazy和suspense来实现图片懒加载\",{\"3\":{\"251\":1}}],[\"layout\",{\"3\":{\"24\":1}}],[\"lastscrolltop\",{\"3\":{\"245\":4,\"246\":4}}],[\"lastindexof\",{\"3\":{\"120\":1}}],[\"last\",{\"3\":{\"8\":1,\"9\":1}}],[\"line\",{\"3\":{\"295\":1}}],[\"link\",{\"3\":{\"23\":1}}],[\"li>\",{\"3\":{\"163\":3,\"254\":1}}],[\"limit表示最大分割次数\",{\"3\":{\"130\":1}}],[\"limit\",{\"3\":{\"130\":1}}],[\"list>\",{\"3\":{\"253\":1}}],[\"listtotree\",{\"1\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1},\"3\":{\"90\":1}}],[\"list\",{\"3\":{\"24\":3,\"90\":3,\"96\":1,\"253\":1}}],[\"listen\",{\"3\":{\"15\":1}}],[\"li\",{\"3\":{\"23\":1}}],[\"loadmore\",{\"3\":{\"250\":1}}],[\"loading\",{\"3\":{\"194\":1,\"196\":6,\"254\":2}}],[\"lodash\",{\"3\":{\"143\":1}}],[\"localstorage\",{\"0\":{\"245\":1},\"2\":{\"245\":1},\"3\":{\"245\":4,\"246\":2}}],[\"localstore和sessionstore的区别\",{\"3\":{\"100\":1}}],[\"localhost\",{\"3\":{\"15\":1}}],[\"login\",{\"3\":{\"14\":1}}],[\"log\",{\"3\":{\"3\":2,\"4\":7,\"15\":1,\"55\":12,\"56\":6,\"57\":3,\"58\":3,\"59\":9,\"60\":1,\"62\":3,\"63\":3,\"64\":4,\"65\":4,\"68\":1,\"69\":1,\"70\":4,\"74\":2,\"77\":6,\"79\":4,\"80\":10,\"147\":2,\"148\":3,\"149\":3,\"150\":2,\"156\":39,\"160\":1,\"162\":1,\"163\":1,\"167\":4,\"168\":4,\"174\":3,\"175\":4,\"213\":2,\"216\":1,\"217\":1,\"218\":1,\"230\":2,\"233\":1,\"241\":1,\"261\":1,\"297\":1}}],[\"2b00a92c\",{\"0\":{\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1}}],[\"2b9022fc\",{\"0\":{\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1}}],[\"2376843a\",{\"0\":{\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":1}}],[\"200px\",{\"3\":{\"50\":2}}],[\"29367432\",{\"0\":{\"18\":1,\"19\":1,\"20\":1,\"21\":1}}],[\"25\",{\"3\":{\"4\":1}}],[\"2\",{\"0\":{\"15\":1,\"39\":1,\"203\":1,\"285\":1},\"2\":{\"15\":1,\"39\":1,\"203\":1,\"285\":1},\"3\":{\"3\":3,\"4\":5,\"48\":2,\"55\":3,\"56\":2,\"57\":4,\"58\":5,\"59\":3,\"62\":3,\"64\":2,\"65\":6,\"80\":10,\"88\":2,\"96\":2,\"142\":1,\"156\":6,\"160\":1,\"216\":1,\"295\":1,\"296\":5}}],[\"=object的原因是什么\",{\"3\":{\"100\":1}}],[\"=＞promise\",{\"3\":{\"100\":1}}],[\"=＞直接存在了缓存中\",{\"3\":{\"100\":1}}],[\"=＞react\",{\"3\":{\"100\":1}}],[\"==会进行隐式类型转换\",{\"3\":{\"138\":1}}],[\"==\",{\"3\":{\"94\":1,\"106\":1,\"134\":2,\"136\":2,\"137\":1,\"138\":1,\"149\":1}}],[\"===不会进行隐式类型转换\",{\"3\":{\"138\":1}}],[\"===\",{\"3\":{\"84\":1,\"90\":3,\"134\":1,\"137\":1,\"138\":1}}],[\"=>\",{\"3\":{\"15\":2,\"59\":4,\"65\":1,\"74\":4,\"77\":20,\"80\":1,\"84\":1,\"90\":1,\"94\":1,\"122\":6,\"156\":4,\"203\":1,\"208\":1,\"209\":1,\"212\":1,\"213\":3,\"214\":1,\"215\":3,\"216\":3,\"217\":3,\"218\":2,\"230\":3,\"234\":3,\"235\":2,\"240\":1,\"241\":1,\"245\":5,\"246\":5,\"250\":2,\"251\":7,\"253\":4,\"254\":4}}],[\"=\",{\"1\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1},\"3\":{\"3\":6,\"4\":9,\"14\":3,\"15\":2,\"18\":2,\"19\":2,\"20\":2,\"26\":2,\"55\":9,\"56\":3,\"57\":6,\"58\":6,\"59\":4,\"60\":3,\"62\":7,\"63\":6,\"64\":1,\"65\":13,\"68\":4,\"69\":3,\"70\":7,\"74\":2,\"77\":14,\"79\":4,\"80\":14,\"84\":3,\"88\":2,\"90\":6,\"94\":2,\"96\":2,\"98\":3,\"134\":1,\"142\":2,\"147\":1,\"148\":2,\"160\":2,\"162\":2,\"163\":1,\"167\":8,\"168\":4,\"174\":17,\"175\":7,\"196\":2,\"201\":2,\"203\":1,\"208\":1,\"212\":1,\"213\":1,\"214\":3,\"215\":1,\"216\":3,\"217\":3,\"218\":11,\"230\":1,\"234\":2,\"235\":2,\"237\":2,\"240\":1,\"241\":2,\"245\":4,\"246\":5,\"250\":2,\"251\":5,\"253\":2,\"254\":3,\"260\":2,\"262\":1,\"295\":1}}],[\"axios等\",{\"3\":{\"273\":1}}],[\"add\",{\"3\":{\"215\":2}}],[\"addeventlistener接收三个参数\",{\"3\":{\"168\":1}}],[\"addeventlistener\",{\"3\":{\"163\":1,\"168\":4,\"245\":1,\"246\":1,\"250\":1,\"251\":1,\"253\":1}}],[\"any\",{\"3\":{\"203\":6}}],[\"and\",{\"3\":{\"40\":3}}],[\"a85593e6\",{\"0\":{\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1}}],[\"await后面跟着的是一个promise对象\",{\"3\":{\"156\":1}}],[\"await等等\",{\"3\":{\"155\":1}}],[\"a0326798\",{\"0\":{\"133\":1,\"134\":1,\"135\":1}}],[\"a123\",{\"3\":{\"102\":1}}],[\"a>\",{\"3\":{\"92\":3}}],[\"as\",{\"3\":{\"202\":2,\"253\":1}}],[\"async函数返回的是一个promise对象\",{\"3\":{\"156\":1}}],[\"async和await\",{\"3\":{\"156\":1}}],[\"async\",{\"3\":{\"155\":1}}],[\"assign\",{\"3\":{\"70\":2,\"141\":1}}],[\"as=\",{\"3\":{\"43\":2}}],[\"article\",{\"3\":{\"253\":3,\"254\":2}}],[\"articles\",{\"3\":{\"253\":2,\"254\":4}}],[\"arp为了提高效率\",{\"3\":{\"189\":1}}],[\"arp获取mac地址的方式\",{\"3\":{\"189\":1}}],[\"array\",{\"0\":{\"110\":1},\"2\":{\"110\":1},\"3\":{\"84\":1,\"94\":1,\"98\":1,\"122\":6,\"141\":1}}],[\"arr3\",{\"3\":{\"65\":2}}],[\"arr2\",{\"3\":{\"65\":2,\"80\":4}}],[\"arr1\",{\"3\":{\"65\":2,\"80\":5}}],[\"arr\",{\"3\":{\"62\":6,\"65\":5,\"80\":5,\"88\":1}}],[\"arg\",{\"3\":{\"258\":2,\"261\":3,\"262\":3,\"263\":2}}],[\"arguments是一个类数组对象\",{\"3\":{\"59\":1}}],[\"arguments\",{\"3\":{\"4\":1,\"59\":2,\"65\":1}}],[\"args\",{\"3\":{\"4\":2}}],[\"aquamarine\",{\"3\":{\"50\":1}}],[\"auto\",{\"3\":{\"48\":5}}],[\"absolute或fixed\",{\"3\":{\"31\":1}}],[\"absolute\",{\"3\":{\"28\":1,\"29\":1}}],[\"abcd法则\",{\"3\":{\"23\":1}}],[\"acm模式\",{\"1\":{\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1}}],[\"acm\",{\"0\":{\"293\":1},\"2\":{\"293\":1},\"3\":{\"296\":1,\"297\":2}}],[\"activated\",{\"3\":{\"277\":1}}],[\"active\",{\"3\":{\"22\":1}}],[\"action\",{\"3\":{\"215\":2}}],[\"access\",{\"3\":{\"15\":4}}],[\"after\",{\"3\":{\"22\":1}}],[\"aad12c32\",{\"0\":{\"22\":1,\"23\":1,\"24\":1,\"25\":1}}],[\"attrs\",{\"3\":{\"92\":1,\"93\":1,\"94\":4}}],[\"at\",{\"3\":{\"15\":1}}],[\"alive组件包裹的组件\",{\"3\":{\"287\":1}}],[\"alive下的组件生命周期\",{\"0\":{\"287\":1}}],[\"alive和memo都是用来优化性能的\",{\"3\":{\"286\":1}}],[\"alive可以接受三个属性\",{\"3\":{\"284\":1}}],[\"alive是将组件缓存起来\",{\"3\":{\"286\":1}}],[\"alive是否类似于react中的memo\",{\"0\":{\"286\":1}}],[\"alive是惰性的\",{\"3\":{\"284\":1}}],[\"alive是vue内置的一个组件\",{\"3\":{\"284\":1}}],[\"alive包裹动态组件时\",{\"3\":{\"284\":1}}],[\"alive\",{\"2\":{\"284\":1,\"286\":1,\"287\":1}}],[\"alive的是什么\",{\"0\":{\"284\":1}}],[\"alive中组件被移除时调用\",{\"3\":{\"277\":1,\"283\":1}}],[\"alive中组件被激活时调用\",{\"3\":{\"277\":1,\"283\":1}}],[\"align\",{\"3\":{\"24\":2,\"47\":2,\"48\":1}}],[\"alex\",{\"3\":{\"235\":1}}],[\"alert\",{\"3\":{\"14\":1}}],[\"all遇到错误的时候是怎么做的\",{\"3\":{\"100\":1}}],[\"all方法的实现\",{\"3\":{\"86\":1}}],[\"all手写实现\",{\"1\":{\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1},\"3\":{\"84\":1}}],[\"all\",{\"3\":{\"77\":5,\"82\":3,\"83\":2,\"85\":1,\"86\":1,\"100\":1}}],[\"allow\",{\"3\":{\"15\":6}}],[\"app\",{\"3\":{\"65\":1,\"92\":2,\"196\":9,\"200\":2,\"201\":2,\"202\":2,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"230\":1,\"240\":1,\"241\":1,\"251\":1,\"253\":1,\"254\":1}}],[\"appendchild\",{\"3\":{\"14\":1,\"94\":2}}],[\"apply的使用场景\",{\"3\":{\"80\":1}}],[\"apply\",{\"2\":{\"80\":1},\"3\":{\"4\":1,\"79\":1,\"80\":5}}],[\"ajax请求只能发给同源的网址\",{\"3\":{\"12\":1}}],[\"age+\",{\"3\":{\"175\":1}}],[\"age的作用一样\",{\"3\":{\"7\":1}}],[\"age\",{\"3\":{\"4\":3,\"7\":1,\"60\":2,\"63\":6,\"64\":7,\"65\":2,\"68\":4,\"69\":4,\"70\":8,\"174\":15,\"175\":12,\"259\":1,\"260\":4,\"262\":1,\"263\":1}}],[\"a\",{\"3\":{\"3\":5,\"4\":4,\"23\":3,\"55\":7,\"56\":3,\"57\":3,\"58\":3,\"62\":2,\"64\":2,\"65\":2,\"80\":2,\"92\":3,\"137\":2,\"142\":1,\"147\":3,\"148\":5,\"160\":1,\"235\":1}}],[\"fetch\",{\"3\":{\"273\":1}}],[\"fetcharticles\",{\"3\":{\"254\":1}}],[\"from\",{\"3\":{\"196\":2,\"202\":2,\"208\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":2,\"230\":1,\"233\":1,\"234\":3,\"235\":5,\"245\":1,\"246\":2,\"251\":1,\"253\":2,\"254\":1}}],[\"ftp\",{\"3\":{\"178\":1}}],[\"fallback=\",{\"3\":{\"251\":1}}],[\"false\",{\"3\":{\"102\":1,\"134\":1,\"136\":1,\"137\":6,\"138\":1,\"149\":4,\"254\":1,\"267\":2}}],[\"family\",{\"3\":{\"24\":1}}],[\"f7cc4e6a\",{\"0\":{\"92\":1,\"93\":1,\"94\":1,\"95\":1}}],[\"fixedsizelist\",{\"3\":{\"253\":1}}],[\"filber对应的是react中的fiber\",{\"3\":{\"203\":1}}],[\"filter\",{\"3\":{\"90\":1,\"122\":1}}],[\"fiber架构的核心就是render阶段和commit阶段的分离\",{\"3\":{\"220\":1}}],[\"fiber架构的目的是为了解决react在渲染过程中\",{\"3\":{\"220\":1}}],[\"fiber是react中的一个核心算法\",{\"3\":{\"203\":1}}],[\"fiber\",{\"0\":{\"203\":1,\"204\":1},\"2\":{\"203\":1,\"204\":1},\"3\":{\"203\":21}}],[\"find\",{\"3\":{\"120\":1}}],[\"finally\",{\"3\":{\"76\":1}}],[\"f\",{\"3\":{\"62\":2}}],[\"flow\",{\"3\":{\"47\":1}}],[\"float\",{\"3\":{\"32\":1}}],[\"float和position类\",{\"3\":{\"24\":1}}],[\"flex\",{\"3\":{\"45\":2,\"47\":4,\"48\":11,\"50\":2}}],[\"flex布局\",{\"1\":{\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1}}],[\"fd14e8e4\",{\"0\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1}}],[\"foo\",{\"3\":{\"160\":2,\"162\":3}}],[\"font\",{\"3\":{\"24\":6}}],[\"foreach\",{\"3\":{\"94\":1,\"122\":1,\"251\":3,\"253\":1}}],[\"formatting\",{\"3\":{\"30\":1}}],[\"for\",{\"3\":{\"4\":4,\"84\":1,\"94\":1,\"201\":1}}],[\"func\",{\"3\":{\"4\":2}}],[\"function等特殊对象\",{\"3\":{\"142\":1}}],[\"function\",{\"0\":{\"111\":1},\"2\":{\"111\":1},\"3\":{\"3\":4,\"4\":14,\"14\":1,\"55\":1,\"59\":6,\"64\":4,\"68\":2,\"70\":1,\"79\":4,\"80\":3,\"84\":1,\"90\":1,\"94\":1,\"98\":2,\"134\":1,\"156\":28,\"160\":2,\"162\":2,\"163\":1,\"167\":4,\"168\":4,\"174\":9,\"201\":1,\"209\":1,\"212\":1,\"213\":1,\"214\":2,\"215\":1,\"216\":1,\"217\":1,\"218\":4,\"230\":1,\"233\":2,\"234\":2,\"235\":3,\"240\":1,\"241\":1,\"258\":1,\"261\":1,\"262\":1,\"263\":1}}],[\"fn<t\",{\"3\":{\"261\":1,\"263\":1}}],[\"fn<t>\",{\"3\":{\"258\":1,\"262\":1}}],[\"fn4\",{\"3\":{\"64\":2}}],[\"fn\",{\"3\":{\"4\":4,\"55\":2,\"59\":6,\"64\":2,\"79\":8}}],[\"fn3\",{\"3\":{\"3\":11,\"64\":2}}],[\"fn2\",{\"3\":{\"3\":5,\"59\":2,\"64\":2,\"80\":3}}],[\"fn1\",{\"3\":{\"3\":8,\"4\":2,\"80\":3,\"162\":2}}],[\"注意\",{\"3\":{\"89\":1,\"156\":1}}],[\"注意区分后代选择器和兄弟选择器的区别\",{\"3\":{\"22\":1}}],[\"注意清除定时器\",{\"3\":{\"2\":1}}],[\"注意闭包中的变量是否会被使用\",{\"3\":{\"2\":1}}],[\"如width\",{\"3\":{\"40\":1}}],[\"如screen\",{\"3\":{\"40\":1}}],[\"如何优化首页加载速度\",{\"3\":{\"248\":1}}],[\"如何写出一个惊艳面试官的深拷贝\",{\"3\":{\"144\":1}}],[\"如何适配移动端\",{\"3\":{\"100\":1}}],[\"如何做到的\",{\"3\":{\"100\":1}}],[\"如何避免\",{\"0\":{\"37\":1},\"2\":{\"37\":1}}],[\"如何创建bfc\",{\"0\":{\"31\":1},\"2\":{\"31\":1}}],[\"如何解决跨域\",{\"0\":{\"13\":1},\"2\":{\"13\":1}}],[\"如何处理\",{\"0\":{\"2\":1},\"2\":{\"2\":1}}],[\"如何处理内存泄漏问题\",{\"0\":{\"0\":1},\"2\":{\"0\":1}}],[\"如果使用javascript\",{\"3\":{\"296\":1}}],[\"如果组件的名字和is匹配\",{\"3\":{\"284\":1}}],[\"如果需要修改数据\",{\"3\":{\"275\":1,\"281\":1}}],[\"如果需要进行dom操作\",{\"3\":{\"273\":1}}],[\"如果需要加参数\",{\"3\":{\"234\":1}}],[\"如果创建的\",{\"3\":{\"237\":1}}],[\"如果你使用的是利用变量提升的方式\",{\"3\":{\"235\":1}}],[\"如果返回null\",{\"3\":{\"227\":1}}],[\"如果返回false\",{\"3\":{\"224\":1}}],[\"如果两个对象不相等\",{\"3\":{\"224\":1}}],[\"如果两个对象相等\",{\"3\":{\"224\":1}}],[\"如果两方都是object\",{\"3\":{\"136\":1}}],[\"如果渲染任务过多\",{\"3\":{\"220\":1}}],[\"如果http请求的消息体较大\",{\"3\":{\"187\":1}}],[\"如果全局作用域也没有找到\",{\"3\":{\"159\":1,\"160\":1}}],[\"如果已经拷贝过了\",{\"3\":{\"142\":1}}],[\"如果属性是引用类型\",{\"3\":{\"140\":1}}],[\"如果属性是基本类型\",{\"3\":{\"140\":1}}],[\"如果类型相同\",{\"3\":{\"137\":1,\"138\":1}}],[\"如果类型不同\",{\"3\":{\"137\":1,\"138\":1}}],[\"如果一方是object\",{\"3\":{\"136\":1}}],[\"如果一方是布尔值或者是字符串\",{\"3\":{\"136\":1}}],[\"如果包含\",{\"3\":{\"129\":2}}],[\"如果没有输入\",{\"3\":{\"295\":1}}],[\"如果没有\",{\"3\":{\"185\":1,\"186\":1}}],[\"如果没有找到\",{\"3\":{\"159\":1,\"160\":1}}],[\"如果没有初始值\",{\"3\":{\"122\":1}}],[\"如果没有发生变化\",{\"3\":{\"7\":2,\"8\":1}}],[\"如果第一个字符就不可以转化\",{\"3\":{\"102\":1}}],[\"如果当前数据有子节点\",{\"3\":{\"98\":1}}],[\"如果当前节点id\",{\"3\":{\"90\":1}}],[\"如果有\",{\"3\":{\"185\":1,\"186\":1}}],[\"如果有多个子节点\",{\"3\":{\"94\":1}}],[\"如果有一个子节点\",{\"3\":{\"94\":1}}],[\"如果有一个promise实例的状态变成了rejected\",{\"3\":{\"84\":1}}],[\"如果是搜索内容\",{\"3\":{\"185\":1}}],[\"如果是\",{\"3\":{\"85\":1}}],[\"如果是一个promise对象\",{\"3\":{\"77\":1}}],[\"如果是一个值\",{\"3\":{\"77\":1}}],[\"如果走的是成功的回调\",{\"3\":{\"84\":1}}],[\"如果数组中的某一个promise对象变为rejected状态\",{\"3\":{\"77\":2}}],[\"如果不借助任何外力\",{\"3\":{\"235\":1}}],[\"如果不在一个文件里面\",{\"3\":{\"214\":1}}],[\"如果不存在\",{\"3\":{\"120\":1}}],[\"如果不是\",{\"3\":{\"85\":1,\"156\":1}}],[\"如果不写\",{\"3\":{\"69\":1}}],[\"如果不会被使用\",{\"3\":{\"2\":1}}],[\"如果解构不成功\",{\"3\":{\"62\":1}}],[\"如果访问\",{\"3\":{\"56\":1}}],[\"如果希望弹箱项目会根据位置和大小进行缩小\",{\"3\":{\"48\":1}}],[\"如果希望弹性项目可以占据多余空间\",{\"3\":{\"48\":1}}],[\"如果遇到了css\",{\"3\":{\"35\":1,\"36\":1}}],[\"如果服务器允许\",{\"3\":{\"15\":1}}],[\"如果服务器的时间和浏览器的时间不一致\",{\"3\":{\"7\":1}}],[\"如果发生了变化\",{\"3\":{\"8\":1}}],[\"如果资源没有发生变化\",{\"3\":{\"6\":1}}],[\"避免使用\",{\"3\":{\"2\":1}}],[\"声明变量\",{\"3\":{\"2\":1}}],[\"和普通力扣的区别\",{\"3\":{\"297\":1}}],[\"和react16\",{\"3\":{\"228\":1}}],[\"和string\",{\"3\":{\"133\":1}}],[\"和splice\",{\"3\":{\"119\":1}}],[\"和number\",{\"3\":{\"102\":1,\"133\":1}}],[\"和math\",{\"3\":{\"80\":2}}],[\"和max\",{\"3\":{\"7\":1}}],[\"和vh\",{\"3\":{\"26\":1}}],[\"和\",{\"0\":{\"52\":2,\"149\":1,\"150\":1},\"2\":{\"43\":1,\"52\":2,\"80\":2,\"149\":1,\"150\":1},\"3\":{\"2\":1,\"9\":1,\"104\":1,\"133\":1,\"137\":6,\"294\":1}}],[\"未清理的定时器或者回调函数\",{\"3\":{\"1\":1}}],[\"闭包中内部函数可以访问外部变量的原因\",{\"3\":{\"162\":1}}],[\"闭包就是在作用域链中查找变量的一种机制\",{\"3\":{\"160\":1}}],[\"闭包进行延迟执行\",{\"3\":{\"4\":1}}],[\"闭包可以用来延迟函数的执行\",{\"3\":{\"4\":1}}],[\"闭包可以用来封装私有变量\",{\"3\":{\"4\":1}}],[\"闭包可以用来模拟块级作用域\",{\"3\":{\"4\":1}}],[\"闭包的应用\",{\"0\":{\"4\":1},\"2\":{\"4\":1}}],[\"闭包的另一个特性是\",{\"3\":{\"3\":1}}],[\"闭包是指有权访问另一个函数作用域中的变量的函数\",{\"3\":{\"3\":1}}],[\"闭包\",{\"0\":{\"3\":1,\"162\":1},\"2\":{\"3\":1,\"162\":1},\"3\":{\"1\":1,\"2\":1,\"100\":1}}],[\"v8\",{\"3\":{\"296\":1}}],[\"vs\",{\"1\":{\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1}}],[\"void\",{\"3\":{\"203\":1}}],[\"vue生命周期图\",{\"3\":{\"283\":1}}],[\"vue3\",{\"0\":{\"278\":1},\"2\":{\"278\":1}}],[\"vuex\",{\"3\":{\"273\":1}}],[\"vue2\",{\"0\":{\"272\":1},\"2\":{\"272\":1}}],[\"vue\",{\"0\":{\"196\":1},\"2\":{\"196\":1},\"3\":{\"196\":2,\"283\":1}}],[\"viewport\",{\"3\":{\"250\":1}}],[\"viewport是什么\",{\"3\":{\"100\":1}}],[\"visibility\",{\"3\":{\"24\":1,\"28\":1,\"29\":1}}],[\"value=\",{\"3\":{\"214\":1,\"237\":1,\"240\":1}}],[\"valueof\",{\"3\":{\"136\":1}}],[\"value\",{\"3\":{\"94\":2,\"102\":1,\"160\":3,\"162\":2,\"218\":1,\"240\":1,\"241\":1}}],[\"var和let声明的变量是可变的\",{\"3\":{\"58\":2}}],[\"var声明的变量可以被重复声明\",{\"3\":{\"57\":2}}],[\"var声明的变量会被提升到代码的最前面\",{\"3\":{\"56\":1}}],[\"var声明的变量在全局作用域和块级作用域中都可以访问到\",{\"3\":{\"55\":1}}],[\"var是\",{\"3\":{\"53\":1}}],[\"variant\",{\"3\":{\"24\":1}}],[\"var定义的变量会具有变量提升的特性\",{\"3\":{\"4\":1}}],[\"var\",{\"0\":{\"52\":1},\"2\":{\"52\":1},\"3\":{\"2\":1,\"3\":4,\"4\":8,\"14\":1,\"55\":3,\"56\":1,\"57\":2,\"58\":1,\"160\":2,\"162\":1}}],[\"vm是相对于视窗的高度和宽度来计算的\",{\"3\":{\"26\":1}}],[\"vm的区别\",{\"3\":{\"26\":1}}],[\"vm\",{\"3\":{\"26\":1}}],[\"vh\",{\"3\":{\"26\":2}}],[\"vertical\",{\"3\":{\"24\":1}}],[\"v\",{\"0\":{\"0\":1,\"1\":1,\"2\":1,\"3\":1,\"4\":1,\"5\":1,\"6\":1,\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"51\":1,\"52\":1,\"53\":1,\"54\":1,\"55\":1,\"56\":1,\"57\":1,\"58\":1,\"59\":1,\"60\":1,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1,\"73\":1,\"74\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"95\":1,\"96\":1,\"97\":1,\"98\":1,\"99\":1,\"100\":1,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"108\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1,\"113\":1,\"114\":1,\"115\":1,\"116\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"122\":1,\"123\":1,\"124\":1,\"125\":1,\"126\":1,\"127\":1,\"128\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"134\":1,\"135\":1,\"136\":1,\"137\":1,\"138\":1,\"139\":1,\"140\":1,\"141\":1,\"142\":1,\"143\":1,\"144\":1,\"145\":1,\"146\":1,\"147\":1,\"148\":1,\"149\":1,\"150\":1,\"151\":1,\"152\":1,\"153\":1,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"159\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":1,\"164\":1,\"165\":1,\"166\":1,\"167\":1,\"168\":1,\"169\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"175\":1,\"176\":1,\"177\":1,\"178\":1,\"179\":1,\"180\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"187\":1,\"188\":1,\"189\":1,\"190\":1,\"191\":1,\"192\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":1,\"198\":1,\"199\":1,\"200\":1,\"201\":1,\"202\":1,\"203\":1,\"204\":1,\"205\":1,\"206\":1,\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1,\"212\":1,\"213\":1,\"214\":1,\"215\":1,\"216\":1,\"217\":1,\"218\":1,\"219\":1,\"220\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"229\":1,\"230\":1,\"231\":1,\"232\":1,\"233\":1,\"234\":1,\"235\":1,\"236\":1,\"237\":1,\"238\":1,\"239\":1,\"240\":1,\"241\":1,\"242\":1,\"243\":1,\"244\":1,\"245\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"253\":1,\"254\":1,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":1,\"265\":1,\"266\":1,\"267\":1,\"268\":1,\"269\":1,\"270\":1,\"271\":1,\"272\":1,\"273\":1,\"274\":1,\"275\":1,\"276\":1,\"277\":1,\"278\":1,\"279\":1,\"280\":1,\"281\":1,\"282\":1,\"283\":1,\"284\":1,\"285\":1,\"286\":1,\"287\":1,\"288\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"294\":1,\"295\":1,\"296\":1,\"297\":1},\"1\":{\"265\":2,\"266\":2,\"267\":2,\"268\":2,\"269\":2,\"270\":2,\"271\":2},\"3\":{\"265\":2,\"267\":6,\"268\":2,\"269\":2,\"270\":2}}]],\"serializationVersion\":2}}")).map(([a,t])=>[a,xt.loadJSON(t,{fields:["title","header","text","customFields"],storeFields:["title","header","text","customFields"]})]));self.onmessage=({data:{query:a,locale:t,options:e}})=>{self.postMessage(Vt(a,Lt[t],e))};
//# sourceMappingURL=index.js.map
