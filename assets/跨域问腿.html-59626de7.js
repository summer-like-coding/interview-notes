import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as t,b as e,e as n,f as s}from"./app-326e41d4.js";const l={},r=e(`<h2 id="什么是跨域" tabindex="-1"><a class="header-anchor" href="#什么是跨域" aria-hidden="true">#</a> 什么是跨域</h2><p>跨域是指<strong>浏览器</strong>不能执行其他网站的脚本。它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对<code>javascript</code>施加的安全限制。</p><p>引申： 什么是同源策略？</p><h3 id="同源策略" tabindex="-1"><a class="header-anchor" href="#同源策略" aria-hidden="true">#</a> 同源策略</h3><p>浏览器规定，<code>AJAX</code>请求只能发给同源的网址，否则就报错。所谓同源是指，域名，协议，端口相同。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://www.example.com/dir/page.html

http://www.example.com/dir2/other.html <span class="token comment"># 同源</span>

https://www.example.com/dir/page.html <span class="token comment"># 不同源（协议不同）</span>

http://www.example.com:81/dir/page.html <span class="token comment"># 不同源（端口不同）</span>

http://www.example.com/dir/page.html <span class="token comment"># 不同源（域名不同）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比如你在请求一个跨域的接口，浏览器会将这个请求拦截下来，不会发出去，也不会返回结果，但是浏览器的控制台中会显示出如下错误信息：</p>`,8),u=e(`<h2 id="如何解决跨域" tabindex="-1"><a class="header-anchor" href="#如何解决跨域" aria-hidden="true">#</a> 如何解决跨域</h2><h3 id="_1-通过-jsonp-跨域" tabindex="-1"><a class="header-anchor" href="#_1-通过-jsonp-跨域" aria-hidden="true">#</a> 1. 通过 jsonp 跨域</h3><p><code>jsonp</code>的原理是动态创建<code>script</code>标签</p><p><strong>HTML5 的 script 标签，默认 type 就是 text/javascript</strong>,这时候请求的内容就会被当做<code>javascript</code>代码去执行，然后就可以拿到数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&#39;text/javascript&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// 传参并指定回调执行函数为onBack</span>
    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">&#39;http://www.domain2.com:8080/login?user=admin&amp;callback=onBack&#39;</span><span class="token punctuation">;</span>
    document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 回调执行函数</span>
    <span class="token keyword">function</span> <span class="token function">onBack</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也就是说，我们在客户端提前设置好一个函数，这个函数的作用是拿到服务器返回的数据，然后做一些事情，这个函数就是<code>onBack</code>。 当服务器看到这些额外的参数，就会将要返回的数据包裹在这个函数里面，然后以 JSON 格式返回给客户端。</p><p>JOSNP 的优缺点：</p><ul><li>优点：兼容性好，简单易用，支持浏览器与服务器双向通信。</li><li>缺点：只支持 GET 请求，不安全，可能会遭受 XSS 攻击。</li></ul><h3 id="_2-cors-跨域" tabindex="-1"><a class="header-anchor" href="#_2-cors-跨域" aria-hidden="true">#</a> 2. CORS 跨域</h3><ol><li>当浏览器在发送跨域请求的时候，会自动在请求头中加入<code>Origin</code>字段，这个字段的值就是当前页面的源（协议 + 域名 + 端口）。</li><li>这时候服务器就可以根据这个值来决定是否同意这次请求。可以设置<code>Access-Control-Allow-Origin</code>字段来允许指定源的请求。</li><li><strong>当用户想要修改服务器数据的时候，例如 PUT，Patch 之类的</strong>，浏览器就会自动发送一个预检请求，这个请求是一个<code>OPTIONS</code>请求，这个请求的作用是询问服务器是否允许这种请求，如果服务器允许，就会在响应头中加入<code>Access-Control-Allow-Methods</code>字段，告诉浏览器允许这种请求。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// nodejs</span>
<span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 设置响应头，允许跨域</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置响应头，允许跨域的请求方式</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Methods&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GET,POST,DELETE,OPTIONS&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 允许前端获取哪个请求头</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Headers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;x-requested-with,content-type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置响应头，允许跨域携带cookie</span>
    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Credentials&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置响应体</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;hello cors&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>&#39;server running at http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>
    <span class="token literal-property property">localhost</span><span class="token operator">:</span><span class="token number">3000</span>&#39;<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体流程如下：</p>`,12),d=n("h3",{id:"_3-反向代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-反向代理","aria-hidden":"true"},"#"),s(" 3. 反向代理")],-1),k=n("p",null,"反向代理的原理是：同源策略是浏览器的安全策略，不是服务器的安全策略，服务器完全可以不遵守同源策略，服务器可以接收任何请求，也可以发送任何请求，所以我们可以通过服务器来请求接口，然后再将结果返回给浏览器，这样浏览器就认为这是同源的了。",-1),m=n("p",null,[s("一般在项目中，我们可以去配置"),n("code",null,"nginx"),s("来做反向代理，也可以配置"),n("code",null,"Vite"),s(", "),n("code",null,"webpack"),s("等工具来做反向代理。")],-1);function v(h,b){const a=o("Mermaid");return c(),i("div",null,[r,t(a,{id:"mermaid-22",code:"eJxLL0osyFDwCeJyjH62tf/F8o6nM1fEKujq2ik4Rb9Yv/3ZxqYX21c8nT//Wd/Sp/2LY7mcwHLOCMVP+yc+79vwYv/MZzPWQ5RCtMVyOYOVuiCUvpyx+9naRU92tYFUr1kIUwcAKaNK/Q=="}),u,t(a,{id:"mermaid-78",code:"eJxLL0osyFDwCeJyjH62tf/F8o6nM1fEKujq2ik4RT/tn/iyofHF9hVP589/sX77s41NsVxOYDnn6Gdzep92LQQp5nIGC7kghF6s2/d877qnk3uf7prydMmWWC4XsApXhA3PFux81otQ8bRjybNpa5/NWP90wrKnrY0v1u2AWBrLBQDI61lA"}),d,k,t(a,{id:"mermaid-85",code:"eJzjSi9KLMhQ8Anicox+trX/xfKOpzNXxCro6topOEU/7Z/4sqHxxfrtzzY2xXI5gUWdo5/N6X3atRCkjMsZLOSCEELV4QKWdkVIP+tb+mzKNpi0K1jaDSH9Yv+Up7PnPd89+dm8ObFcbmBpd4SzILph0gB2j2Dz"}),m])}const w=p(l,[["render",v],["__file","跨域问腿.html.vue"]]);export{w as default};
