import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c,a as t,b as d,d as e}from"./app-02f9439b.js";const o="/interview-notes/assets/数据类型.drawio-06107b86.png",r={},l=d('<h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型" aria-hidden="true">#</a> 基本数据类型</h3><h4 id="number" tabindex="-1"><a class="header-anchor" href="#number" aria-hidden="true">#</a> <code>Number</code></h4><p>转化为数字的方法<code>parseInt()</code>和<code>Number()</code> 有什么区别？</p><ul><li><code>Number()</code>只可以转化<strong>纯数字字符串或者空字符串</strong>，<strong>长度为 1/0 的数组</strong>，<strong>布尔值</strong>，<strong>null</strong></li><li><code>ParseInt()</code>只能将字符串转化为数字，遇到不可以转化的就截断，返回已经转化的数字，如果第一个字符就不可以转化，返回<code>NaN</code></li></ul>',4),i=d('<table><thead><tr><th style="text-align:center;">value</th><th style="text-align:center;">Number()</th><th style="text-align:center;">parseInt()</th></tr></thead><tbody><tr><td style="text-align:center;">&#39;123&#39;</td><td style="text-align:center;">123</td><td style="text-align:center;">123</td></tr><tr><td style="text-align:center;">&#39;123a&#39;</td><td style="text-align:center;">NaN</td><td style="text-align:center;">123</td></tr><tr><td style="text-align:center;">&#39;a123&#39;</td><td style="text-align:center;">NaN</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">true/false</td><td style="text-align:center;">1/0</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">null</td><td style="text-align:center;">0</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">[] / [1]</td><td style="text-align:center;">0/1</td><td style="text-align:center;">NaN</td></tr><tr><td style="text-align:center;">&quot;&quot;</td><td style="text-align:center;">0</td><td style="text-align:center;">NaN</td></tr></tbody></table><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> <code>String</code></h4><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> <code>Boolean</code></h4><p>转化为布尔值的方法：<code>Boolean()</code>和<code>!!</code></p><ul><li><code>Boolean()</code></li><li><code>!!</code>:双重非运算符</li></ul><p>布尔值转化为<code>false</code>的情况：</p><ul><li><code>0</code>(数字 0)</li><li><code>null</code></li><li><code>undefined</code></li><li><code>NaN</code></li><li><code>&#39;&#39;</code>(空字符串)<br><strong>其他情况都是转化为<code>true</code></strong>，比如<code>[]</code>,<code>{}</code>等</li></ul><h4 id="null" tabindex="-1"><a class="header-anchor" href="#null" aria-hidden="true">#</a> <code>Null</code></h4><p><code>typeof null</code>会返回<code>object</code></p><h4 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> <code>Undefined</code></h4><p><code>undefined</code>是一个全局变量，它的值就是<code>undefined</code>，一般<code>typeof undefined</code>会返回<code>undefined</code>,它其实就是变量声明，但是没有赋值的情况下的默认值</p><p><code>undefined</code>和<code>null</code>的区别：</p><ul><li><code>undefined</code>是一个变量，而<code>null</code>是一个关键字</li><li><code>undefined</code>是变量声明，但是没有赋值的情况下的默认值，而<code>null</code>是一个空对象指针(<code>Object</code>)</li><li><code>undefined</code>的类型是<code>undefined</code>，而<code>null</code>的类型是<code>object</code></li><li><code>undefined</code>转化为数字是<code>NaN</code>，而<code>null</code>转化为数字是<code>0</code></li><li><code>null == undefined</code> // true</li></ul><h4 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> <code>Symbol</code></h4><h3 id="引用数据类型" tabindex="-1"><a class="header-anchor" href="#引用数据类型" aria-hidden="true">#</a> 引用数据类型</h3><h4 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> <code>Object</code></h4><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> <code>Array</code></h4><h4 id="function" tabindex="-1"><a class="header-anchor" href="#function" aria-hidden="true">#</a> <code>Function</code></h4><h4 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> <code>Date</code></h4><h4 id="regexp" tabindex="-1"><a class="header-anchor" href="#regexp" aria-hidden="true">#</a> <code>RegExp</code></h4><h3 id="存储位置" tabindex="-1"><a class="header-anchor" href="#存储位置" aria-hidden="true">#</a> 存储位置</h3><ul><li><p>基本数据类型的值是存储在<strong>栈内存</strong>中的，每个变量都有自己的内存空间，互不影响</p></li><li><p>引用数据类型的值是存储在<strong>堆内存</strong>中的，每个变量存储的是一个指针，指向存储在堆内存中的对象，这个对象包含了实际的值</p></li></ul>',22),s=e("figure",null,[e("img",{src:o,alt:"数据类型的存储位置",tabindex:"0",loading:"lazy"}),e("figcaption",null,"数据类型的存储位置")],-1);function h(u,g){return n(),c("div",null,[l,t(" 绘制7x3的表格 "),i,t(" 插入图片 "),s])}const b=a(r,[["render",h],["__file","01数据类型.html.vue"]]);export{b as default};
