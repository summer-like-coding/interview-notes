import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as o,a as c}from"./app-c53be088.js";const i={},l=c('<h3 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h3><p>操作方法我们可以从<code>CRUD</code>(增删改查)四个方面来进行分类</p><h4 id="增加元素" tabindex="-1"><a class="header-anchor" href="#增加元素" aria-hidden="true">#</a> 增加元素</h4><ul><li>不会改变数组本身 <ul><li><code>concat()</code>:连接两个或多个数组，返回新数组</li></ul></li><li>会改变数组本身 <ul><li><code>push()</code>:在数组末尾添加元素，返回数组长度</li><li><code>shift()</code>:在数组开头添加元素，返回数组长度</li><li><code>splice(start,deleteCount,item1,item2...)</code>:在数组中间添加元素，返回<strong>删除的元素</strong>组成的数组</li></ul></li></ul><h4 id="删除元素" tabindex="-1"><a class="header-anchor" href="#删除元素" aria-hidden="true">#</a> 删除元素</h4><ul><li>不会改变数组本身 <ul><li><code>slice(start,end)</code>:返回一个新数组，包含从<code>start</code>到<code>end</code>(不包括<code>end</code>)的元素</li></ul></li><li>会改变数组本身 <ul><li><code>pop()</code>:删除数组末尾的元素，返回删除的元素</li><li><code>unshift()</code>:删除数组开头的元素，返回删除的元素</li><li><code>splice(start,deleteCount,item1,item2...)</code>:从start位置开始删除deleteCount个，返回<strong>删除的元素</strong>组成的数组</li></ul></li></ul><h4 id="修改元素" tabindex="-1"><a class="header-anchor" href="#修改元素" aria-hidden="true">#</a> 修改元素</h4><p>修改数组，一般使用<code>slice()</code>和<code>splice()</code>方法</p><h4 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素" aria-hidden="true">#</a> 查找元素</h4><ul><li><code>ES6</code>之前 <ul><li><code>indexOf()</code>/<code>lastIndexOf()</code>:返回元素在数组中的位置，如果不存在，返回<code>-1</code></li></ul></li><li><code>ES6</code>之后 <ul><li><code>find()</code>:返回第一个符合条件的元素</li><li><code>includes()</code>:返回布尔值，表示是否找到了元素</li></ul></li></ul><h3 id="排序方法" tabindex="-1"><a class="header-anchor" href="#排序方法" aria-hidden="true">#</a> 排序方法</h3><ul><li><code>sort()</code>，可以传入一个比较函数，比较函数返回值为<code>-1</code>，<code>0</code>，<code>1</code>，分别表示小于，等于，大于，会改变数组本身</li><li><code>reverse()</code>,将数组进行反转，会改变数组本身</li></ul><h3 id="迭代方法" tabindex="-1"><a class="header-anchor" href="#迭代方法" aria-hidden="true">#</a> 迭代方法</h3><p><strong>所有的迭代方法都不会改变数组本身</strong></p><ul><li><code>forEach((item,index,array)=&gt;{})</code>:遍历数组，对每个元素进行操作，<strong>没有返回值</strong></li><li><code>map((item,index,array)=&gt;{})</code>:遍历数组，对每个元素进行操作，返回一个新数组</li><li><code>filter((item,index,array)=&gt;{})</code>:遍历数组，对每个元素进行操作，返回一个新数组，新数组中的元素是通过测试的元素</li><li><code>some((item,index,array)=&gt;{})</code>:遍历数组，对每个元素进行操作，返回一个布尔值，只要<strong>有一个</strong>元素通过测试，就返回<code>true</code></li><li><code>every((item,index,array)=&gt;{})</code>:遍历数组，对每个元素进行操作，返回一个布尔值，只有<strong>所有</strong>元素都通过测试，才返回<code>true</code></li><li><code>reduce((prev,cur,index,array)=&gt;{},initValue)</code>:遍历数组，对每个元素进行操作，返回一个值，该值会作为下一次迭代的<code>prev</code>，<code>initValue</code>为初始值，如果没有初始值，那么第一次迭代的<code>prev</code>为数组的第一个元素，<code>cur</code>为数组的第二个元素</li></ul><h3 id="转化方法" tabindex="-1"><a class="header-anchor" href="#转化方法" aria-hidden="true">#</a> 转化方法</h3><p>数组转化为字符串</p><ul><li><code>toString()</code>:将数组转化为字符串，每个元素用<code>,</code>隔开</li><li><code>join()</code>:将数组转化为字符串，每个元素用指定的字符串隔开</li></ul>',18),a=[l];function r(t,n){return d(),o("div",null,a)}const u=e(i,[["render",r],["__file","02数组常用方法.html.vue"]]);export{u as default};
