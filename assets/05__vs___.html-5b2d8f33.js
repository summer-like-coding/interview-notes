import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c,d as o,b as e}from"./app-88bd21e7.js";const l={},n=e('<h3 id="等于" tabindex="-1"><a class="header-anchor" href="#等于" aria-hidden="true">#</a> 等于</h3><p>等于<code>==</code>属于比较运算符，会进行隐式类型转换，转换规则如下： <strong>笼统的说，就是如果两个值类型不同，那么就会进行类型转换，转换成相同的类型，再进行比较。</strong></p><ul><li>如果一方是布尔值或者是字符串，那么会将布尔值/字符串转换为数字，再进行比较</li><li><code>null == undefined</code> //<code>true</code></li><li><code>NaN</code>和任何值都不相等，包括自己：<code>NaN == NaN</code> //<code>false</code></li><li>如果一方是<code>Object</code>(对象)，一方是<code>String</code>、<code>Number</code>或者<code>Symbol</code>，那么会将对象转换为原始类型的值(<code>obj.valueOf()</code>)，再进行比较</li><li>如果两方都是<code>Object</code>(对象)，那么比较的是两个对象的引用是否相等<br> 意思就是：比较这两个对象是不是同一个对象(栈内存里面的地址必须相同)</li></ul><h3 id="完全等于" tabindex="-1"><a class="header-anchor" href="#完全等于" aria-hidden="true">#</a> 完全等于</h3><p>完全等于<code>===</code>属于比较运算符，<strong>不会进行隐式类型转换</strong>，如果类型不同，直接返回<code>false</code>，如果类型相同，再进行值的比较。</p>',5),a=e('<p>下面给出一些例子：</p><table><thead><tr><th style="text-align:center;">compare</th><th style="text-align:center;"><code>==</code></th><th style="text-align:center;"><code>===</code></th></tr></thead><tbody><tr><td style="text-align:center;">&quot;55&quot;和 55</td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;">null 和 undefined</td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;">NaN 和 NaN</td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;">null 和 null</td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;">undefined 和 undefined</td><td style="text-align:center;"><code>true</code></td><td style="text-align:center;"><code>true</code></td></tr><tr><td style="text-align:center;"><code>{a:1}</code>和<code>{a:1}</code></td><td style="text-align:center;"><code>false</code></td><td style="text-align:center;"><code>false</code></td></tr></tbody></table><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><ol><li><code>==</code>会进行隐式类型转换，转换成相同的类型，再进行比较</li><li><code>===</code>不会进行隐式类型转换，如果类型不同，直接返回<code>false</code>，如果类型相同，再进行值的比较</li><li><code>null == undefined</code> //<code>true</code></li><li><code>null === undefined</code> //<code>false</code></li></ol>',4);function r(i,s){return d(),c("div",null,[n,o(" 绘制一个三列的表格，==Vs=== "),a])}const f=t(l,[["render",r],["__file","05__vs___.html.vue"]]);export{f as default};
