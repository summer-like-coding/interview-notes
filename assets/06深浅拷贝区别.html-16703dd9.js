import{_ as u}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as r,c as k,a as o,w as a,e as n,f as s,b as l}from"./app-4f6b3c8d.js";const d={},b=n("h3",{id:"浅拷贝",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#浅拷贝","aria-hidden":"true"},"#"),s(" 浅拷贝")],-1),m=n("p",null,[s("浅拷贝只是复制了一层对象的属性，如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。"),n("br"),n("strong",null,"笼统来说，就是它只管一层")],-1),v=n("p",null,"代码实现",-1),j=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"shallowClone"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 创建一个对象，遍历需要克隆的对象，把属性和值都放在新创建的对象上"),s(`
  `),n("span",{class:"token keyword"},"let"),s(" cloneObj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token keyword"},"in"),s(" obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    cloneObj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(" obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" cloneObj"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=l('<h4 id="常见的浅拷贝方法" tabindex="-1"><a class="header-anchor" href="#常见的浅拷贝方法" aria-hidden="true">#</a> 常见的浅拷贝方法</h4><ul><li><code>Object.assign()</code></li><li><code>Array.prototype.concat()</code></li><li><code>拓展运算符([...obj])</code></li></ul><h3 id="深拷贝" tabindex="-1"><a class="header-anchor" href="#深拷贝" aria-hidden="true">#</a> 深拷贝</h3><p>深拷贝就是能够实现真正意义上的对象拷贝。<strong>深拷贝会拷贝所有的属性，并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。</strong></p><p>代码实现</p>',5),h=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 采用递归的方式，直到类型为基本类型为止"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" obj "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},'"object"'),s(),n("span",{class:"token operator"},"||"),s(" obj "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// obj为null的时候直接返回"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" obj"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// 定义一个容器，用来装obj的克隆对象"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" cloneObj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"for"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token keyword"},"in"),s(" obj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token comment"},"// 判断obj的属性值是否是对象，如果是对象就递归调用deepClone"),s(`
            cloneObj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" cloneObj"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),_=n("p",null,[s("但是这个深拷贝没有考虑到数组的情况,只考虑了普通"),n("code",null,"Object"),s("情况，所以还需要对数组进行判断")],-1),w=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token comment"},"// 采用递归的方式，直到类型为基本类型为止"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" obj "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},'"object"'),s(),n("span",{class:"token operator"},"||"),s(" obj "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// obj为null的时候直接返回"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" obj"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 定义一个容器，用来装obj的克隆对象"),s(`
    `),n("span",{class:"token comment"},"// 判断obj的类型是数组还是对象"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" cloneObj "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 遍历需要克隆的对象"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token keyword"},"in"),s(" obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// 判断obj的属性值是否是对象，如果是对象就递归调用deepClone"),s(`
      cloneObj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" cloneObj"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=l(`<p>但是这个深拷贝还有一个问题，就是循环引用的问题，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>b<span class="token punctuation">.</span>d <span class="token operator">=</span> obj<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，就会造成死循环，所以我们需要一个容器来存储已经拷贝过的对象，如果已经拷贝过了，就直接返回，不需要再次拷贝。</p>`,3),g=n("div",{class:"language-javascript line-numbers-mode","data-ext":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" map "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"typeof"),s(" obj "),n("span",{class:"token operator"},"!=="),s(),n("span",{class:"token string"},'"object"'),s(),n("span",{class:"token operator"},"||"),s(" obj "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"return"),s(" obj"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 判断Object或者Array"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" cloneObj "),n("span",{class:"token operator"},"="),s(" Array"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isArray"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// 判断是否已经拷贝过了"),s(`
    `),n("span",{class:"token comment"},"// 如果已经拷贝过了，那么直接返回"),s(`
    `),n("span",{class:"token comment"},"// 如果没有拷贝过，那么就把当前对象作为key，克隆对象作为value存储起来"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" map"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
      map`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},","),s(" cloneObj"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token comment"},"// 遍历需要克隆的对象"),s(`
      `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" key "),n("span",{class:"token keyword"},"in"),s(" obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        cloneObj`),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"deepClone"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},"["),s("key"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" map"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
      `),n("span",{class:"token keyword"},"return"),s(" cloneObj"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=l('<p>接着我们可以参考，js 的垃圾回收机制，把<code>map</code>换为<code>WeakMap</code>，这样的话，当<code>obj</code>被回收的时候，<code>WeakMap</code>也会被回收，这样就不会造成内存泄漏了。</p><p>补充<code>WeakMap</code></p><ul><li><code>WeakMap</code>只接受对象作为键名（<code>null</code>除外），不接受其他类型的值作为键名</li><li><code>WeakMap</code>属于弱引用，当<code>WeakMap</code>的键名所指向的对象被回收，那么<code>WeakMap</code>的键名和键值也会被回收</li></ul><p>但是即使这样，这个深拷贝还是有问题的，就是对于<code>Date</code>、<code>RegExp</code>、<code>Error</code>、<code>Function</code>等特殊对象，还是没有考虑到，所以我们需要对这些特殊对象进行判断,这边就不写了，有兴趣的可以自己写一下。</p><h4 id="常见的深拷贝方法" tabindex="-1"><a class="header-anchor" href="#常见的深拷贝方法" aria-hidden="true">#</a> 常见的深拷贝方法</h4><ul><li><code>JSON.parse(JSON.stringify(obj))</code>:将对象转换为字符串，再将字符串转换为对象</li><li><code>lodash.cloneDeep(obj)</code></li></ul><h3 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h3>',7),O={href:"https://juejin.cn/post/6844903929705136141",target:"_blank",rel:"noopener noreferrer"};function A(C,M){const c=p("CodeTabs"),i=p("ExternalLinkIcon");return r(),k("div",null,[b,m,v,o(c,{id:"9",data:[{id:"js"}],"tab-id":"code1"},{title0:a(({value:e,isActive:t})=>[s("js")]),tab0:a(({value:e,isActive:t})=>[j]),_:1}),y,o(c,{id:"43",data:[{id:"js"}],"tab-id":"code2"},{title0:a(({value:e,isActive:t})=>[s("js")]),tab0:a(({value:e,isActive:t})=>[h]),_:1}),_,o(c,{id:"51",data:[{id:"js"}],"tab-id":"code3"},{title0:a(({value:e,isActive:t})=>[s("js")]),tab0:a(({value:e,isActive:t})=>[w]),_:1}),f,o(c,{id:"63",data:[{id:"js"}],"tab-id":"code4"},{title0:a(({value:e,isActive:t})=>[s("js")]),tab0:a(({value:e,isActive:t})=>[g]),_:1}),x,n("p",null,[n("a",O,[s("如何写出一个惊艳面试官的深拷贝"),o(i)])])])}const E=u(d,[["render",A],["__file","06深浅拷贝区别.html.vue"]]);export{E as default};
