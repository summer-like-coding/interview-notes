import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,d as n,f as s,e,a}from"./app-232346ce.js";const i={},u=a(`<ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> KMP 算法代码实现</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 算法第三题</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 小根堆，大根堆</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-3" disabled="disabled"><label class="task-list-item-label" for="task-item-3"> TCP握手图解</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-4" disabled="disabled"><label class="task-list-item-label" for="task-item-4"> 报文</label></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-5" disabled="disabled"><label class="task-list-item-label" for="task-item-5"> 快速响应的调度算法</label></li></ul><h2 id="笔试概述" tabindex="-1"><a class="header-anchor" href="#笔试概述" aria-hidden="true">#</a> 笔试概述</h2><p>小红书的题型是选择题+算法题，选择题有 20 道，算法题有 3 道，时间是 120 分钟。</p><ul><li>选择题的题型有单选题、多选题，涉及的范围都是计算机基础知识，包括操作系统、计算机网络、数据结构、算法、数据库、前端基础。（鄙人的基础，一塌糊涂，哭死）</li><li>算法题还可以不算很难，但是时间有点紧，一道题的时间是 30 分钟左右，所以要快速的写出来，不然时间不够。 <ul><li>第一题打卡题，很简单。</li><li>第二题递归即可，但是数据量很大，所以需要<code>long</code>类型，<code>JavaScript</code>可能需要设置<code>BigInt</code>。我没想到，后来看牛客上的佬说的。</li><li>第三题，时间来不及了，其实也没啥思路。</li></ul></li></ul><p>总的来说，其实不是很难，但是我不会。</p><h2 id="选择题" tabindex="-1"><a class="header-anchor" href="#选择题" aria-hidden="true">#</a> 选择题</h2><h4 id="symbol类型的特点" tabindex="-1"><a class="header-anchor" href="#symbol类型的特点" aria-hidden="true">#</a> <code>symbol</code>类型的特点</h4><ol><li><code>symbol</code>类型不可以和其他类型进行计算</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建symbol</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(s1)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// symbol类型不能和其他类型进行运算，会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>将<code>symbol</code>转为<code>string</code>类型</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建symbol</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(s1)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Symbol(s1)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>symbol</code>转为<code>boolean</code>类型</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建symbol</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(s1)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><code>symbol</code>类型和其他类型进行比较运算</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建symbol</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;s1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Symbol(s1)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，其实<code>symbol</code>类型，他就是一个独一无二的值，所以你不可以将他和其他类型进行运算，但是可以将他转为其他类型。并且<code>symbol</code>是一个类型，他不可以用<code>new</code>来创建，只能用<code>Symbol()</code>来创建。</p><h4 id="文本溢出" tabindex="-1"><a class="header-anchor" href="#文本溢出" aria-hidden="true">#</a> 文本溢出</h4><p>文本溢出主要是需要三个属性来实现，分别是<code>overflow</code>、<code>text-overflow</code>、<code>white-space</code>。</p><ul><li><code>overflow</code>：设置文本溢出时的处理方式，有<code>visible</code>、<code>hidden</code>、<code>scroll</code>、<code>auto</code>。</li><li><code>text-overflow</code>：设置文本溢出时的显示方式，有<code>clip</code>、<code>ellipsis</code>(省略号)。</li><li><code>white-space</code>：处理元素中的空白，有<code>normal</code>、<code>nowrap</code>(单行)、<code>pre</code>、<code>pre-wrap</code>、<code>pre-line</code>。</li></ul><h5 id="实现单行文本溢出" tabindex="-1"><a class="header-anchor" href="#实现单行文本溢出" aria-hidden="true">#</a> 实现单行文本溢出</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 单行文本溢出 */</span>
<span class="token selector">.single-line</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="实现多行文本溢出-基于行数截断" tabindex="-1"><a class="header-anchor" href="#实现多行文本溢出-基于行数截断" aria-hidden="true">#</a> 实现多行文本溢出(基于行数截断)</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/* 多行文本溢出 */</span>
<span class="token selector">.multi-line</span> <span class="token punctuation">{</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
  <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-box<span class="token punctuation">;</span>
  <span class="token property">-webkit-line-clamp</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span> <span class="token comment">/* 行数 */</span>
  <span class="token property">-webkit-box-orient</span><span class="token punctuation">:</span> vertical<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这个是 CSS3 的属性，所以兼容性不是很好。</p><h4 id="子元素-margin-问题" tabindex="-1"><a class="header-anchor" href="#子元素-margin-问题" aria-hidden="true">#</a> 子元素 margin 问题</h4><ul><li>子元素设置的<code>margin</code>会影响父元素的位置。</li><li>子元素设置的<code>padding</code>不会影响父元素的位置。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">.parent</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token selector">.child</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>child<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码，当子元素设置了<code>margin-top</code>的时候，子元素向下移动<code>50px</code>，并且父元素也向下移动了<code>50px</code></p><p><strong>特别注意</strong>：假如<code>margin</code>/<code>padding</code>的设置的值是<code>50%</code>(无论是上下还是左右),那么它都是是相对于父元素的宽度来计算的，而不是高度。这个是根据，<strong>writing-mode</strong>来决定的(默认属性：<code>horizontal-tb</code>，水平方向从左到右，垂直方向从上到下)。</p>`,29),d={href:"https://segmentfault.com/a/1190000022267335",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>那么如何解决这个问题呢？主要其实有两种方法：</p><ul><li>构建 BFC：这个很好理解，因为 BFC 是独立的区域，两个元素就不会相互影响了。</li><li>添加<code>border</code>或者<code>padding</code>：这个记住就行了吧！</li></ul><h4 id="flex-布局" tabindex="-1"><a class="header-anchor" href="#flex-布局" aria-hidden="true">#</a> flex 布局</h4><ul><li>flex 默认是 <strong>横向排列(row)</strong> 的，如果想要纵向排列，可以设置<code>flex-direction: column</code>。</li><li><code>justify-content</code>：主轴对齐方式 <ul><li><code>flex-start</code>：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>：居中对齐</li><li><code>space-between</code>：<strong>两端贴着边框</strong>，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，<strong>项目之间的间隔是项目与边框的间隔的两倍</strong>。</li><li><code>space-evenly</code>：间隔相等，<strong>项目之间的间隔和项目与边框的间隔都相等</strong>。</li></ul></li></ul><h4 id="对象的扩展运算符" tabindex="-1"><a class="header-anchor" href="#对象的扩展运算符" aria-hidden="true">#</a> 对象的扩展运算符</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置一个对象</span>
<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;summer&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//报错，因为对象不是可迭代对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>对象没法用扩展运算符</strong>，因为对象不是可迭代对象，但是可以通过<code>Object.keys()</code>来获取对象的所有属性，然后再通过<code>map</code>来遍历，这样就可以实现对象的扩展运算符了。</p><h4 id="tcp-三次握手-四次挥手图解" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手-四次挥手图解" aria-hidden="true">#</a> TCP 三次握手，四次挥手图解</h4><h4 id="kmp-字符串匹配算法" tabindex="-1"><a class="header-anchor" href="#kmp-字符串匹配算法" aria-hidden="true">#</a> KMP 字符串匹配算法</h4><p>首先先不谈算法怎么写，我们先来看看这个算法的思想，这样才能更好的理解这个算法。</p><p>一般我们在匹配字符串的时候，都是从头开始匹配，如果匹配不成功，就会回溯到上一个位置，然后再从头开始匹配，这样的话，就会导致很多重复的匹配，所以 KMP 算法就是为了解决这个问题而生的。</p><p>KMP 算法的思想就是</p><ul><li><p>当匹配失败的时候，我们不会回溯到上一个位置，而是根据已经匹配的字符串，来确定下一次匹配的位置，这样就可以避免很多重复的匹配了。(<strong>也就是那个遍历的指针，只能向前走，不可以回退回去</strong>)</p></li><li><p>他会有一个数组(<code>next</code>)，当我们发现，匹配失败的时候，我们就会根据这个数组的匹配的最后一个字符的值，来确定下一次匹配的位置(<strong>也就是，可以跳过多少个字符</strong>)。</p></li></ul><p>所以其实最主要的就是这个数组(<code>next</code>)的值怎么求？</p><p>我们先来捋一下计算这个<code>next</code>数组的思路：(假如我现在有一个字符串<code>abababca</code>)</p><ul><li>对于第一个字符<code>a</code>来说，它的<code>next</code>值一定是<code>0</code>，因为它前面没有字符了。</li><li>对于第二个字符<code>b</code>来说，它的<code>next</code>值一定是<code>0</code>，因为它前面只有一个字符<code>a</code>，所以它的<code>next</code>值一定是<code>0</code>。</li><li>对于第三个字符<code>a</code>来说，它的<code>next</code>值一定是<code>1</code>，因为它前面有两个字符<code>ab</code>，所以它的<code>next</code>值一定是<code>1</code>(匹配<code>a</code>)。</li><li>对于第四个字符<code>b</code>来说，它的<code>next</code>值一定是<code>2</code>，因为它前面有三个字符<code>aba</code>，所以它的<code>next</code>值一定是<code>2</code>(匹配<code>ab</code>)。</li><li>对于第五个字符<code>a</code>来说，它的<code>next</code>值一定是<code>3</code>，因为它前面有四个字符<code>abab</code>，所以它的<code>next</code>值一定是<code>3</code>(匹配<code>aba</code>)。</li><li>对于第六个字符<code>b</code>来说，它的<code>next</code>值一定是<code>4</code>，因为它前面有五个字符<code>ababa</code>，所以它的<code>next</code>值一定是<code>4</code>(匹配<code>abab</code>)。</li><li>对于第七个字符<code>c</code>来说，它的<code>next</code>值一定是<code>0</code>，因为它前面有六个字符<code>ababab</code>，所以它的<code>next</code>值一定是<code>0</code>。</li><li>对于第八个字符<code>a</code>来说，它的<code>next</code>值一定是<code>1</code>，因为它前面有七个字符<code>abababc</code>，所以它的<code>next</code>值一定是<code>1</code>(匹配<code>a</code>)。</li></ul><p><code>next</code>数组的本质，就是寻找 <strong>当前字串中相同前后缀的最大长度</strong>，但是不能是字符串本身。</p>`,17),k={href:"https://www.bilibili.com/video/BV1AY4y157yL/?share_source=copy_web&vd_source=dbd5755e577bdae4bc901ba06be7c505",target:"_blank",rel:"noopener noreferrer"},m=a(`<h4 id="小根堆和大根堆" tabindex="-1"><a class="header-anchor" href="#小根堆和大根堆" aria-hidden="true">#</a> 小根堆和大根堆</h4><h4 id="请求报文和响应报文" tabindex="-1"><a class="header-anchor" href="#请求报文和响应报文" aria-hidden="true">#</a> 请求报文和响应报文</h4><h4 id="快速响应的调度算法" tabindex="-1"><a class="header-anchor" href="#快速响应的调度算法" aria-hidden="true">#</a> 快速响应的调度算法</h4><h2 id="算法题" tabindex="-1"><a class="header-anchor" href="#算法题" aria-hidden="true">#</a> 算法题</h2><h4 id="计算小红每天刷小红书的时间" tabindex="-1"><a class="header-anchor" href="#计算小红每天刷小红书的时间" aria-hidden="true">#</a> 计算小红每天刷小红书的时间</h4><p>题目描述：小红在下午 5 点之后才会开始刷小红书，且一定会在凌晨 3 点前睡觉，计算小红每天刷小红书的时间。 输入描述：每两行，表示小红开始刷小红书的时间和结束刷小红书的时间，时间格式为：<code>hh:mm</code>，如<code>17:00</code>，<code>03:00</code></p><p>题目思路： 总体只需要考虑两种情况：</p><ul><li>开始时间和结束时间都在同一天：那么直接计算时间差就可以了</li><li>开始时间和结束时间不在同一天: 那么需要加上 24 小时，然后再计算时间差</li></ul><p>题目代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 读取一行数据</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 总共时间</span>
<span class="token keyword">let</span> time <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Time</span> <span class="token punctuation">{</span>
  <span class="token function">getTimeDiff</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 获取开始时间和结束时间</span>
      <span class="token keyword">let</span> start <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">let</span> end <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 计算时间差</span>
      <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDiff</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 累加时间差</span>
      time <span class="token operator">+=</span> diff<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 输出结果</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">getDiff</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 首先将两个字符串，按照:分割成数组</span>
    <span class="token keyword">let</span> startArr <span class="token operator">=</span> start<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> endArr <span class="token operator">=</span> end<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 计算时间差</span>
    <span class="token comment">// 如果endArr[0] &lt; startArr[0]，说明跨天了，需要加上24小时</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>endArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> startArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>endArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">24</span> <span class="token operator">-</span> startArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> endArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> startArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">(</span>endArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> startArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">+</span> endArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> startArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
t<span class="token punctuation">.</span><span class="token function">getTimeDiff</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="计算小红的最大快乐值" tabindex="-1"><a class="header-anchor" href="#计算小红的最大快乐值" aria-hidden="true">#</a> 计算小红的最大快乐值</h4><p>题目描述：已知她生活中有 n 个事件，分享第 i 个事件需要她花费 ti 的时间和 hi 的精力来编辑文章，并能获得 ai 的快乐值。在总花费时间不超过 T 且总花费精力不超过 H 的前提下，小红最多可以获得多少快乐值。</p><p>输入描述：第一行输入一个整数 n，表示事件的个数。接下来一行输出两个整数，表示总花费时间 T 和总花费精力 H。接下来 n 行，每行输入三个整数，表示事件的时间 ti，精力 hi 和快乐值 ai。</p><p>解题思路：</p><ul><li>首先，我们需要将所有的事件按照快乐值进行排序，这样可以保证我们在选择事件的时候，优先选择快乐值最大的事件。（贪心）</li><li>终止条件：当所有事件都比较完之后就终止条件</li><li>每次比较完一个(无论这个事件是否符合条件)，都需要将这个事件从数组中删除，这样可以保证下一次比较的时候，不会重复比较。</li><li>对于无法满足条件的事件，将快乐值置为 0 即可。</li></ul><p>题目代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 先获取输入，获取总事件数目</span>
<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取T和H</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">H</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取每个事件的信息</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token function">read_line</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 设置快乐时间</span>
<span class="token comment">// 因为数据很大，所以，需要使用BigInt</span>
<span class="token keyword">let</span> funTime <span class="token operator">=</span> <span class="token number">0n</span><span class="token punctuation">;</span>
<span class="token comment">// 声明一个类</span>
<span class="token keyword">class</span> <span class="token class-name">Fun</span> <span class="token punctuation">{</span>
  <span class="token comment">// 排序arr，将arr按照快乐值从大到小排序[t,h,a]</span>
  <span class="token function">sortArr</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 获取快乐时间</span>
  <span class="token function">getFunTime</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 递归出口</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 特殊情况，就是T和H都不够分配的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token constant">H</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      funTime <span class="token operator">+=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">T</span> <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token constant">H</span> <span class="token operator">&gt;=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      funTime <span class="token operator">+=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token constant">T</span> <span class="token operator">-=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token constant">H</span> <span class="token operator">-=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 并将当前这个item删除</span>
    arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 递归调用</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getFunTime</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// test</span>
<span class="token comment">// let n = 2;</span>
<span class="token comment">// let T = 2;</span>
<span class="token comment">// let H = 2;</span>
<span class="token comment">// let arr = [</span>
<span class="token comment">//   [1, 3, 3],</span>
<span class="token comment">//   [3, 1, 4],</span>
<span class="token comment">// ];</span>

<span class="token keyword">let</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fun<span class="token punctuation">.</span><span class="token function">sortArr</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
fun<span class="token punctuation">.</span><span class="token function">getFunTime</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>funTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>,上面的代码只有<code>36%</code>的通过率，网上说，maybe 是因为数据量太大，他们使用<code>long</code>通过了，所以我这边改为了<code>bigInt</code>，因为没法测试了，所以，这个代码的正确性，我也不知道。</p><h4 id="计算小红最多可以染红多少个结点" tabindex="-1"><a class="header-anchor" href="#计算小红最多可以染红多少个结点" aria-hidden="true">#</a> 计算小红最多可以染红多少个结点</h4><p>题目描述：小红有一颗树，每个结点有一个权值，初始时每个节点都是白色。小红每次操作可以选择两个相邻的结点，如果它们都是<strong>白色且权值的和是质数</strong>，小红就可以选择其中一个节点染红，求出小红最多可以染红多少个结点。 输入描述：第一行输入一个整数 n，表示树的结点个数。接下来一行输出 n 个整数，表示每个结点的权值。接下来的 n 行，每行输入两个整数 u 和 v，表示 u 和 v 之间有一条边。</p><p><strong>这道题，我目前没有思路，后续在写</strong></p>`,21);function v(b,h){const t=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("具体可以参考这篇文章："),n("a",d,[s("为什么 margin-top 设置百分比基于父元素的宽度计算的？"),e(t)])]),r,n("p",null,[s("参考链接："),n("a",k,[s("最浅显易懂的 KMP 算法讲解"),e(t)])]),m])}const y=p(i,[["render",v],["__file","litte_red_book.html.vue"]]);export{y as default};
