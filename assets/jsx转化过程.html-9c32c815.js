import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-406a0537.js";const t={},p=e(`<h2 id="什么是-jsx" tabindex="-1"><a class="header-anchor" href="#什么是-jsx" aria-hidden="true">#</a> 什么是 jsx？</h2><p><code>jsx</code> <code>jsx</code> 可以生成 <code>React</code> 元素，它是 <code>React</code> 的一种语法糖。</p><h2 id="jsx-转化过程" tabindex="-1"><a class="header-anchor" href="#jsx-转化过程" aria-hidden="true">#</a> jsx 转化过程</h2><h3 id="_1-转化为-react-元素" tabindex="-1"><a class="header-anchor" href="#_1-转化为-react-元素" aria-hidden="true">#</a> 1. 转化为 React 元素</h3><p>首先<code>jsx</code>会被<code>babel</code>转化成<code>React.createElement</code>的形式(<code>React16</code>),在<code>React17</code>以后,<code>JSX</code>不会将<code>JSX</code>转化为<code>React.createElement</code>的形式,而是直接从<code>React</code>的包中引入<code>JSX</code>的运行时,这样就不需要引入<code>React</code>了,这样就减少了打包的体积。</p><p>举一个例子：</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Hello</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">hello</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Hello</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在-react16-中-会被转化成" tabindex="-1"><a class="header-anchor" href="#在-react16-中-会被转化成" aria-hidden="true">#</a> 在 React16 中，会被转化成：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">/*#__PURE__*/</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>
  <span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">/*#__PURE__*/</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">/*#__PURE__*/</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>createElement(type, [props], [...children])</code></p><p>接受三个参数：</p><ul><li><code>type</code>：表示元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。</li><li><code>props</code>：表示元素的属性，比如 <code>id</code>、<code>className</code>、<code>style</code> 等。</li><li><code>children</code>：表示当前元素的子元素。</li></ul><p>返回类型：<code>ReactElement</code></p><p><code>ReactElement</code></p><p><code>ReactElement</code> 是 <code>React</code> 元素的类型，它是一个对象，它的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">ReactElement</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 用于标识这是一个 React 元素</span>
    $$<span class="token keyword">typeof</span><span class="token operator">:</span> <span class="token constant">REACT_ELEMENT_TYPE</span><span class="token punctuation">,</span>
    <span class="token comment">// 用于标识这个元素的类型</span>
    type<span class="token operator">:</span> type<span class="token punctuation">,</span>
    key<span class="token operator">:</span> key<span class="token punctuation">,</span>
    ref<span class="token operator">:</span> ref<span class="token punctuation">,</span>
    props<span class="token operator">:</span> props<span class="token punctuation">,</span>
    <span class="token comment">// 记录创建这个元素的组件</span>
    _owner<span class="token operator">:</span> owner<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>$$typeof</code>：用于标识这是一个 <code>React</code> 元素。他是一个 <code>Symbol</code> 类型的值，值为 <code>Symbol.for(&#39;react.element&#39;)</code>。</li><li><code>type</code>: 用于标识这个元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。</li><li><code>ref</code>: 用于标识这个元素的 <code>ref</code> 属性。</li><li><code>props</code>: 用于标识这个元素的属性(<code>class</code>等)。</li><li><code>key</code>: 用于标识这个元素或者组件的 <code>key</code> 属性。</li></ul><h4 id="在-react17-中-会被转化成" tabindex="-1"><a class="header-anchor" href="#在-react17-中-会被转化成" aria-hidden="true">#</a> 在 React17 中，会被转化成：</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> jsx <span class="token keyword">as</span> _jsx <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react/jsx-runtime&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> jsxs <span class="token keyword">as</span> _jsxs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react/jsx-runtime&quot;</span><span class="token punctuation">;</span>
<span class="token comment">/*#__PURE__*/</span> <span class="token function">_jsxs</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token string">&quot;app&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">/*#__PURE__*/</span> <span class="token function">_jsx</span><span class="token punctuation">(</span><span class="token string">&quot;span&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">/*#__PURE__*/</span> <span class="token function">_jsx</span><span class="token punctuation">(</span>Hello<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>jsx(type, props, children)</code></p><p>接受三个参数：</p><ul><li><code>type</code>：表示元素的类型，可以是原生的 DOM 元素，也可以是自定义的组件。</li><li><code>props</code>：表示元素的属性，比如 <code>id</code>、<code>className</code>、<code>style</code> 等。</li><li><code>children</code>：表示当前元素的子元素。</li></ul><p>返回类型：<code>ReactElement</code></p><p>引申：为什么在 React 老版本中，使用 <code>jsx</code> 语法时，需要引入 <code>React</code>，而在 React17 中，不需要引入 <code>React</code>？</p><p>因为在 React16 中，<code>jsx</code> 会被转化成 <code>React.createElement</code> 的形式，而 <code>React.createElement</code> 是一个函数，所以在使用 <code>jsx</code> 语法时，需要引入 <code>React</code>。但是在 React17 中，<code>jsx</code> 会被转化成 <code>React.js</code> 中的 <code>jsx</code> 函数，而 <code>jsx</code> 函数是一个 <code>import</code> 导入的函数，所以不需要引入 <code>React</code>。</p><h3 id="_2-react-元素转化为-fiber" tabindex="-1"><a class="header-anchor" href="#_2-react-元素转化为-fiber" aria-hidden="true">#</a> 2. React 元素转化为 Fiber</h3><p>在<code>ReactElement</code>被创建完以后，它就会被调度器<code>Scheduler</code>接管，<code>Scheduler</code>会将这个<code>ReactElement</code>放到<code>Fiber</code>中。</p><p><code>Filber</code>对应的是<code>React</code>中的<code>Fiber</code>，<code>Fiber</code>是<code>React</code>中的一个核心算法，它是一个链表结构，它的结构如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Fiber</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的组件</span>
  type<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的 DOM 元素</span>
  key<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的 DOM 元素</span>
  elementType<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的 DOM 元素</span>
  ref<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>handle<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">{</span> _stringRef<span class="token operator">:</span> <span class="token operator">?</span><span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">|</span> RefObject<span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的 DOM 元素</span>
  source<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> Source<span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的 DOM 元素</span>
  <span class="token keyword">return</span><span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 的子 Fiber</span>
  child<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 的兄弟 Fiber</span>
  sibling<span class="token operator">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 用于标识这个 Fiber 对应的组件的状态</span>
  stateNode<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token comment">// 任务优先级</span>
  memoizedState<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
  <span class="token comment">// 任务阶段</span>
  memoizedProps<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它对应三种关系：</p><ul><li><code>return</code>：用于标识这个 Fiber 的父 Fiber。</li><li><code>child</code>：用于标识这个 Fiber 的子 Fiber。</li><li><code>siblings</code>：用于标识这个 Fiber 的兄弟 Fiber。</li></ul><p>并且<code>Filber</code>中还存在任务优先级属性，用于标识这个任务的优先级，优先级越高，越先执行。</p><h3 id="_3-fiber-转化为-dom" tabindex="-1"><a class="header-anchor" href="#_3-fiber-转化为-dom" aria-hidden="true">#</a> 3. Fiber 转化为 DOM</h3><p>在<code>Fiber</code>被创建完以后，它就会被<code>Renderer</code>接管，<code>Renderer</code>会将这个<code>Fiber</code>转化成<code>DOM</code>。</p>`,34),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","jsx转化过程.html.vue"]]);export{u as default};
