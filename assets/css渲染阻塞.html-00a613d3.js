import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o,c as p,e as s,f as n,a as l,b as a}from"./app-14a5bd61.js";const i={},d=a(`<h2 id="什么是-css-渲染阻塞" tabindex="-1"><a class="header-anchor" href="#什么是-css-渲染阻塞" aria-hidden="true">#</a> 什么是 css 渲染阻塞</h2><p><code>css</code>渲染阻塞是指浏览器在解析<code>html</code>时，如果遇到了<code>css</code>，会暂停<code>html</code>的解析，等<code>css</code>加载完毕后，再继续解析<code>html</code>。所以说，css 渲染阻塞会阻塞<code>DOM</code>树的构建。</p><h2 id="为什么会有-css-渲染阻塞" tabindex="-1"><a class="header-anchor" href="#为什么会有-css-渲染阻塞" aria-hidden="true">#</a> 为什么会有 css 渲染阻塞</h2><p>当浏览器开始解析<code>HTML</code>文件时，就会生成<code>DOM</code>树，但是在生成<code>DOM</code>树的时候，如果遇到了<code>css</code>，就会停止<code>DOM</code>树的生成，等<code>css</code>加载完毕后，再继续生成<code>DOM</code>树。</p><p>这样是为了确保<code>css</code>能够正确的渲染<code>DOM</code>树，因为<code>css</code>可以修改<code>DOM</code>树的样式，<code>css</code><strong>下载，解析完毕</strong>后，再去渲染<code>DOM</code>树，就可以确保<code>css</code>能够正确的渲染<code>DOM</code>树。</p><h2 id="如何避免-css-渲染阻塞" tabindex="-1"><a class="header-anchor" href="#如何避免-css-渲染阻塞" aria-hidden="true">#</a> 如何避免 css 渲染阻塞</h2><h3 id="_1-将-css-放在head标签中" tabindex="-1"><a class="header-anchor" href="#_1-将-css-放在head标签中" aria-hidden="true">#</a> 1. 将 css 放在<code>head</code>标签中</h3><p>将<code>css</code>放在<code>head</code>标签中，可以确保<code>css</code>在<code>DOM</code>树生成之前就加载完毕，这样就不会阻塞<code>DOM</code>树的生成。</p><h3 id="_2-使用媒体查询" tabindex="-1"><a class="header-anchor" href="#_2-使用媒体查询" aria-hidden="true">#</a> 2. 使用媒体查询</h3><p>我们可以使用媒体查询来指定<code>css</code>的<strong>加载时机</strong>，这样就可以避免<code>css</code>阻塞<code>DOM</code>树的生成。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 网页首次加载时，只在打印内容时适用 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>print<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- 当符合某种条件的时候才会阻塞渲染 --&gt;</span>
<span class="token comment">&lt;!-- 宽度至少是40em --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(min-width: 40em)<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 一直会阻塞渲染 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries",target:"_blank",rel:"noopener noreferrer"},r=a(`<h4 id="媒体查询" tabindex="-1"><a class="header-anchor" href="#媒体查询" aria-hidden="true">#</a> 媒体查询</h4><p>简单来说，媒体查询就是一种检测浏览器或设备特性的方法，可以根据<strong>不同的特性</strong>来加载不同的<code>css</code></p><p>媒体查询的语法如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token keyword">not</span>|<span class="token keyword">only</span> mediatype <span class="token keyword">and</span> <span class="token punctuation">(</span>expressions<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  CSS-Code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>not</code>：表示不匹配媒体类型的情况</li><li><code>only</code>：表示只匹配媒体类型的情况</li><li><code>meidatype</code>：指定媒体类型，如<code>screen</code>、<code>print</code>等</li><li><code>expressions</code>：媒体查询表达式，用来检测媒体类型的特性，如<code>width</code>、<code>height</code>等 <ul><li><code>max-width</code>：最大宽度(至多多少)</li><li><code>min-width</code>：最小宽度(至少多少)</li></ul></li></ul><p>语法改进：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 40em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 宽度至少是40em */</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 现在可以改写成 */</span>
<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>width &gt;= 40em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 宽度至少是40em */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 40em<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 60em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 宽度至少是40em，至多是60em */</span>
<span class="token punctuation">}</span>

<span class="token comment">/* 现在可以改写成 */</span>

<span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span>width &gt;= 40em<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>width &lt;= 60em<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>
  <span class="token comment">/* 宽度至少是40em，至多是60em */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="媒体查询的使用场景" tabindex="-1"><a class="header-anchor" href="#媒体查询的使用场景" aria-hidden="true">#</a> 媒体查询的使用场景</h4><ul><li>响应式布局</li><li>设置打印样式(<code>@media print { ... }</code>)</li><li>动态样式(根据不同的设备特性，加载不同的样式)</li><li>图片优化(根据不同的设备，不同分辨率，加载不同的图片)</li></ul><h3 id="_3-使用内联样式" tabindex="-1"><a class="header-anchor" href="#_3-使用内联样式" aria-hidden="true">#</a> 3. 使用内联样式</h3><h3 id="_4-使用preload和prefetch" tabindex="-1"><a class="header-anchor" href="#_4-使用preload和prefetch" aria-hidden="true">#</a> 4. 使用<code>preload</code>和<code>prefetch</code></h3><p><code>preload</code>和<code>prefetch</code>是<code>html5</code>中的新特性，可以用来指定资源的加载时机。</p><p><code>preload</code>用来指定<strong>当前页面必须要用到的资源</strong>，而<code>prefetch</code>用来指定<strong>当前页面可能会用到的资源</strong>。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- preload --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>preload<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token comment">&lt;!-- prefetch --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefetch<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>style<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作用就是：<strong>预加载，提前加载，提前缓存，一般都是将他直接缓存在浏览器的缓存目录下。</strong></p>`,16);function k(m,h){const e=c("ExternalLinkIcon");return o(),p("div",null,[d,s("p",null,[n("引申："),s("a",u,[n("媒体查询"),l(e)])]),r])}const b=t(i,[["render",k],["__file","css渲染阻塞.html.vue"]]);export{b as default};
