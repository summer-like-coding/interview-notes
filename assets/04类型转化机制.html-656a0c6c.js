import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as t,c,e as p,f as n,a as l,w as d,b as s}from"./app-326e41d4.js";const u={},i=s('<h3 id="显示类型转化" tabindex="-1"><a class="header-anchor" href="#显示类型转化" aria-hidden="true">#</a> 显示类型转化</h3><ul><li>转化为<code>Number</code>的方法: <code>parseInt()</code>和<code>Number()</code></li><li>转化为<code>String</code>的方法: <code>toString()</code>和<code>String()</code></li><li>转化为<code>Boolean</code>的方法: <code>Boolean()</code>和<code>!!</code></li></ul>',2),r=s(`<h3 id="隐式类型转化" tabindex="-1"><a class="header-anchor" href="#隐式类型转化" aria-hidden="true">#</a> 隐式类型转化</h3><p>隐式类型转化发生的场景：</p><ul><li><p>比较运算符(<code>==</code>,<code>!=</code>,<code>===</code>,<code>!==</code>,<code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>),<code>if</code>,<code>while</code> 这种需要转化为<code>boolean</code>的场景，会将其他类型转化为<code>boolean</code>，然后再进行比较</p></li><li><p>算术运算符(<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>)</p><ul><li>自动转化为字符串<br><strong>一般遇到<code>+</code>,并且有字符串，那么就会转化为字符串</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// &#39;51&#39;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5true&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5false&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5[object Object]&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5function (){}&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5undefined&quot;</span>
<span class="token string">&quot;5&quot;</span> <span class="token operator">+</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// &quot;5null&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自动转化为数字<br><strong>除了<code>+</code>会转化为字符串，其他都是转为数字</strong><br> 转化应该调用的是<code>Number()</code>方法，将<code>undefined</code>转化为<code>NaN</code>，将<code>null</code>转化为<code>0</code></li></ul></li></ul>`,3);function k(m,q){const o=e("RouterLink");return t(),c("div",null,[i,p("p",null,[n("具体可以参考"),l(o,{to:"/JavaScript/01%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"},{default:d(()=>[n("JavaScript 数据类型")]),_:1})]),r])}const _=a(u,[["render",k],["__file","04类型转化机制.html.vue"]]);export{_ as default};
